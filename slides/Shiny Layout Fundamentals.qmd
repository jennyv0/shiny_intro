---
title: "Shiny Layout Fundamentals"
format: 
  revealjs:
    slide-number: true
    highlight-style: a11y
    
filters: 
- shinylive
---

# Layouts

## Sidebar layout

:::: {.columns}
::: {.column width='50%'}


```r

fluidPage(
  titlePanel(
    # app title/description
  ),
  sidebarLayout(
    sidebarPanel(
      # inputs
    ),
    mainPanel(
      # outputs
    )
  )
)


```

:::
::: {.column width='50%'}
![](images/layout-sidebar.png){fig-align="center" width="100%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#page-with-sidebar)
:::

:::
::::

## Sidebar layout

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| components: [editor, viewer]

library(shiny)

ui <- fluidPage(
  titlePanel("Central limit theorem"),
  sidebarLayout(
    sidebarPanel(
      numericInput("m", "Number of samples:", 2, min = 1, max = 100)
    ),
    mainPanel(
      plotOutput("hist")
    )
  )
)
server <- function(input, output, session) {
  output$hist <- renderPlot({
    means <- replicate(1e4, mean(runif(input$m)))
    hist(means, breaks = 20)
  }, res = 96)
}

# Run the application 
shinyApp(ui = ui, server = server)

```
## Multi-row layout

![](images/layout-fluidrow.png){fig-align="center" width="60%"}

::: aside
From [Mastering Shiny](https://mastering-shiny.org/action-layout.html#multi-row)
:::

## Multi-row layout

- Default column size is 12
- Good for vertical apps

## `xPage()`

- `fluidPage()` Uses the grid system, responsive to different screen sizes. 
- `fixedPage()` has fixed maximum width, so it doesn't stretch with bigger screens/browser windows.
- `fillpage()` fills up the whole browser window and resizes with the browser window.


## Multipage layouts

`tabsetPanel()`

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| components: [editor, viewer]

library(shiny)

ui <- fluidPage(
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "Data", buttonLabel = "Upload..."),
      textInput("delim", "Delimiter (leave blank to guess)", ""),
      numericInput("skip", "Rows to skip", 0, min = 0),
      numericInput("rows", "Rows to preview", 10, min = 1)
    ),
    tabPanel("Set parameters"),
    tabPanel("Visualise results")
  )
)

server <- function(input, output, session) {}

# Run the application 
shinyApp(ui = ui, server = server)

```


## Multipage layouts

`navlistPanel()`

Like tabset panel, but runs vertically. Helps overcome string limitations from tabset panel.

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| components: [editor, viewer]

library(shiny)

ui <- fluidPage(
  navlistPanel(
    id = "tabset",
    "Heading 1",
    tabPanel("panel 1", "Panel one contents"),
    "Heading 2",
    tabPanel("panel 2", "Panel two contents"),
    tabPanel("panel 3", "Panel three contents")
  )
)

server <- function(input, output, session) {}

# Run the application 
shinyApp(ui = ui, server = server)

```


## Multipage layouts

`navbarPage()` and `navbarMenu()`


```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| components: [editor, viewer]

library(shiny)

ui <- navbarPage(
  "Page title",   
  tabPanel("panel 1", "one"),
  tabPanel("panel 2", "two"),
  tabPanel("panel 3", "three"),
  navbarMenu("subpanels", 
    tabPanel("panel 4a", "four-a"),
    tabPanel("panel 4b", "four-b"),
    tabPanel("panel 4c", "four-c")
  )
)

server <- function(input, output, session) {}

# Run the application 
shinyApp(ui = ui, server = server)

```