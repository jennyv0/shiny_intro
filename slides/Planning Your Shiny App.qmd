---
title: "Planning Your Shiny App"
format:
  revealjs:
    incremental: true
    theme: simple   
    
filters: 
- shinylive
---

## Planning your Shiny app is THE most important thing you can do. 

::: {layout-nrow=2}

![](images/poor_dash2.png){fig-align="center" width="35%"}
![](images/poor_dash3.png){fig-align="center" width="35%"}
![](images/poor_dash4.png){fig-align="center" width="35%"}
![](images/poor_dashboard_1.png){fig-align="center" width="35%"}

::: 

## Things to consider:
-   Does it show the required information? 
-   Does it use the appropriate graphics?
-   Am I using appropriate widgets (inputs)?
-   **Particularly important with Shiny:** how these inputs will interact with the graphics! 

## Gathering requirements:
-   Are the requirements vague or specific?
-   remember to ask: **is it necessary?** (do we need it all?!) 

- ***You are the data professional - your input still matters!***

## Appropriate graphics:
-   Multiple lines
-   Bar vs line
-   Use of gradients

## Appropriate widgets:
-   Checkbox vs radio boxes
-   Drop down vs free text
-   Hardcoded drop down options vs using `observe()` to update input options
-   Calendar select widget...etc
-   Unneccesary buttons
-   Grab inspo from existing forms

## How do these inputs interact with the graphics?
-   One to one
    - e.g. A filter might affect one graph on the dash only.
-   One to many
    - e.g. A filter might be global, and impact all figures on a dash.
-   Rule of thumb: K.I.S.S

## WIREFRAMING
-   map what it looks like
-   what interacts with what

## Wireframe examples:

::: {layout-nrow=2}

![Low fidelity wireframe](images/lofi-wireframe.JPG){fig-align="center" width="40%"}
![High fidelity wireframe](images/hifi-wireframe.png){fig-align="center" width="40%"}
:::

## Example Shiny app

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| components: [viewer]

library(shiny)
library(pokemon)
library(shinyWidgets)
library(DT)
library(dplyr)

pokemon_data <- pokemon::pokemon


# Define UI for application that draws a histogram
ui <- fluidPage(
    
    # Application title
    titlePanel("The Shiny Pokedex"),
    
    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            
            selectInput("type_1_filter", "Filter by Type 1:", unique(pokemon_data$type_1), multiple = TRUE),
            selectInput("type_2_filter", "Filter by Type 2:", unique(pokemon_data$type_2), multiple = TRUE),
            sliderInput("height_filter", "Filter by Height:", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height))),
            sliderInput("weight_filter", "Filter by Weight:", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight))),
            br(),
            actionButton('reset', 'Clear filters')
        ),
        mainPanel(
            DTOutput("table"),
            DTOutput("pokemon_details")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
    
    observeEvent(input$reset, {
        updateSelectInput(session, "type_2_filter", choices = unique(pokemon_data$type_2))
        
        updateSelectInput(session, "type_1_filter", choices = unique(pokemon_data$type_1))
        
        updateSliderInput(session, "height_filter", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height)))
        
        updateSliderInput(session, "weight_filter", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight)))
    })
    
    
    
    # Reactive expression for filtering data based on user inputs
    filtered_data <- reactive({
        data <- pokemon_data
        
        # Filter by Type 1
        if (!is.null(input$type_1_filter) && length(input$type_1_filter) > 0) {
            data <- data[data$type_1 %in% input$type_1_filter, ]
        }
        
        # Filter by Type 2
        if (!is.null(input$type_2_filter) && length(input$type_2_filter) > 0) {
            data <- data[data$type_2 %in% input$type_2_filter, ]
        }
        
        # Filter by Height
        data <- data[data$height >= input$height_filter[1] & data$height <= input$height_filter[2], ]
        
        # Filter by Weight
        data <- data[data$weight >= input$weight_filter[1] & data$weight <= input$weight_filter[2], ]
        
        data <- data %>% 
            select(pokemon)
        
        return(data)
    })
    
    # Update filter choices based on selected data
    observe({
        
        # Update Type 2 filter choices based on selected Type 1 values
        selected_type_1 <- input$type_1_filter
        type_2_choices <- unique(pokemon_data$pokemon_data$type_2[pokemon_data$type_1 %in% selected_type_1])
        updateSelectInput(session, "type_2_filter", choices = type_2_choices)
        
        # Update Type 1 filter choices based on selected Type 2 values
        selected_type_2 <- input$type_2_filter
        type_1_choices <- unique(pokemon_data$pokemon_data$type_1[pokemon_data$type_2 %in% selected_type_2])
        updateSelectInput(session, "type_1_filter", choices = type_1_choices)
    })
    
    # Render the DataTable
    output$table <- renderDT({
        datatable(filtered_data(), selection = list(mode = 'single'))
    })
    
    
    details <- eventReactive(input$table_rows_selected,{
        
        pokemon_name <- filtered_data()$pokemon[input$table_rows_selected]
        subset(pokemon_data, pokemon_data$pokemon == pokemon_name)
        
    })
    
    # Render the DataTable
    output$pokemon_details <- renderDT({
        datatable(details())
    })
    
}

# Run the application 
shinyApp(ui = ui, server = server)
```