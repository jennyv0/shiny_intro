[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to an Intro to Shiny!",
    "section": "",
    "text": "This intro will be a speed run through the basics of Shiny – laying down the foundation for your journey into RShiny application development.\nEverything we will go through today will be on this website. We probably won’t get through everything, but feel free to have a read of this in your own time and give the exercises a go.",
    "crumbs": [
      "Home",
      "Structure of today",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "index.html#extra-resources",
    "href": "index.html#extra-resources",
    "title": "Welcome to an Intro to Shiny!",
    "section": "Extra Resources",
    "text": "Extra Resources\n\n\n\nContent\nLink\n\n\n\n\nGoogle R Style Guide\nhere\n\n\nMastering Shiny\nhere\n\n\nEngineering Production Grade Shiny Apps\nhere\n\n\nCSS For Shiny\nhere",
    "crumbs": [
      "Home",
      "Structure of today",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#what-is-a-shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#what-is-a-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "What is a Shiny app?",
    "text": "What is a Shiny app?\n\nAnything built using the Shiny framework!\nCan be a dashboard, can be a website, it can be a form…\nFor example:\nShiny app can be a nice front end to a RedCap database.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "Shiny App",
    "text": "Shiny App\n\nThis continuous request-response cycle enables real-time interactivity within the application",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#key-takeaways",
    "href": "slides/Basic Structure of a Shiny App.html#key-takeaways",
    "title": "Basic Structure of a Shiny App",
    "section": "Key takeaways:",
    "text": "Key takeaways:\n\nInputs: filters, widgets, buttons - anything that they user can use to interact with the app.\nOutputs: Graphs, tables…things that the app produces.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#shiny-app-skeleton",
    "href": "slides/Basic Structure of a Shiny App.html#shiny-app-skeleton",
    "title": "Basic Structure of a Shiny App",
    "section": "Shiny App Skeleton",
    "text": "Shiny App Skeleton\n\nlibrary(shiny)\n\nshinyApp(\n  ui = list(),\n  \n  server = function(input, output, session) {\n  \n  }\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#ui",
    "href": "slides/Basic Structure of a Shiny App.html#ui",
    "title": "Basic Structure of a Shiny App",
    "section": "UI",
    "text": "UI\n\nuser interface\nmostly codes for the things you can see, layout and the widget\nwhere the inputs and outputs are declared\nBest practice: do NOT put your data analysis in this section!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#server",
    "href": "slides/Basic Structure of a Shiny App.html#server",
    "title": "Basic Structure of a Shiny App",
    "section": "Server",
    "text": "Server\n\ncontains all the logic that creates the “outputs”\noutputs are usually coded as output$xxx and inputs as input$xxx\nAlways build objects to display with one of the render*() functions, like we built our plot with renderPlot().\nUse input values from the named input list, with input$xx.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#a-very-basic-shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#a-very-basic-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "A very basic shiny app",
    "text": "A very basic shiny app\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-it-all-comes-together",
    "href": "slides/Basic Structure of a Shiny App.html#how-it-all-comes-together",
    "title": "Basic Structure of a Shiny App",
    "section": "How it all comes together",
    "text": "How it all comes together",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#key-takeaways-1",
    "href": "slides/Basic Structure of a Shiny App.html#key-takeaways-1",
    "title": "Basic Structure of a Shiny App",
    "section": "Key takeaways:",
    "text": "Key takeaways:\nInputs: filters, widgets, buttons - anything that they user can use to interact with the app. Outputs: Graphs, tables…things that the app produces.\nWhen you look at traditionl apps/dashboards, inputs are usually up the top, or on the sidebar on the left, and the outputs are all of the grphs and tables that that you can interact with via the inputs.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nThere are many options. The most simple ways to arrange your Shiny apps include:\n\nUI & Server in one Shiny Script\nUI & Server in different scripts\nAddition of global.R file\n\n& many more!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-1",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-1",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in one Shiny script",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-cont",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-cont",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory (cont)",
    "text": "How to organise your directory (cont)\nUI & server in one Shiny script:\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\nß\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-2",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-2",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts  —",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-3",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-3",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - ui.R\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nUI &lt;- shinyUI({\n    fluidPage(\n        \n        # Application title\n        titlePanel(\"Old Faithful Geyser Data\"),\n        \n        # Sidebar with a slider input for number of bins\n        sidebarLayout(\n            sidebarPanel(\n                sliderInput(\"bins\",\n                            \"Number of bins:\",\n                            min = 1,\n                            max = 50,\n                            value = 30)\n            ),\n            \n            # Show a plot of the generated distribution\n            mainPanel(\n                plotOutput(\"distPlot\")\n            )\n        )\n    )\n})",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-4",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-4",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - server.R\n\nlibrary(shiny)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output, session) {\n\n    output$distPlot &lt;- renderPlot({\n\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n\n    })\n\n}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-5",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-5",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - app.R\n\nlibrary(shiny)\nsource('UI.R', local = TRUE)\nsource('server.R')\n\nshinyApp(\n  ui = UI,\n  server = server\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-6",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-6",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\n\nYou can further break down the ui code into different tab scripts if creating an app with multiple tabs (using tab1.R scripts etc.)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-7",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-7",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nAddition of global.R script - Any pre-processing or functions can be saved to your global.R script to be used in ui.R, server.R or app.R files. - Generally more efficient. - However, with DB connections which require oauth in the UI script, there is limited use for this.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#more-advanced-ways-of-organising-your-shiny-projects",
    "href": "slides/Basic Structure of a Shiny App.html#more-advanced-ways-of-organising-your-shiny-projects",
    "title": "Basic Structure of a Shiny App",
    "section": "More advanced ways of organising your shiny projects:",
    "text": "More advanced ways of organising your shiny projects:\nLater down the track, I would suggest looking at creating Shiny apps using the following frameworks\nGolem:\nA Framework to create modularised, scalable apps packaged up like a package! Productionising Shiny apps with Golem\nModules:\nAnother way to package up long term, scalable apps. Mastering Shiny - Packages",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/bslib.html",
    "href": "slides/bslib.html",
    "title": "bslib",
    "section": "",
    "text": "Last week we looked at flexdashboard and shinydashboard. Another option is bslib.\nThe bslib R package provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap. It facilitates:",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---bslib-dashboard",
    "href": "slides/bslib.html#demo---bslib-dashboard",
    "title": "bslib",
    "section": "Demo - bslib dashboard",
    "text": "Demo - bslib dashboard\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n        selected = \"Chicago\", multiple = TRUE\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      )\n    ),\n    card(\n      card_header(\"Temperature\"), \n      plotOutput(\"plot_temp\")\n    ),\n    card(\n      card_header(\n        textOutput(\"header_other\")\n      ),\n      plotOutput(\"plot_other\")\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#layouts",
    "href": "slides/bslib.html#layouts",
    "title": "bslib",
    "section": "Layouts",
    "text": "Layouts\nAs we’ve just seen the basic layout of elements is to place each element on its own row (e.g. each card in Demo 11).\nColumns can be constructed using layout_columns() (or layout_columns_wrap()) where each element is a column\n\nColumns will have equal width by default\ncol_widths can be used to specify width (in terms of bootstrap columns)\nTotal widths &gt;12 will result in multiple rows\nNegative widths result in empty columns\nlayout_columns() can be nested inside other layout_columns() for mixed layouts\n\n\n\nTo get the most out of bslib it is important to wrap your head around filling layouts",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---layout",
    "href": "slides/bslib.html#demo---layout",
    "title": "bslib",
    "section": "Demo - layout",
    "text": "Demo - layout\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n        selected = \"Chicago\", multiple = TRUE\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      )\n    ),\n    layout_columns(\n      col_widths = c(10,2,-1,10,-1),\n      card(\n        card_header(\"Temperature\"), \n        plotOutput(\"plot_temp\")\n      ),\n      list(\n        value_box(\n          title = \"Min temp\",\n          value = textOutput(\"min_temp\"),\n          showcase = bsicons::bs_icon(\"thermometer-low\"),\n          theme_color = \"primary\"\n        ),\n        value_box(\n          title = \"Max temp\",\n          value = textOutput(\"max_temp\"),\n          showcase = bsicons::bs_icon(\"thermometer-high\"),\n          theme_color = \"danger\"\n        )\n      ),\n      card(\n        card_header(\n          textOutput(\"header_other\")\n        ),\n        plotOutput(\"plot_other\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$min_temp = renderText({min(d_city()$temp)})\n    output$max_temp = renderText({max(d_city()$temp)})\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---other-components",
    "href": "slides/bslib.html#demo---other-components",
    "title": "bslib",
    "section": "Demo - other components",
    "text": "Demo - other components\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(open=FALSE),\n    card(\n      card_header(\n        \"Temperature\",\n        popover(\n          bsicons::bs_icon(\"gear\"),\n          title = \"Input controls\",\n          selectInput(\n            \"city\", \"Select a city\",\n            choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n            selected = \"Chicago\", multiple = TRUE\n          )\n        )\n      ), \n      plotOutput(\"plot_temp\")\n    ),\n    card(\n      card_header(textOutput(\"header_other\")),\n      layout_sidebar(\n        sidebar = sidebar(\n          position = \"right\", open = FALSE,\n          selectInput(\n            \"var\", \"Select a variable\",\n            choices = d_vars, selected = \"humidity\"\n          )\n        ),\n        plotOutput(\"plot_other\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\nMore demos of the full bslib capability is available on the documentation here.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#your-turn---faithful-makeover",
    "href": "slides/bslib.html#your-turn---faithful-makeover",
    "title": "bslib",
    "section": "Your Turn - Faithful Makeover",
    "text": "Your Turn - Faithful Makeover\nCreate a new Shiny app using RStudio’s Create Shiny App template. You can call the app exercises/makeover.\nYour task is to re-design the starting shiny template app using bslib. Here are some functions to try:\n\npage_*()\nlayout_sidebar()\nlayout_columns()\ncard()\nvalue_box()",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "exercises/hello-world.html",
    "href": "exercises/hello-world.html",
    "title": "hello-world",
    "section": "",
    "text": "goalproblemsolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#things-to-consider",
    "href": "slides/Planning Your Shiny App.html#things-to-consider",
    "title": "Planning Your Shiny App",
    "section": "Things to consider:",
    "text": "Things to consider:\n\nDoes it show the required information?\nDoes it use the appropriate graphics?\nAm I using appropriate widgets (inputs)?\nParticularly important with Shiny: how these inputs will interact with the graphics!"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#gathering-requirements",
    "href": "slides/Planning Your Shiny App.html#gathering-requirements",
    "title": "Planning Your Shiny App",
    "section": "Gathering requirements:",
    "text": "Gathering requirements:\n\nAre the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#appropriate-graphics",
    "href": "slides/Planning Your Shiny App.html#appropriate-graphics",
    "title": "Planning Your Shiny App",
    "section": "Appropriate graphics:",
    "text": "Appropriate graphics:\n\nMultiple lines\nBar vs line\nUse of gradients"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#appropriate-widgets",
    "href": "slides/Planning Your Shiny App.html#appropriate-widgets",
    "title": "Planning Your Shiny App",
    "section": "Appropriate widgets:",
    "text": "Appropriate widgets:\n\nCheckbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/Planning Your Shiny App.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Planning Your Shiny App",
    "section": "How do these inputs interact with the graphics?",
    "text": "How do these inputs interact with the graphics?\n\nOne to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#wireframing",
    "href": "slides/Planning Your Shiny App.html#wireframing",
    "title": "Planning Your Shiny App",
    "section": "WIREFRAMING",
    "text": "WIREFRAMING\n\nmap what it looks like\nwhat interacts with what"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#wireframe-examples",
    "href": "slides/Planning Your Shiny App.html#wireframe-examples",
    "title": "Planning Your Shiny App",
    "section": "Wireframe examples:",
    "text": "Wireframe examples:"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#example-shiny-app",
    "href": "slides/Planning Your Shiny App.html#example-shiny-app",
    "title": "Planning Your Shiny App",
    "section": "Example Shiny app",
    "text": "Example Shiny app\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(shiny)\nlibrary(pokemon)\nlibrary(shinyWidgets)\nlibrary(DT)\nlibrary(dplyr)\n\npokemon_data &lt;- pokemon::pokemon\n\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n    \n    # Application title\n    titlePanel(\"The Shiny Pokedex\"),\n    \n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            \n            selectInput(\"type_1_filter\", \"Filter by Type 1:\", unique(pokemon_data$type_1), multiple = TRUE),\n            selectInput(\"type_2_filter\", \"Filter by Type 2:\", unique(pokemon_data$type_2), multiple = TRUE),\n            sliderInput(\"height_filter\", \"Filter by Height:\", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height))),\n            sliderInput(\"weight_filter\", \"Filter by Weight:\", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight))),\n            br(),\n            actionButton('reset', 'Clear filters')\n        ),\n        mainPanel(\n            DTOutput(\"table\"),\n            DTOutput(\"pokemon_details\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output, session) {\n    \n    observeEvent(input$reset, {\n        updateSelectInput(session, \"type_2_filter\", choices = unique(pokemon_data$type_2))\n        \n        updateSelectInput(session, \"type_1_filter\", choices = unique(pokemon_data$type_1))\n        \n        updateSliderInput(session, \"height_filter\", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height)))\n        \n        updateSliderInput(session, \"weight_filter\", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight)))\n    })\n    \n    \n    \n    # Reactive expression for filtering data based on user inputs\n    filtered_data &lt;- reactive({\n        data &lt;- pokemon_data\n        \n        # Filter by Type 1\n        if (!is.null(input$type_1_filter) && length(input$type_1_filter) &gt; 0) {\n            data &lt;- data[data$type_1 %in% input$type_1_filter, ]\n        }\n        \n        # Filter by Type 2\n        if (!is.null(input$type_2_filter) && length(input$type_2_filter) &gt; 0) {\n            data &lt;- data[data$type_2 %in% input$type_2_filter, ]\n        }\n        \n        # Filter by Height\n        data &lt;- data[data$height &gt;= input$height_filter[1] & data$height &lt;= input$height_filter[2], ]\n        \n        # Filter by Weight\n        data &lt;- data[data$weight &gt;= input$weight_filter[1] & data$weight &lt;= input$weight_filter[2], ]\n        \n        data &lt;- data %&gt;% \n            select(pokemon)\n        \n        return(data)\n    })\n    \n    # Update filter choices based on selected data\n    observe({\n        \n        # Update Type 2 filter choices based on selected Type 1 values\n        selected_type_1 &lt;- input$type_1_filter\n        type_2_choices &lt;- unique(pokemon_data$pokemon_data$type_2[pokemon_data$type_1 %in% selected_type_1])\n        updateSelectInput(session, \"type_2_filter\", choices = type_2_choices)\n        \n        # Update Type 1 filter choices based on selected Type 2 values\n        selected_type_2 &lt;- input$type_2_filter\n        type_1_choices &lt;- unique(pokemon_data$pokemon_data$type_1[pokemon_data$type_2 %in% selected_type_2])\n        updateSelectInput(session, \"type_1_filter\", choices = type_1_choices)\n    })\n    \n    # Render the DataTable\n    output$table &lt;- renderDT({\n        datatable(filtered_data(), selection = list(mode = 'single'))\n    })\n    \n    \n    details &lt;- eventReactive(input$table_rows_selected,{\n        \n        pokemon_name &lt;- filtered_data()$pokemon[input$table_rows_selected]\n        subset(pokemon_data, pokemon_data$pokemon == pokemon_name)\n        \n    })\n    \n    # Render the DataTable\n    output$pokemon_details &lt;- renderDT({\n        datatable(details())\n    })\n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "slides/Reactivity.html",
    "href": "slides/Reactivity.html",
    "title": "Reactivity",
    "section": "",
    "text": "The beauty of the Shiny app isreactivity.\nShiny apps use ‘reactivity’ to make them interactive and responsive. So when you click on a button, or change something on the screen, the app updates itself without having to refresh the whole page. (Unlike other libraries used to create dashboards)\nIn a fully functioning Shiny app, you should be able to map out every interaction, calculation and output using a “reactive graph”.\n\n\n\n\n\n\n\nLet’s say we have an app with two plots (a scatter and distribution plot), and two inputs (a check box, and a slider). The scatter plot can be modified with both the check box and the slider, distribution plot is only interactive with the slider:\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nHOW REACTIVITY WORKS\nInitial state\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nCalculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  classDef changed fill:#f96\n\n\n\n\n\n\nThe diagram below is known as the reactive graph.\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n\n\n\n\n\n\nWhat happens when the slider changes?\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nThe slider and dependencies become invalidated.\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nForget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nUpdated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nCheckbox changes\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nInvalidated\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nForget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nUpdated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nHow do other frameworks work?\n\nStreamlit: re-render everything everywhere all the time\nDash/Panel/Gradio: Define callback functions\nPowerBI can do individual plots and widgets but graphics are ugly\n\n\n\n\nConsider this Shiny app below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThe reactive elements in this app are outlined in the UI elements in the script:\nInputs: - selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track))\nOutputs: - plotOutput(\"position_plot\")\n\n\n\n\n\nThe logic behind those elements are defined in the server:\n# Render the plot\noutput$position_plot &lt;- renderPlot({\n\n# Filter data based on user selection\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector)\n})\n\nggplot(selected_song_data(), aes(x = week, y = position)) +\ngeom_line() +\nlabs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\nx = \"Week\",\ny = \"Position\") +\nscale_y_reverse(limits = c(100, 0))\n})\n}\n\n\n\n\n\n\n\n\nUI:\nsliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\nServer:\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector &\nweek &gt;= input$week_no[1] &\nweek &lt;= input$week_no[2])\n})\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\nWhat does our reactive graph look like now?\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1 If you were to add a table that displays the week by week position of the song that was not affected by the month slider, what would the graph look like? \n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the code below, add a table that displays the week by week position of the song.\nTip:Use renderTable() and tableOutput().\n\n\nGoalProblem\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\nReactive values exist in between sources (e.g. an input) and endpoints (e.g. an output).\nA reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies\n\nHave a look at our example from the exercise above, can you see how filter(data, track == input$song_selector) was called twice in each of the render functions?\n\n\n\n\nIf reactive_object &lt;- reactive({...}) then you can only access or use reactive_object downstream usingreact_obj() and not react_obj.\nthink of react_obj() as a function that returns the current value\nCommon cause of everyone’s my favorite R error:\n\n## Error: object of type 'closure' is not subsettable`\n\ninput$XXX reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.) otherwise you get this other common error:\n\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)\n\n\nCreate a reactive() intermediate data frame so that it doesn’t have to be loaded twice when creating the two outputs.\nInstead of this:\n\n\n\n\n\nWe will have this:\n\n\n\n\n\n\n\nProblemSolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor,viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n    # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\nThese are constructed in the same way as a reactive() however an observer does not return a value, rather they are used for their “side effects”.\n\nThe side effects can involve sending data to the client browser, e.g. updating a UI element\nBecause observe() is used for its side effects, you will never see XXX &lt;- observe() because observe() will never produce a value!\n\nSo key thing to remember: reactive() produces things, observe() does things.\nSome examples when you would use observe:\n\nlogging user actions\nupdating a drop down list, based on data that has been loaded\n\n\n\n\n\nWithout using observe()Using observe()\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n  observe({\n    sub_cat_vals &lt;- data %&gt;% filter(Letter == input$letter) %&gt;% select(Sub_category)\n    \n    updateSelectInput(\n      session = session, \n      inputId = \"sub\",\n      choices = sub_cat_vals,\n      selected = head(sub_cat_vals, 1)\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\nSo how can we use observe() in our previous example? Take a look at the code below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  selectInput(\"artist_selector\", \"Select an Artist:\", choices = unique(data$artist)),\n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    req(input$song_selector)\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  observe({\n    songs = data %&gt;% \n      filter(artist == input$artist_selector) %&gt;% \n      pull(track) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    updateSelectInput(\n      inputId = \"song_selector\", \n      choices = songs\n    )\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThis observe block monitors changes in the selected artist (input$artist_selector). When a change occurs, it filters, processes, and sorts the corresponding track names from the dataset. Then, it dynamically updates the choices available in a selectInput song selector widget based on the unique and sorted track names associated with the selected artist.\nSo TLDR: observe() continually monitors for changes in the reactive change and does the action prescribed (which in this case was updating another selector).\nBecause of observe() is always constantly monitoring for changes in the environment, and reactive() values only ever gets changed if an input is changed, reactive() is known to be ‘lazy’.\n\n\n\n\n\n\n\n\n\n\n\nWriting a CSV\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nQuerying a database\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nAdding two numbers\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which prints to the console\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nFetching the current temperature from an API\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which sorts a list in place\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\n\n\n\n\nreactlog is a package that can help you understand the reactive chains in your app.\nYou can use it by running the following script:\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n\n# run a shiny app\nrunApp('app.R')\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()\n\n\n\n\nbecause reactivity does not determine when calculations happen, things can load at different times - i.e. the Shiny app might attempt to render tables and the UI before oauth and a DB connection is established resulting in some unsightly error messages.\nUse req() in your server functions to outline the values/objects required before the value is calculated. i.e. req(input$slider) means ‘don’t run the next bit of code unless there is a value in the slider input!’\n\n\n\n\n\n\n\n\n\n\n\nAre the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!\n\n\n\n\n\nMultiple lines\nBar vs line\nUse of gradients\n\n\n\n\n\nCheckbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms\n\n\n\n\n\nOne to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S\n\n\n\n\n\nmap what it looks like\nwhat interacts with what\n\n\n\n\n::: {layout-nrow=2}\n \n\n\n\nBuild a Shiny App using the Supermarket Sales data set available here.\nYou app must have the following:\nInputs:\n\nAbility to select branch\nAbility to select the location (options will show depending on the branch)\nAbility to select customer type\nFrom & to date\n\nOutputs:\n\nLine graph showing $ amount sold per day (remember to multiple quantity by price to get the amount)\nA simple bar graph showing different in dollar amount spent between men and women\nA table showing dollar amount spent by product type.\n\nDon’t worry too much about theming for now. But remember the foundations:\n\nwireframing\nreactive graphs (if it helps)\nreactive values so that you don’t repeat yourself\n\nReach out if you need tips/troubleshooting!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-elements",
    "href": "slides/Reactivity.html#reactive-elements",
    "title": "Reactivity",
    "section": "",
    "text": "Consider this Shiny app below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThe reactive elements in this app are outlined in the UI elements in the script:\nInputs: - selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track))\nOutputs: - plotOutput(\"position_plot\")\n\n\n\n\n\nThe logic behind those elements are defined in the server:\n# Render the plot\noutput$position_plot &lt;- renderPlot({\n\n# Filter data based on user selection\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector)\n})\n\nggplot(selected_song_data(), aes(x = week, y = position)) +\ngeom_line() +\nlabs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\nx = \"Week\",\ny = \"Position\") +\nscale_y_reverse(limits = c(100, 0))\n})\n}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#adding-in-another-input",
    "href": "slides/Reactivity.html#adding-in-another-input",
    "title": "Reactivity",
    "section": "",
    "text": "UI:\nsliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\nServer:\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector &\nweek &gt;= input$week_no[1] &\nweek &lt;= input$week_no[2])\n})\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\nWhat does our reactive graph look like now?\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1 If you were to add a table that displays the week by week position of the song that was not affected by the month slider, what would the graph look like? \n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the code below, add a table that displays the week by week position of the song.\nTip:Use renderTable() and tableOutput().\n\n\nGoalProblem\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-values",
    "href": "slides/Reactivity.html#reactive-values",
    "title": "Reactivity",
    "section": "",
    "text": "Reactive values exist in between sources (e.g. an input) and endpoints (e.g. an output).\nA reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies\n\nHave a look at our example from the exercise above, can you see how filter(data, track == input$song_selector) was called twice in each of the render functions?",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-tips",
    "href": "slides/Reactivity.html#reactive-tips",
    "title": "Reactivity",
    "section": "",
    "text": "If reactive_object &lt;- reactive({...}) then you can only access or use reactive_object downstream usingreact_obj() and not react_obj.\nthink of react_obj() as a function that returns the current value\nCommon cause of everyone’s my favorite R error:\n\n## Error: object of type 'closure' is not subsettable`\n\ninput$XXX reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.) otherwise you get this other common error:\n\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)\n\n\nCreate a reactive() intermediate data frame so that it doesn’t have to be loaded twice when creating the two outputs.\nInstead of this:\n\n\n\n\n\nWe will have this:\n\n\n\n\n\n\n\nProblemSolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor,viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n    # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#observe",
    "href": "slides/Reactivity.html#observe",
    "title": "Reactivity",
    "section": "",
    "text": "These are constructed in the same way as a reactive() however an observer does not return a value, rather they are used for their “side effects”.\n\nThe side effects can involve sending data to the client browser, e.g. updating a UI element\nBecause observe() is used for its side effects, you will never see XXX &lt;- observe() because observe() will never produce a value!\n\nSo key thing to remember: reactive() produces things, observe() does things.\nSome examples when you would use observe:\n\nlogging user actions\nupdating a drop down list, based on data that has been loaded\n\n\n\n\n\nWithout using observe()Using observe()\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n  observe({\n    sub_cat_vals &lt;- data %&gt;% filter(Letter == input$letter) %&gt;% select(Sub_category)\n    \n    updateSelectInput(\n      session = session, \n      inputId = \"sub\",\n      choices = sub_cat_vals,\n      selected = head(sub_cat_vals, 1)\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\nSo how can we use observe() in our previous example? Take a look at the code below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  selectInput(\"artist_selector\", \"Select an Artist:\", choices = unique(data$artist)),\n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    req(input$song_selector)\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  observe({\n    songs = data %&gt;% \n      filter(artist == input$artist_selector) %&gt;% \n      pull(track) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    updateSelectInput(\n      inputId = \"song_selector\", \n      choices = songs\n    )\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThis observe block monitors changes in the selected artist (input$artist_selector). When a change occurs, it filters, processes, and sorts the corresponding track names from the dataset. Then, it dynamically updates the choices available in a selectInput song selector widget based on the unique and sorted track names associated with the selected artist.\nSo TLDR: observe() continually monitors for changes in the reactive change and does the action prescribed (which in this case was updating another selector).\nBecause of observe() is always constantly monitoring for changes in the environment, and reactive() values only ever gets changed if an input is changed, reactive() is known to be ‘lazy’.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#quick-quiz",
    "href": "slides/Reactivity.html#quick-quiz",
    "title": "Reactivity",
    "section": "",
    "text": "Writing a CSV\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nQuerying a database\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nAdding two numbers\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which prints to the console\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nFetching the current temperature from an API\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which sorts a list in place\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactlog",
    "href": "slides/Reactivity.html#reactlog",
    "title": "Reactivity",
    "section": "",
    "text": "reactlog is a package that can help you understand the reactive chains in your app.\nYou can use it by running the following script:\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n\n# run a shiny app\nrunApp('app.R')\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#other-tips",
    "href": "slides/Reactivity.html#other-tips",
    "title": "Reactivity",
    "section": "",
    "text": "because reactivity does not determine when calculations happen, things can load at different times - i.e. the Shiny app might attempt to render tables and the UI before oauth and a DB connection is established resulting in some unsightly error messages.\nUse req() in your server functions to outline the values/objects required before the value is calculated. i.e. req(input$slider) means ‘don’t run the next bit of code unless there is a value in the slider input!’",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#gathering-requirements",
    "href": "slides/Reactivity.html#gathering-requirements",
    "title": "Reactivity",
    "section": "",
    "text": "Are the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#appropriate-graphics",
    "href": "slides/Reactivity.html#appropriate-graphics",
    "title": "Reactivity",
    "section": "",
    "text": "Multiple lines\nBar vs line\nUse of gradients",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#appropriate-widgets",
    "href": "slides/Reactivity.html#appropriate-widgets",
    "title": "Reactivity",
    "section": "",
    "text": "Checkbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/Reactivity.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Reactivity",
    "section": "",
    "text": "One to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#wireframing",
    "href": "slides/Reactivity.html#wireframing",
    "title": "Reactivity",
    "section": "",
    "text": "map what it looks like\nwhat interacts with what",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#wireframe-examples",
    "href": "slides/Reactivity.html#wireframe-examples",
    "title": "Reactivity",
    "section": "",
    "text": "::: {layout-nrow=2}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#an-exercise-for-the-brave",
    "href": "slides/Reactivity.html#an-exercise-for-the-brave",
    "title": "Reactivity",
    "section": "",
    "text": "Build a Shiny App using the Supermarket Sales data set available here.\nYou app must have the following:\nInputs:\n\nAbility to select branch\nAbility to select the location (options will show depending on the branch)\nAbility to select customer type\nFrom & to date\n\nOutputs:\n\nLine graph showing $ amount sold per day (remember to multiple quantity by price to get the amount)\nA simple bar graph showing different in dollar amount spent between men and women\nA table showing dollar amount spent by product type.\n\nDon’t worry too much about theming for now. But remember the foundations:\n\nwireframing\nreactive graphs (if it helps)\nreactive values so that you don’t repeat yourself\n\nReach out if you need tips/troubleshooting!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Widgets.html",
    "href": "slides/Widgets.html",
    "title": "Other cool things you can do with Shiny",
    "section": "",
    "text": "This comprehensive curated list of Awesome SHiny Extensions is a good source for cool widgets and extensions to take your Shiny app to the next level!\nTip: It is easy to get carried away with all the little fun things that Shiny has to offer! Remember to keep track of time for your project, and not allow them to distract you from the final product!\nBelow are a few highlights:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorks similarly to fluidPage() in another grid type format.\n\n\n\n\n\n\n\n\n\n\n\nGreat option for carousels!\n\n\n\n\n\n\n\n\nA library of nicer looking widgets than the native built in widgets you get with the shiny package. A full demo of the library is available here.\n\n\n\n\n\n\n\n\nCollapsible shiny panels.\n\n\n\n\n\n\n\n\nCool Bootstrap 3 component - may not be compatible with bs4dash - use at your own risk!\n \n\n\n\nAllows a button for you to access and browse files on the system.\n\n\n\n\n\n\n\n\n\n\n\nAllows you to input time in HH:MM:SS format\n\n\n\n\n\n\n\n\nHas nicer select options. You can use fontawesome icons!\n\n\n\n\n\n\n\n\n #### pivta\nGreat for self service analytics projects. Allows you to have a ‘pivot table’ functionality online.\n\n\n\n\n\n\n\n\n\n\n\nLots of cool icons to add to buttons, titles…anything!\n\n\n---\ntitle: \"Font Awesome in R Markdown\"\noutput: html_document\n---\n\n\n\n# Just a few tests with `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:forestgreen;overflow:visible;position:relative;\"&gt;&lt;path d=\"M48 56c0-13.3-10.7-24-24-24S0 42.7 0 56V456c0 13.3 10.7 24 24 24s24-10.7 24-24V124.2l12.5-2.4c16.7-3.2 31.5-8.5 44.2-13.1l0 0 0 0c3.7-1.3 7.1-2.6 10.4-3.7c15.2-5.2 30.4-9.1 51.2-9.1c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c32.4 0 53.7-6.8 90.5-19.6V342.9l-9.5 3.3c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-16.8 0-31 2-43.9 5c-12.9 3-20.9 16-17.9 28.9s16 20.9 28.9 17.9c9.6-2.2 20.1-3.7 32.9-3.7c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c34.4 0 56.4-7.7 97.8-22.2c7.5-2.6 15.5-5.4 24.4-8.5l16.2-5.5V360 72 38.4L416.2 49.3c-9.7 3.3-18.2 6.3-25.7 8.9c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-27.8 0-48.5 5.5-66.6 11.6c-4.9 1.7-9.3 3.3-13.6 4.8c-11.9 4.3-22 7.9-34.7 10.3L48 75.4V56z\"/&gt;&lt;/svg&gt;`{=html}\n\nIt works well in headings...\n\n# `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H1 Heading\n\n## `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H2 Heading\n\n### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H3 Heading\n\n#### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H4 Heading\n\n##### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H5 Heading\n\n...and works equally well within inline text: `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html}.\nThe code above produces this:\n\n\n\n\n\n\n\n\nMakes ggplot a breeze!\n \n\n\n\nFantastic interactive calendar widget.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Other cool things you can do with Shiny"
    ]
  },
  {
    "objectID": "slides/Widgets.html#awesome-shiny-extensions",
    "href": "slides/Widgets.html#awesome-shiny-extensions",
    "title": "Other cool things you can do with Shiny",
    "section": "",
    "text": "This comprehensive curated list of Awesome SHiny Extensions is a good source for cool widgets and extensions to take your Shiny app to the next level!\nTip: It is easy to get carried away with all the little fun things that Shiny has to offer! Remember to keep track of time for your project, and not allow them to distract you from the final product!\nBelow are a few highlights:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorks similarly to fluidPage() in another grid type format.\n\n\n\n\n\n\n\n\n\n\n\nGreat option for carousels!\n\n\n\n\n\n\n\n\nA library of nicer looking widgets than the native built in widgets you get with the shiny package. A full demo of the library is available here.\n\n\n\n\n\n\n\n\nCollapsible shiny panels.\n\n\n\n\n\n\n\n\nCool Bootstrap 3 component - may not be compatible with bs4dash - use at your own risk!\n \n\n\n\nAllows a button for you to access and browse files on the system.\n\n\n\n\n\n\n\n\n\n\n\nAllows you to input time in HH:MM:SS format\n\n\n\n\n\n\n\n\nHas nicer select options. You can use fontawesome icons!\n\n\n\n\n\n\n\n\n #### pivta\nGreat for self service analytics projects. Allows you to have a ‘pivot table’ functionality online.\n\n\n\n\n\n\n\n\n\n\n\nLots of cool icons to add to buttons, titles…anything!\n\n\n---\ntitle: \"Font Awesome in R Markdown\"\noutput: html_document\n---\n\n\n\n# Just a few tests with `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:forestgreen;overflow:visible;position:relative;\"&gt;&lt;path d=\"M48 56c0-13.3-10.7-24-24-24S0 42.7 0 56V456c0 13.3 10.7 24 24 24s24-10.7 24-24V124.2l12.5-2.4c16.7-3.2 31.5-8.5 44.2-13.1l0 0 0 0c3.7-1.3 7.1-2.6 10.4-3.7c15.2-5.2 30.4-9.1 51.2-9.1c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c32.4 0 53.7-6.8 90.5-19.6V342.9l-9.5 3.3c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-16.8 0-31 2-43.9 5c-12.9 3-20.9 16-17.9 28.9s16 20.9 28.9 17.9c9.6-2.2 20.1-3.7 32.9-3.7c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c34.4 0 56.4-7.7 97.8-22.2c7.5-2.6 15.5-5.4 24.4-8.5l16.2-5.5V360 72 38.4L416.2 49.3c-9.7 3.3-18.2 6.3-25.7 8.9c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-27.8 0-48.5 5.5-66.6 11.6c-4.9 1.7-9.3 3.3-13.6 4.8c-11.9 4.3-22 7.9-34.7 10.3L48 75.4V56z\"/&gt;&lt;/svg&gt;`{=html}\n\nIt works well in headings...\n\n# `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H1 Heading\n\n## `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H2 Heading\n\n### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H3 Heading\n\n#### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H4 Heading\n\n##### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H5 Heading\n\n...and works equally well within inline text: `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html}.\nThe code above produces this:\n\n\n\n\n\n\n\n\nMakes ggplot a breeze!\n \n\n\n\nFantastic interactive calendar widget.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Other cool things you can do with Shiny"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html",
    "href": "slides/FlexDashboard Framework.html",
    "title": "flexdashboard Framework",
    "section": "",
    "text": "flexdashboard is the easiest way to get started making dashboards - at its core it is an RMarkdown document template that leverages CSS flexbox (+ a lot more) to generate attractive full page layouts that are well suited for publishing multiple data visualizations and related summaries and text.\n\nDashboards are constructed using a RMarkdown document\nRow or column based layouts can be used\nStructure is specified via markdown headings\nInteractivity can be added by Shiny, but it is not required\nQuarto is not currently supported",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#flexdashboard",
    "href": "slides/FlexDashboard Framework.html#flexdashboard",
    "title": "flexdashboard Framework",
    "section": "",
    "text": "flexdashboard is the easiest way to get started making dashboards - at its core it is an RMarkdown document template that leverages CSS flexbox (+ a lot more) to generate attractive full page layouts that are well suited for publishing multiple data visualizations and related summaries and text.\n\nDashboards are constructed using a RMarkdown document\nRow or column based layouts can be used\nStructure is specified via markdown headings\nInteractivity can be added by Shiny, but it is not required\nQuarto is not currently supported",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---a-basic-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo---a-basic-flexdashboard",
    "title": "flexdashboard Framework",
    "section": "Demo - A basic flexdashboard",
    "text": "Demo - A basic flexdashboard\n\nthe output in the YAML heading will be flexdashboard\nin the example below, ------------------------ represents different rows\n\n---\ntitle: \"Demo\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n---\n\n```{r global}\n#| include: false\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_city = d |&gt;\n  filter(city %in% \"Chicago\")\n```\n\nRow {data-height=650}\n-------------------------------------\n\n### Temperature\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=temp)) +\n  geom_line()\n```\n\nRow {data-height=350}\n-------------------------------------\n   \n### Humidity\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=humidity)) +\n  geom_line()\n```   \n\n###\n\n```{r}\nd_city |&gt;\n  mutate(\n    day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n    date = as.character(lubridate::date(time))\n  ) |&gt;\n  group_by(date, day) |&gt;\n  summarize(\n    `min` = min(temp),\n    `max` = max(temp),\n    .groups = \"drop\"\n  ) |&gt;\n  knitr::kable()\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn",
    "href": "slides/FlexDashboard Framework.html#your-turn",
    "title": "flexdashboard Framework",
    "section": "Your turn",
    "text": "Your turn\nCopy the code above, and try knitting it (remember to change line 13 to update where you have saved the data to!)\nCheck that you are able to successfully render the flexdashboard.\nIf everything is working try modifying the code:\n\nWhat happens if you remove orientation: rows from the front matter?\nWhat happens if you change the Row text?\nWhat happens if you change or remove {data-height=*}?",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#default",
    "href": "slides/FlexDashboard Framework.html#default",
    "title": "flexdashboard Framework",
    "section": "Default",
    "text": "Default\n\n\n---\ntitle: \"Default layout\"\noutput: flexdashboard::flex_dashboard\n---\n\n### Chart 1\n\n```{r}\n\n```\n\n### Chart 2\n\n```{r}\n\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#column-layout",
    "href": "slides/FlexDashboard Framework.html#column-layout",
    "title": "flexdashboard Framework",
    "section": "Column layout",
    "text": "Column layout\n\n\n---\ntitle: \"Column layout\"\noutput: flexdashboard::flex_dashboard\n---\n    \nColumn\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#row-layout",
    "href": "slides/FlexDashboard Framework.html#row-layout",
    "title": "flexdashboard Framework",
    "section": "Row layout",
    "text": "Row layout\n\n\n---\ntitle: \"Row layout\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n---\n    \nRow\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n \n### Chart 2\n    \n```{r}\n``` \n\nRow\n-------------------------------------\n    \n### Chart 3\n    \n```{r}\n```\n    \n### Chart 4\n\n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#sidebar-layout",
    "href": "slides/FlexDashboard Framework.html#sidebar-layout",
    "title": "flexdashboard Framework",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n\n\n---\ntitle: \"Sidebar layout\"\noutput: flexdashboard::flex_dashboard\n---\n\nInputs {.sidebar}\n-------------------------------------\n\n```{r}\n```\n \nColumn\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n    \n### Chart 2\n\n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#tabset-layout",
    "href": "slides/FlexDashboard Framework.html#tabset-layout",
    "title": "flexdashboard Framework",
    "section": "Tabset layout",
    "text": "Tabset layout\n\n\n---\ntitle: \"Tabset layout\"\noutput: flexdashboard::flex_dashboard\n---\n    \nColumn \n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn {.tabset}\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#multipage-layout",
    "href": "slides/FlexDashboard Framework.html#multipage-layout",
    "title": "flexdashboard Framework",
    "section": "Multipage layout",
    "text": "Multipage layout\n---\ntitle: \"Multipage layout\"\noutput: flexdashboard::flex_dashboard\n---\n\nPage 1\n=====================================  \n    \nColumn {data-width=600}\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn {data-width=400}\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```\n\nPage 2 {data-orientation=rows}\n=====================================     \n   \nRow {data-height=600}\n-------------------------------------\n\n### Chart 4\n\n```{r}\n```\n\nRow {data-height=400}\n-------------------------------------\n   \n### Chart 5\n\n```{r}\n```   \n    \n### Chart 6\n\n```{r}\n```\n\n\nhttps://pkgs.rstudio.com/flexdashboard/articles/examples.html | CRAN Downloads",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#storyboard-layout",
    "href": "slides/FlexDashboard Framework.html#storyboard-layout",
    "title": "flexdashboard Framework",
    "section": "Storyboard layout",
    "text": "Storyboard layout\n---\ntitle: \"Storyboard layout\"\noutput: \n  flexdashboard::flex_dashboard:\n    storyboard: true\n---\n\n### Frame 1\n\n```{r}\n```\n\n*** \n\nSome commentary about Frame 1.\n\n### Frame 2 {data-commentary-width=400}\n\n```{r}\n```\n\n*** \n\nSome commentary about Frame 2.\n\n\nhttps://pkgs.rstudio.com/flexdashboard/articles/examples.html | htmlwidgets showcase",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#markdown-to-layout",
    "href": "slides/FlexDashboard Framework.html#markdown-to-layout",
    "title": "flexdashboard Framework",
    "section": "Markdown to layout",
    "text": "Markdown to layout\nFrom the preceding examples it is relatively straightforward to see how markdown is translated into the flexdashboard’s layout,\n\n\n\n\n\n\n\n\n\nHeading\nPurpose\n\n\n\n\nLevel 1\n# or =======\nPages\n\n\nLevel 2\n## or ------\nColumns or rows1\n\n\nLevel 3\n###\nChart or output elements2\n\n\nHorizontal Rules\n***, ---, or ___\nSeparate chart from commentary3",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#heading-options",
    "href": "slides/FlexDashboard Framework.html#heading-options",
    "title": "flexdashboard Framework",
    "section": "Heading options",
    "text": "Heading options\nYou may have noticed certain headings were given additional attributes via arguments wrapped in {}. These are CSS attributes that modify the display behavior of the elements they are attached to. Some common attribues,\n\ndata-height and data-width control the relative size of elements\ndata-padding or .no-padding control the padding around elements in pixels\ndata-orientation can be applied to pages to alter the orientation for a specific page\n.tabset indicates a column or row should be composed on tabset elements\n.sidebar indicates a sidebar should be included (local or global)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#some-useful-document-options",
    "href": "slides/FlexDashboard Framework.html#some-useful-document-options",
    "title": "flexdashboard Framework",
    "section": "Some useful document options",
    "text": "Some useful document options\nIn the previous layout examples we saw the used some document options in the front matter, a couple of commonly used options that are worth knowning about:\n\norientation - default is columns, determines element layout orientation\nvertical_layout - default is fill but scroll can be used to extend the viewable area\nself_contained - default is TRUE, embeds all assessts within the html document (e.g. scripts, stylesheets, images, and videos)\ntheme - specifies a theme to use for styling (more on this later)\nnavbar - constructs a navigation bar at the top of the screen",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn-1",
    "href": "slides/FlexDashboard Framework.html#your-turn-1",
    "title": "flexdashboard Framework",
    "section": "Your turn",
    "text": "Your turn\nWe’ve just seen a number of possible layout methods for a flexdashboard, lets return to the code we’ve seen previously, and try changing layout more purposefully this time (e.g. a column, multipage, or storyboard layout).\nUse this time to experiment with the different layout options and see what seems to work best.\n\nTry out a multipage or storyboard layout\nTry making a reasonable looking column layout",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#shiny",
    "href": "slides/FlexDashboard Framework.html#shiny",
    "title": "flexdashboard Framework",
    "section": "Shiny",
    "text": "Shiny\nWe can use Shiny components and reactivity in a flexdashboard (or any html output based RMarkdown document) by including runtime: shiny in the front matter.\nThis results in the document being served by shiny (which has implications for sharing and publishing)\n\n\nFor flexdashboard’s using shiny you will often see a special global chunk which is responsible for loading data. This is a special feature of runtime: shiny designed to improve startup performance for multi-user shiny documents.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---shiny-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo---shiny-flexdashboard",
    "title": "flexdashboard Framework",
    "section": "Demo - shiny + flexdashboard",
    "text": "Demo - shiny + flexdashboard\n\n\n\n---\ntitle: \"Demo\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\n\nInputs {.sidebar}\n-------------------------------------\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nselectInput(\n  \"var\", \"Select a variable\",\n  choices = d_vars, selected = \"humidity\"\n)\n```\n\n\nCol\n-------------------------------------\n\n### Temperature\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    ggtitle(input$city) + \n    geom_line()\n})\n```\n\nCol\n-------------------------------------\n   \n### Other\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=.data[[input$var]])) +\n    geom_line()\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#components",
    "href": "slides/FlexDashboard Framework.html#components",
    "title": "flexdashboard Framework",
    "section": "Components",
    "text": "Components\nflexdashboard provides two built-in html components that can be included in your dashboard:\n\nValue boxes:\n\n\n\n\n\nGauges:",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#implementation",
    "href": "slides/FlexDashboard Framework.html#implementation",
    "title": "flexdashboard Framework",
    "section": "Implementation",
    "text": "Implementation\nEither component can be included in the dashboard with a static value via directly calling valueBox() or gauge()\n\nShiny reactive variants can be implemented using valueBoxOutput() with renderValueBox() or gaugeOutput() with renderGauge()\nBoth components take a color argument, this can be either\n\nOne of the standard bootstrap theme color names (i.e. “success”, “warning”, “danger”, “primary”, or “info”)\nor any other valid CSS color specifier\n\nValue box icons should use names from Font Awesome, Ionicons, or Bootstrap Glyphicons",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---components",
    "href": "slides/FlexDashboard Framework.html#demo---components",
    "title": "flexdashboard Framework",
    "section": "Demo - Components",
    "text": "Demo - Components\n\n\n\n---\ntitle: \"Demo - value boxes and gauges\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    geom_line()\n}, height = 600)\n```\n\nCol {data-width=200}\n-------------------------------------\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_city()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```\n\n\n\n−+\n08:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#linked-brushing",
    "href": "slides/FlexDashboard Framework.html#linked-brushing",
    "title": "flexdashboard Framework",
    "section": "Linked brushing",
    "text": "Linked brushing\nThis has nothing in particular to do with flexdashboard but is a super useful Shiny technique for improving interactivity.\nShiny’s plotOutput()s can also be used to generate inputs based on user click events. Here we are using the brush rectangular selection to subset the data and then updating the relevant components.\n\n\nFor more technical details on how all of this works see Chapter 7 of Mastering Shiny.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#linked-brushing-1",
    "href": "slides/FlexDashboard Framework.html#linked-brushing-1",
    "title": "flexdashboard Framework",
    "section": "Linked brushing",
    "text": "Linked brushing\n---\ntitle: \"Linked brushing\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n\nd_selected = reactive({\n  db = shiny::brushedPoints(d_city(), input$plot_brush)\n  if (nrow(db) == 0)\n    db = d_city()\n  db\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot(\n  {\n    d_city() |&gt;\n      ggplot(aes(x=time, y=temp)) +\n      geom_line()\n  },\n  outputArgs = list(\n    brush = shiny::brushOpts(id = \"plot_brush\")\n  ),\n  height = 600\n)\n```\n\nCol {data-width=200}\n-------------------------------------\n   \n   \n### Starting time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    min(d_selected()$time),\n    caption = \"Starting time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Ending time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    max(d_selected()$time),\n    caption = \"Ending time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_selected()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#footnotes",
    "href": "slides/FlexDashboard Framework.html#footnotes",
    "title": "flexdashboard Framework",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWhen using ========== or ---------- the text on the preceeding line is required but the actual text does not matter. For # or ## a text label is not required.↩︎\nDepending on the orientation option↩︎\nIn a storyboard layout↩︎",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "",
    "text": "Take a look at the script below:\n&lt;div class=\"header\" checked&gt;\n &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n Thank you\n&lt;/div&gt; \nThis is a very basic chunk of HTML code. HTML (Hypertext Markup Language) uses tags to structure content on web pages. Tags are enclosed in angle brackets &lt; &gt; and typically come in pairs: an opening tag and a closing tag.\nHere are some of the most common and basic HTML tags:\n&lt;html&gt;: This tag wraps the entire HTML document and signifies the start of the HTML code.\n&lt;head&gt;: This tag contains meta-information about the document, such as its title, character encoding, and links to external resources like stylesheets and scripts.\n&lt;title&gt;: This tag specifies the title of the HTML document, which appears in the browser’s title bar or tab.\n&lt;body&gt;: This tag contains the main content of the HTML document, including text, images, videos, and other elements.\n&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;: These tags create headings of different levels, where &lt;h1&gt; is the most important (usually the largest and boldest) and &lt;h6&gt; is the least important (usually the smallest).\n&lt;p&gt;: This tag defines a paragraph of text.\n&lt;a&gt;:This tag creates hyperlinks, allowing you to link to other web pages or resources. It is often used with the href attribute to specify the URL of the link.\n&lt;img&gt;:This tag embeds images in the document. It requires the src attribute to specify the URL of the image file.\n&lt;ul&gt; and &lt;ol&gt;: These tags create unordered and ordered lists, respectively. &lt;ul&gt; is for bullet-point lists, while &lt;ol&gt; is for numbered lists. List items are defined using the &lt;li&gt;tag within these list containers.\n&lt;br&gt;: This tag inserts a line break within the text.\n&lt;hr&gt;: This tag creates a horizontal line, typically used to separate content sections.\n&lt;div&gt; and &lt;span&gt;: These tags are generic containers used for grouping and styling content.\n\nis a block-level element, and  is an inline element.\n&lt;table&gt;: This tag creates a table for organizing data. Tables consist of rows (\n\n) and cells (\n\nfor regular cells,\n\nfor header cells).\nYou can use HTML directly in RMarkdown:\nExample:\nThis code below creates the chunk of text below:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\nMy first paragraph.\n\n\n\n\n\nGather Ingredients\n\n\nSpread condiments on bread\n\n\nAdd desired fillings\n\n\nPlace second slice of bread on top\n\n\nCut the sandwich in half",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#html",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#html",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "",
    "text": "Take a look at the script below:\n&lt;div class=\"header\" checked&gt;\n &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n Thank you\n&lt;/div&gt; \nThis is a very basic chunk of HTML code. HTML (Hypertext Markup Language) uses tags to structure content on web pages. Tags are enclosed in angle brackets &lt; &gt; and typically come in pairs: an opening tag and a closing tag.\nHere are some of the most common and basic HTML tags:\n&lt;html&gt;: This tag wraps the entire HTML document and signifies the start of the HTML code.\n&lt;head&gt;: This tag contains meta-information about the document, such as its title, character encoding, and links to external resources like stylesheets and scripts.\n&lt;title&gt;: This tag specifies the title of the HTML document, which appears in the browser’s title bar or tab.\n&lt;body&gt;: This tag contains the main content of the HTML document, including text, images, videos, and other elements.\n&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;: These tags create headings of different levels, where &lt;h1&gt; is the most important (usually the largest and boldest) and &lt;h6&gt; is the least important (usually the smallest).\n&lt;p&gt;: This tag defines a paragraph of text.\n&lt;a&gt;:This tag creates hyperlinks, allowing you to link to other web pages or resources. It is often used with the href attribute to specify the URL of the link.\n&lt;img&gt;:This tag embeds images in the document. It requires the src attribute to specify the URL of the image file.\n&lt;ul&gt; and &lt;ol&gt;: These tags create unordered and ordered lists, respectively. &lt;ul&gt; is for bullet-point lists, while &lt;ol&gt; is for numbered lists. List items are defined using the &lt;li&gt;tag within these list containers.\n&lt;br&gt;: This tag inserts a line break within the text.\n&lt;hr&gt;: This tag creates a horizontal line, typically used to separate content sections.\n&lt;div&gt; and &lt;span&gt;: These tags are generic containers used for grouping and styling content.\n\nis a block-level element, and  is an inline element.\n&lt;table&gt;: This tag creates a table for organizing data. Tables consist of rows (\n\n) and cells (\n\nfor regular cells,\n\nfor header cells).\nYou can use HTML directly in RMarkdown:\nExample:\nThis code below creates the chunk of text below:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\nMy first paragraph.\n\n\n\n\n\nGather Ingredients\n\n\nSpread condiments on bread\n\n\nAdd desired fillings\n\n\nPlace second slice of bread on top\n\n\nCut the sandwich in half",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#css",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#css",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "CSS",
    "text": "CSS\nSo what is CSS?\nCSS, which stands for Cascading Style Sheets, is a styling language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG or XHTML).\nCSS allows you to specify how HTML elements should appear on the screen or in other media. This includes properties such as color, size, font, spacing, and positioning and enables the separation of content (HTML) from presentation (styling). This separation makes it easier to manage and update the appearance of a website or document without needing to alter the underlying content.\nTake a look at the example below:\n/* Selecting all paragraphs */\np {\n   /* Declaration Block */\n   color: blue; /* Setting text color to blue */\n   font-size: 16px; /* Setting font size to 16 pixels */\n   margin-top: 20px; /* Setting top margin to 20 pixels */\n}\nIn this example, p is the selector targeting all &lt;p&gt; elements in the HTML document. The declaration block inside the curly braces contains three declarations setting the text color, font size, and top margin for those paragraphs.\n&lt;div&gt;\nIn the example below:\nThe HTML code creates a webpage with a &lt;div&gt; element having a class attribute set to “container”. Inside this &lt;div&gt;, there are two paragraphs.\nThe CSS code (in a separate file named styles.css linked to the HTML document) applies styles specifically to the elements with the class “container”. It sets the background color to light blue, adds padding, and creates a border around the container.\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;HTML and CSS Example&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;p&gt;This is a paragraph inside a div with class \"container\".&lt;/p&gt;\n    &lt;p&gt;This is another paragraph.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n/* CSS for the class \"container\" */\n.container {\n    background-color: lightblue; /* Setting background color to light blue */\n    padding: 20px; /* Adding padding of 20 pixels */\n    border: 1px solid darkblue; /* Adding a border with 1 pixel width and dark blue color */\n}",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-for-use-in-shiny",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-for-use-in-shiny",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Translating HTML for use in Shiny",
    "text": "Translating HTML for use in Shiny\nYou don’t need to know HTML to use Shiny - but it is useful to know in order to customise your apps. The UI calls R functions that output HTML code. Shiny turns this code into a web app. For example, in the script below, the Shiny script actually outputs the commented HTML script at the end:\nFrom: Customize your UI with HTML\nfluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n## &lt;div class=\"container-fluid\"&gt;\n##   &lt;h2&gt;Hello Shiny!&lt;/h2&gt;\n##   &lt;div class=\"row\"&gt;\n##     &lt;div class=\"col-sm-4\"&gt;\n##       &lt;form class=\"well\"&gt;\n##         &lt;div class=\"form-group shiny-input-container\"&gt;\n##           &lt;label class=\"control-label\" for=\"bins\"&gt;Number of bins:&lt;/label&gt;\n##           &lt;input class=\"js-range-slider\" id=\"bins\" data-min=\"1\" data-max=\"50\" data-from=\"30\" ## data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.8\" data-grid-snap=\"false\" ## data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" ## data-keyboard-step=\"2.04081632653061\" data-data-type=\"number\"/&gt;\n##         &lt;/div&gt;\n##       &lt;/form&gt;\n##     &lt;/div&gt;\n##     &lt;div class=\"col-sm-8\"&gt;\n##       &lt;div id=\"distPlot\" class=\"shiny-plot-output\" style=\"width: 100% ; height: 400px\"&gt;&lt;/div&gt;\n##     &lt;/div&gt;\n##   &lt;/div&gt;\n## &lt;/div&gt; \nFirst, let’s look at the syntax again, used to create the HTML example above:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n###There are a couple of ways to use that code in a Shiny app:\nBoth ways below result in the following UI:\n\n\n\n\n\n\n1. Translate the HTML code into R code:\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tags$h1(\"My First Heading\"),\n  tags$p(\"My first paragraph.\"),\n  \n  tags$h2(\"This is what a second heading looks like\"),\n  \n  tags$h2(\"Steps to Make a Sandwich\"),\n  tags$ol(\n    tags$li(\"Gather Ingredients\"),\n    tags$li(\"Spread condiments on bread\"),\n    tags$li(\"Add desired fillings\"),\n    tags$li(\"Place second slice of bread on top\"),\n    tags$li(\"Cut the sandwich in half\")\n  )\n)\n\nserver &lt;- function(input, output) {\n  # Server logic goes here\n}\n\nshinyApp(ui, server)\nIt is recommended to use the second method, be is it more flexible and allows for widgets and other things to be dispersed among the HTML code.\ntags shiny::tags is a list of 110 functions. Each function builds a specific HTML tag. You can learn what the most common tags do in the Shiny HTML tags glossary.\n\nlibrary(shiny)\n\nnames(tags)\n\n  [1] \"a\"                   \"abbr\"                \"address\"            \n  [4] \"animate\"             \"animateMotion\"       \"animateTransform\"   \n  [7] \"area\"                \"article\"             \"aside\"              \n [10] \"audio\"               \"b\"                   \"base\"               \n [13] \"bdi\"                 \"bdo\"                 \"blockquote\"         \n [16] \"body\"                \"br\"                  \"button\"             \n [19] \"canvas\"              \"caption\"             \"circle\"             \n [22] \"cite\"                \"clipPath\"            \"code\"               \n [25] \"col\"                 \"colgroup\"            \"color-profile\"      \n [28] \"command\"             \"data\"                \"datalist\"           \n [31] \"dd\"                  \"defs\"                \"del\"                \n [34] \"desc\"                \"details\"             \"dfn\"                \n [37] \"dialog\"              \"discard\"             \"div\"                \n [40] \"dl\"                  \"dt\"                  \"ellipse\"            \n [43] \"em\"                  \"embed\"               \"eventsource\"        \n [46] \"feBlend\"             \"feColorMatrix\"       \"feComponentTransfer\"\n [49] \"feComposite\"         \"feConvolveMatrix\"    \"feDiffuseLighting\"  \n [52] \"feDisplacementMap\"   \"feDistantLight\"      \"feDropShadow\"       \n [55] \"feFlood\"             \"feFuncA\"             \"feFuncB\"            \n [58] \"feFuncG\"             \"feFuncR\"             \"feGaussianBlur\"     \n [61] \"feImage\"             \"feMerge\"             \"feMergeNode\"        \n [64] \"feMorphology\"        \"feOffset\"            \"fePointLight\"       \n [67] \"feSpecularLighting\"  \"feSpotLight\"         \"feTile\"             \n [70] \"feTurbulence\"        \"fieldset\"            \"figcaption\"         \n [73] \"figure\"              \"filter\"              \"footer\"             \n [76] \"foreignObject\"       \"form\"                \"g\"                  \n [79] \"h1\"                  \"h2\"                  \"h3\"                 \n [82] \"h4\"                  \"h5\"                  \"h6\"                 \n [85] \"hatch\"               \"hatchpath\"           \"head\"               \n [88] \"header\"              \"hgroup\"              \"hr\"                 \n [91] \"html\"                \"i\"                   \"iframe\"             \n [94] \"image\"               \"img\"                 \"input\"              \n [97] \"ins\"                 \"kbd\"                 \"keygen\"             \n[100] \"label\"               \"legend\"              \"li\"                 \n[103] \"line\"                \"linearGradient\"      \"link\"               \n[106] \"main\"                \"map\"                 \"mark\"               \n[109] \"marker\"              \"mask\"                \"menu\"               \n[112] \"meta\"                \"metadata\"            \"meter\"              \n[115] \"mpath\"               \"nav\"                 \"noscript\"           \n[118] \"object\"              \"ol\"                  \"optgroup\"           \n[121] \"option\"              \"output\"              \"p\"                  \n[124] \"param\"               \"path\"                \"pattern\"            \n[127] \"picture\"             \"polygon\"             \"polyline\"           \n[130] \"pre\"                 \"progress\"            \"q\"                  \n[133] \"radialGradient\"      \"rb\"                  \"rect\"               \n[136] \"rp\"                  \"rt\"                  \"rtc\"                \n[139] \"ruby\"                \"s\"                   \"samp\"               \n[142] \"script\"              \"section\"             \"select\"             \n[145] \"set\"                 \"slot\"                \"small\"              \n[148] \"solidcolor\"          \"source\"              \"span\"               \n[151] \"stop\"                \"strong\"              \"style\"              \n[154] \"sub\"                 \"summary\"             \"sup\"                \n[157] \"svg\"                 \"switch\"              \"symbol\"             \n[160] \"table\"               \"tbody\"               \"td\"                 \n[163] \"template\"            \"text\"                \"textarea\"           \n[166] \"textPath\"            \"tfoot\"               \"th\"                 \n[169] \"thead\"               \"time\"                \"title\"              \n[172] \"tr\"                  \"track\"               \"tspan\"              \n[175] \"u\"                   \"ul\"                  \"use\"                \n[178] \"var\"                 \"video\"               \"view\"               \n[181] \"wbr\"                \n\n\nExample:\nTo HTML div tag equvalent is below:\ntags$div()\n## &lt;div&gt;&lt;/div&gt; \nClass attributes\nTo add a class attribute to the div header, you would do the below:\ntags$div(class = \"header\")\n## &lt;div class=\"header\"&gt;&lt;/div&gt;\nChildren\nEach tag function will add unnamed arguments to your tag as HTML children. This addition lets you nest tags inside of each other (just as in HTML).\ntags$div(class = \"header\", checked = NA,\n  tags$p(\"Ready to take the Shiny tutorial? If so\"),\n  tags$a(href = \"shiny.posit.co/tutorial\", \"Click Here!\")\n)\n## &lt;div class=\"header\" checked&gt;\n##   &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n##   &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n## &lt;/div&gt; \n\n\n2. You can also wrap all of your HTML code into a HTML() function\nYou cannot put raw HTML directly into a tag or UI object (like in the example below). Shiny will treat raw HTML as a character string, adding HTML as text to your UI document.\ntags$div(\n  \"&lt;strong&gt;Raw HTML!&lt;/strong&gt;\"\n)\n## &lt;div&gt;&lt;strong&gt;Raw HTML!&lt;/strong&gt;&lt;/div&gt; \nTo add raw HTML, use the HTML function. HTML takes a character string and returns it as HTML (a special class of object in Shiny).\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  \n  HTML('\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;')\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nShiny will assume that the code you pass to HTML is correctly written HTML. Be sure to double check it.\n\n\n\n\n\n\nWarning\n\n\n\nIt is a bad idea to pass an input object to HTML:\ntags$div(\n  HTML(input$text)\n)\nThis allows the user to add their own HTML to your app, which creates a security vulnerability. What you user enters could be added to the web document or seen by other users, which might break the app. In the worse case scenario, a user may try to deploy malicious Cross Site Scripting (XSS), an undesirable security vulnerability.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#incorporating-css-into-shiny",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#incorporating-css-into-shiny",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Incorporating CSS into Shiny",
    "text": "Incorporating CSS into Shiny\nFrom: Using custom CSS in your app\n\nGetting our CSS into the app\nSo how do we go about getting the above CSS into our Shiny app? Inline or file based.\n\n1. Inline:\nThe way to do this in Shiny is using the head and styles tags:\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  tags$head(\n    # Note the wrapping of the string in HTML()\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      body {\n        background-color: black;\n        color: white;\n      }\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\n      .shiny-input-container {\n        color: #474747;\n      }\"))\n  ),\n  titlePanel(\"Old Faithful Geyser Data\"),\n  ...\n)\nInlining CSS within the main app script offers the advantage of convenience, as developers can quickly access and modify styles without navigating between multiple files. This approach reduces the time spent switching between files and eliminates the need for creating and linking external CSS files, simplifying the development process. However, drawbacks arise when the CSS code grows significantly, leading to a cluttered and unwieldy UI function within the app script.Therefore, inlining is most suitable during initial development stages when the CSS is concise, but as the codebase expands, transitioning to a file-based workflow becomes necessary for better organization and maintainability.\n\n\nFile based\nYou can keep your css script in a separate file in the www/ folder.\nA note about www/\nOne thing you may notice is that we placed our CSS file in the sub folder www/, but we only specified the CSS file’s name (dark_mode.css) in our href or “hyperlink reference” argument. The www/ folder is a special one for Shiny. Resources your app may link to, such as images—or in this case, scripts—are placed in the www/ folder. Shiny then knows to make these files available for access from the web browser. If we had placed dark_mode.css at the same file hierarchy next as app.R, Shiny would not know that it needs to host it, and your app would tell the browser to look for a file that was not available to\nIn www/style.css\n/* Get a fancy font from Google Fonts */\n@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n\nbody {\n  background-color: black;\n  color: white; /* text color */\n}\n\n/* Change header text to imported font */\nh2 {\n  font-family: 'Yusei Magic', sans-serif;\n}\n\n/* Make text visible on inputs */\n.shiny-input-container {\n  color: #474747;\n}\napp.R\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")\n  )\n  ...\n)\ntags$link: This is an HTML tag used to link external resources such as stylesheets (CSS files) or other documents. It’s typically used within the &lt;head&gt; section of an HTML document. In this case, it’s being used to link a CSS stylesheet.\nrel = \"stylesheet\": This is an attribute of the &lt;link&gt; tag. It specifies the relationship between the current document and the linked resource. In this case, it indicates that the linked resource is a stylesheet.\ntype = \"text/css\": Another attribute of the &lt;link&gt; tag. It specifies the MIME type of the linked resource. “text/css” indicates that the linked resource is a CSS file.\nhref = \"style.css“: Yet another attribute of the &lt;link&gt; tag. It specifies the URL of the linked resource. In this case,”style.css” is the URL of the CSS file that will be used to style the content of the Shiny app.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#other-ways-of-using-css",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#other-ways-of-using-css",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Other ways of using css:",
    "text": "Other ways of using css:\n\ntheme = \"styles.css\"\nYou can pass a CSS file directly to your app using the theme argument in your UI function, much the same as the tags$link() method. However, it’s not recommended anymore because the theme argument is now commonly used by the bslib package to pass in custom bootstrap theming options. (bslib also provides its own functionality for adding additional CSS to a given bootstrap theme with the function bslib::bs_add_rules().)\n\n\nincludeCSS()\nThe function includeCSS() is an amalgamation of inline and file-based CSS. It takes as its argument a file path—this time not necessarily in the www/ folder—and pastes that file’s contents directly into the HTML of your app instead of using a file link. This means:\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  includeCSS(\"www/dark_mode.css\"),\n  titlePanel(\"Old Faithful Geyser Data\"),\n  ...\n)\nmakes Shiny build the same HTML as doing\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      body {\n        background-color: black;\n        color: white;\n      }\n      /* Change font of header text */\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\n      /* Make text visible on inputs */\n      .shiny-input-container {\n        color: #474747;\n      }\"))\n  ),\n  titlePanel(\"Old Faithful Geyser Data\"),\n    ...\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#editing-css-in-your-browser",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#editing-css-in-your-browser",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Editing CSS in your browser:",
    "text": "Editing CSS in your browser:\n\nDemo:\nRun the code and make some changes in the browser:\n\nui &lt;- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\nMore advanced techniques can be found here",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html",
    "href": "slides/ShinyDashboard Framework.html",
    "title": "ShinyDashboard Framework",
    "section": "",
    "text": "is a package that enables the easy generation of bootstrap based dynamic Shiny dashboards.\nThe core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#shinydashboard",
    "href": "slides/ShinyDashboard Framework.html#shinydashboard",
    "title": "ShinyDashboard Framework",
    "section": "",
    "text": "is a package that enables the easy generation of bootstrap based dynamic Shiny dashboards.\nThe core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#bootstrap",
    "href": "slides/ShinyDashboard Framework.html#bootstrap",
    "title": "ShinyDashboard Framework",
    "section": "Bootstrap",
    "text": "Bootstrap\n\ncollection of HTML conventions, CSS styles, and JS snippets bundled up into a convenient form.\nframework originally developed for Twitter and over the last 10 years has grown to become one of the most popular CSS frameworks used on the web.\nBasic themes available here.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-basics",
    "href": "slides/ShinyDashboard Framework.html#dashboard-basics",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard basics",
    "text": "Dashboard basics\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(),\n    dashboardBody()\n  ),\n  server = function(input, output, session) {\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-header",
    "href": "slides/ShinyDashboard Framework.html#dashboard-header",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard header",
    "text": "Dashboard header\nThis is a container for the title and any dropdownMenu()s\n\nthe latter are somewhat limited, support “messages”, “notifications”, “tasks” types\nDynamic menus can be generated using dropdownMenuOutput() and renderMenu() in the ui and server respectively.\n\n\n\nMessages:\n\n\n\nNotifications:\n\n\n\nTasks:",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-sidebar",
    "href": "slides/ShinyDashboard Framework.html#dashboard-sidebar",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard sidebar",
    "text": "Dashboard sidebar\nThis functions in the same way as the sidebarPanel() in sidebarLayout(), allowing for the inclusion of inputs and any other html content.\nAlternatively, it can also function as a tabPanel() like menu.\n\ninstead of tabsetPanel() we use sidebarMenu(),\ntext and icons are assigned using menuItem()\nthe panels being activated are contained in the body and not the sidebar\n\ntheir UI code goes under dashboardBody() using tabItems() and tabItem().\nmenuItem()s are connected to tabItems() via matching the tabName arguments.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo---sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo---sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo - sidebarMenu()",
    "text": "Demo - sidebarMenu()\n\nUse the provided weather.csv file and run the following script:\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenu(\n        menuItem(\n          \"Temperature\", \n          tabName = \"temp\", \n          icon = icon(\"thermometer-half\")\n        ),\n        menuItem(\n          \"Other\", \n          tabName = \"other\"\n        )\n      )\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo---dynamic-sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo---dynamic-sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo - Dynamic sidebarMenu()",
    "text": "Demo - Dynamic sidebarMenu()\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenuOutput(\"menu\")\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$menu = renderMenu(\n      sidebarMenu(\n        menuItem(\"Temperature\", tabName = \"temp\", icon = icon(\"thermometer-half\")),\n        menuItem(input$var, tabName = \"other\")\n      )\n    )\n    \n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#body-building-blocks",
    "href": "slides/ShinyDashboard Framework.html#body-building-blocks",
    "title": "ShinyDashboard Framework",
    "section": "Body building blocks",
    "text": "Body building blocks\n\n\n\nbox()\n \n\n\n\ninfoBox()\n\n\n\n\n\n\n\n\nvalueBox()",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#colors",
    "href": "slides/ShinyDashboard Framework.html#colors",
    "title": "ShinyDashboard Framework",
    "section": "Colors",
    "text": "Colors\nThe color of the various boxes is specified via status or background for box() or color for the others.\nAvailable options include,\n\nshinydashboard:::validStatuses\n\n[1] \"primary\" \"success\" \"info\"    \"warning\" \"danger\" \n\n\n\n\nshinydashboard:::validColors\n\n [1] \"red\"        \"yellow\"     \"aqua\"       \"blue\"       \"light-blue\"\n [6] \"green\"      \"navy\"       \"teal\"       \"olive\"      \"lime\"      \n[11] \"orange\"     \"fuchsia\"    \"purple\"     \"maroon\"     \"black\"",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#body-layout",
    "href": "slides/ShinyDashboard Framework.html#body-layout",
    "title": "ShinyDashboard Framework",
    "section": "Body layout",
    "text": "Body layout\n\nThe layout of box elements on a dashboard is controlled by combining fluidRow() and column() (as is standard with regular shiny apps)\n\nthis layout is based on a page having width of 12 units\ncolumn() and box() elements take a width argument using these units\n\n\n\n\nRow-based layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    box(title = \"Box title\", ...),\n    box(...)\n  ),\n\n  fluidRow(\n    box(title = \"Title 1\", ...),\n    box(title = \"Title 2\", ...),\n    box(title = \"Title 3\", ...)\n  ),\n\n  fluidRow(\n    box(...),\n    box(title = \"Title 5\", ...),\n    box(title = \"Title 6\", ...)\n  )\n)\n\n\n\n\nColumn-based layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    column(width = 4,\n      box(title = \"Box title\", ...),\n      box(title = \"Title 1\", ...),\n      box(...)\n    ),\n    column(width = 4,\n      box(...),\n      box(title = \"Title 3\", ...),\n      box(title = \"Title 5\", ...)\n    ),\n    column(width = 4,\n      box(title = \"Title 2\", ...),\n      box(title = \"Title 6\", ...)\n    )\n  )\n)\n\n\n\n\nMixed layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    box(title = \"Box title\", ...),\n    box(...)\n  ),\n  fluidRow(\n    column(width = 4,\n      box(title = \"Title 1\", ...),\n      box(...)\n    ),\n    column(width = 4,\n      box(title = \"Title 3\", ...),\n      box(title = \"Title 5\", ...)\n    ),\n    column(width = 4,\n      box(title = \"Title 2\", ...),\n      box(title = \"Title 6\", ...)\n    )\n  )\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#bs4dash",
    "href": "slides/ShinyDashboard Framework.html#bs4dash",
    "title": "ShinyDashboard Framework",
    "section": "bs4dash",
    "text": "bs4dash\nFrom bs4dash documentation:\nbs4Dash relies on the same basis as shinydashboard, that is the AdminLTE HTML template, except the version is higher (3.1.0 vs 2.4). The biggest difference is the dependence on Bootstrap 4, which is not natively supported by {Shiny}. That’s why elements like tabsetPanel(), actionButton(), … have been rewritten to provide full Bootstrap4 support. In addition, bs4Dash comes with extra elements that will help you to develop Shiny apps with a more professional look and feel.\nAll features are summarised on the website.\nA bs4dash demo is available here.\nThe code used to produce the demo is available here.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html",
    "href": "slides/Shiny Layout Fundamentals.html",
    "title": "Shiny Layout Fundamentals",
    "section": "",
    "text": "fluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs\n    ),\n    mainPanel(\n      # outputs\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny\n\n\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\nserver &lt;- function(input, output, session) {\n  output$hist &lt;- renderPlot({\n    means &lt;- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny\n\n\n\n\nDefault column size is 12\nGood for vertical apps\n\n\n\n\n\nfluidPage() Uses the grid system, responsive to different screen sizes.\nfixedPage() has fixed maximum width, so it doesn’t stretch with bigger screens/browser windows.\nfillpage() fills up the whole browser window and resizes with the browser window.\n\n\n\n\ntabsetPanel()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Import data\", \n      fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n      textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n      numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n      numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n    ),\n    tabPanel(\"Set parameters\"),\n    tabPanel(\"Visualise results\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\nnavlistPanel()\nLike tabset panel, but runs vertically. Helps overcome string limitations from tabset panel.\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\nnavbarPage() and navbarMenu()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- navbarPage(\n  \"Page title\",   \n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#sidebar-layout",
    "href": "slides/Shiny Layout Fundamentals.html#sidebar-layout",
    "title": "Shiny Layout Fundamentals",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs\n    ),\n    mainPanel(\n      # outputs\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#sidebar-layout-1",
    "href": "slides/Shiny Layout Fundamentals.html#sidebar-layout-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\nserver &lt;- function(input, output, session) {\n  output$hist &lt;- renderPlot({\n    means &lt;- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multi-row-layout",
    "href": "slides/Shiny Layout Fundamentals.html#multi-row-layout",
    "title": "Shiny Layout Fundamentals",
    "section": "Multi-row layout",
    "text": "Multi-row layout\n\n\n\n\n\n\n\nFrom Mastering Shiny",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multi-row-layout-1",
    "href": "slides/Shiny Layout Fundamentals.html#multi-row-layout-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Multi-row layout",
    "text": "Multi-row layout\n\nDefault column size is 12\nGood for vertical apps",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#xpage",
    "href": "slides/Shiny Layout Fundamentals.html#xpage",
    "title": "Shiny Layout Fundamentals",
    "section": "xPage()",
    "text": "xPage()\n\nfluidPage() Uses the grid system, responsive to different screen sizes.\nfixedPage() has fixed maximum width, so it doesn’t stretch with bigger screens/browser windows.\nfillpage() fills up the whole browser window and resizes with the browser window.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\ntabsetPanel()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Import data\", \n      fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n      textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n      numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n      numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n    ),\n    tabPanel(\"Set parameters\"),\n    tabPanel(\"Visualise results\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts-1",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\nnavlistPanel()\nLike tabset panel, but runs vertically. Helps overcome string limitations from tabset panel.\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts-2",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts-2",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\nnavbarPage() and navbarMenu()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- navbarPage(\n  \"Page title\",   \n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-important-thing-you-can-do.",
    "href": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-important-thing-you-can-do.",
    "title": "Planning Your Shiny App",
    "section": "Planning your Shiny app is THE most important thing you can do.",
    "text": "Planning your Shiny app is THE most important thing you can do."
  }
]