[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to an Intro to Shiny!",
    "section": "",
    "text": "This intro will be a speed run through the basics of Shiny – laying down the foundation for your journey into RShiny application development.\nEverything we will go through today will be on this website. We probably won’t get through everything, but feel free to have a read of this in your own time and give the exercises a go.",
    "crumbs": [
      "Home",
      "Structure of today",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome to Shiny 101!",
    "section": "",
    "text": "This course will take you from exploring the basics of Shiny – laying down the foundation for your journey into RShiny Dashboard development, through to the realms of design, interactivity, and all the little details that come together to form a neat Shiny dashboard.\nEver wondered why some Shiny apps fall short? Many stumble when it comes to performance and design hiccups. But worry not – I’m here to guide you on how to steer clear of these common pitfalls. Together, we’ll make sure your Shiny apps not only perform like a charm but also boast a design that stands out. Get ready to enhance your skills and craft Shiny dashboards that not only work well but also look great!",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "slides/getting-started.html",
    "href": "slides/getting-started.html",
    "title": "getting-started",
    "section": "",
    "text": "Turn off alarm\nGet out of bed"
  },
  {
    "objectID": "slides/getting-started.html#getting-up",
    "href": "slides/getting-started.html#getting-up",
    "title": "getting-started",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed",
    "crumbs": [
      "Home",
      "Getting Started",
      "getting-started"
    ]
  },
  {
    "objectID": "slides/getting-started.html#going-to-sleep",
    "href": "slides/getting-started.html#going-to-sleep",
    "title": "getting-started",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep",
    "crumbs": [
      "Home",
      "Getting Started",
      "getting-started"
    ]
  },
  {
    "objectID": "exercises/getting-started.html#hello",
    "href": "exercises/getting-started.html#hello",
    "title": "hello-world",
    "section": "Hello",
    "text": "Hello\n#| standalone: true\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", \"If x is\", min = 1, max = 50, value = 30),\n  sliderInput(\"y\", \"and y is\", min = 1, max = 50, value = 5),\n  \"then, (x * y) is\", textOutput(\"product\"),\n  \"and, (x * y) + 5 is\", textOutput(\"product_plus5\"),\n  \"and (x * y) + 10 is\", textOutput(\"product_plus10\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$product &lt;- renderText({ \n    product &lt;- input$x * input$y\n    product\n  })\n  output$product_plus5 &lt;- renderText({ \n    product &lt;- input$x * input$y\n    product + 5\n  })\n  output$product_plus10 &lt;- renderText({ \n    product &lt;- input$x * input$y\n    product + 10\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "exercises/hello-world.html",
    "href": "exercises/hello-world.html",
    "title": "hello-world",
    "section": "",
    "text": "goalproblemsolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "exercises/hello-world.html#hello",
    "href": "exercises/hello-world.html#hello",
    "title": "hello-world",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Exercises",
      "hello-world"
    ]
  },
  {
    "objectID": "exercises/hello-world.html#problem",
    "href": "exercises/hello-world.html#problem",
    "title": "hello-world",
    "section": "problem",
    "text": "problem\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Exercises",
      "hello-world"
    ]
  },
  {
    "objectID": "exercises/hello-world.html#solution",
    "href": "exercises/hello-world.html#solution",
    "title": "hello-world",
    "section": "solution",
    "text": "solution\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Exercises",
      "hello-world"
    ]
  },
  {
    "objectID": "getting-started.html#structure-of-this-course",
    "href": "getting-started.html#structure-of-this-course",
    "title": "About",
    "section": "Structure of this course",
    "text": "Structure of this course"
  },
  {
    "objectID": "getting-started.html#homework",
    "href": "getting-started.html#homework",
    "title": "About",
    "section": "Homework",
    "text": "Homework"
  },
  {
    "objectID": "getting-started.html#extra-resources",
    "href": "getting-started.html#extra-resources",
    "title": "About",
    "section": "Extra Resources",
    "text": "Extra Resources"
  },
  {
    "objectID": "slides/getting-started2.html#getting-up",
    "href": "slides/getting-started2.html#getting-up",
    "title": "getting-started",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "slides/getting-started2.html#going-to-sleep",
    "href": "slides/getting-started2.html#going-to-sleep",
    "title": "getting-started",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "slides/getting-started2.html#importance-of-planning",
    "href": "slides/getting-started2.html#importance-of-planning",
    "title": "Planning Your Shiny App",
    "section": "Importance of Planning:",
    "text": "Importance of Planning:\nhorrible dashboards",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#things-to-consider",
    "href": "slides/getting-started2.html#things-to-consider",
    "title": "Planning Your Shiny App",
    "section": "Things to consider:",
    "text": "Things to consider:\n\nRequired information\nAppropriate graphics\nAppropriate widgets (inputs)\nParticularly important with Shiny: how these inputs will interact with the graphics!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#required-information",
    "href": "slides/getting-started2.html#required-information",
    "title": "Planning Your Shiny App",
    "section": "Required information:",
    "text": "Required information:\n\nVague?\nSpecific?\nAsk: IS IT NECESSARY? (do we need it all?!)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#appropriate-graphics",
    "href": "slides/getting-started2.html#appropriate-graphics",
    "title": "Planning Your Shiny App",
    "section": "Appropriate graphics:",
    "text": "Appropriate graphics:\n\nMultiple lines\nBar vs line\nUse of gradients",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#appropriate-widgets",
    "href": "slides/getting-started2.html#appropriate-widgets",
    "title": "Planning Your Shiny App",
    "section": "Appropriate widgets:",
    "text": "Appropriate widgets:\n\nCheckbox vs radio boxes\nDrop down vs free text\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/getting-started2.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Planning Your Shiny App",
    "section": "How do these inputs interact with the graphics?",
    "text": "How do these inputs interact with the graphics?\n\nOne to one\nOne to many\nRule of thumb: K.I.S.S or tooltips for ease of use",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#wireframing",
    "href": "slides/getting-started2.html#wireframing",
    "title": "Planning Your Shiny App",
    "section": "WIREFRAMING",
    "text": "WIREFRAMING\n\nmap what it looks like\nwhat interacts with what",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#example",
    "href": "slides/getting-started2.html#example",
    "title": "Planning Your Shiny App",
    "section": "Example:",
    "text": "Example:\npicture of wireframe",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "about.html#structure-of-this-course",
    "href": "about.html#structure-of-this-course",
    "title": "Welcome to Shiny 101!",
    "section": "Structure of this course",
    "text": "Structure of this course\nEverything you need for this course will be hosted on this website. Classes consist of a balanced mix of slide presentations and interactive exercises. Supplementary bonus exercises are available for individual study, with opportunities for review in subsequent sessions.\nFor any inquiries or concerns, please feel free to reach out via email.",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html",
    "href": "slides/Planning Your Shiny App.html",
    "title": "Planning Your Shiny App",
    "section": "",
    "text": "horrible dashboards"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#importance-of-planning",
    "href": "slides/Planning Your Shiny App.html#importance-of-planning",
    "title": "Planning Your Shiny App",
    "section": "Importance of Planning:",
    "text": "Importance of Planning:",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#things-to-consider",
    "href": "slides/Planning Your Shiny App.html#things-to-consider",
    "title": "Planning Your Shiny App",
    "section": "Things to consider:",
    "text": "Things to consider:\n\nDoes it show the required information?\nDoes it use the appropriate graphics?\nAm I using appropriate widgets (inputs)?\nParticularly important with Shiny: how these inputs will interact with the graphics!"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#required-information",
    "href": "slides/Planning Your Shiny App.html#required-information",
    "title": "Planning Your Shiny App",
    "section": "Required information:",
    "text": "Required information:\n\nVague?\nSpecific?\nAsk: IS IT NECESSARY? (do we need it all?!)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#appropriate-graphics",
    "href": "slides/Planning Your Shiny App.html#appropriate-graphics",
    "title": "Planning Your Shiny App",
    "section": "Appropriate graphics:",
    "text": "Appropriate graphics:\n\nMultiple lines\nBar vs line\nUse of gradients"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#appropriate-widgets",
    "href": "slides/Planning Your Shiny App.html#appropriate-widgets",
    "title": "Planning Your Shiny App",
    "section": "Appropriate widgets:",
    "text": "Appropriate widgets:\n\nCheckbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/Planning Your Shiny App.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Planning Your Shiny App",
    "section": "How do these inputs interact with the graphics?",
    "text": "How do these inputs interact with the graphics?\n\nOne to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#wireframing",
    "href": "slides/Planning Your Shiny App.html#wireframing",
    "title": "Planning Your Shiny App",
    "section": "WIREFRAMING",
    "text": "WIREFRAMING\n\nmap what it looks like\nwhat interacts with what"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#example",
    "href": "slides/Planning Your Shiny App.html#example",
    "title": "Planning Your Shiny App",
    "section": "Example:",
    "text": "Example:",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#example-shiny-app",
    "href": "slides/Planning Your Shiny App.html#example-shiny-app",
    "title": "Planning Your Shiny App",
    "section": "Example Shiny app",
    "text": "Example Shiny app\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(shiny)\nlibrary(pokemon)\nlibrary(shinyWidgets)\nlibrary(DT)\nlibrary(dplyr)\n\npokemon_data &lt;- pokemon::pokemon\n\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n    \n    # Application title\n    titlePanel(\"The Shiny Pokedex\"),\n    \n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            \n            selectInput(\"type_1_filter\", \"Filter by Type 1:\", unique(pokemon_data$type_1), multiple = TRUE),\n            selectInput(\"type_2_filter\", \"Filter by Type 2:\", unique(pokemon_data$type_2), multiple = TRUE),\n            sliderInput(\"height_filter\", \"Filter by Height:\", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height))),\n            sliderInput(\"weight_filter\", \"Filter by Weight:\", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight))),\n            br(),\n            actionButton('reset', 'Clear filters')\n        ),\n        mainPanel(\n            DTOutput(\"table\"),\n            DTOutput(\"pokemon_details\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output, session) {\n    \n    observeEvent(input$reset, {\n        updateSelectInput(session, \"type_2_filter\", choices = unique(pokemon_data$type_2))\n        \n        updateSelectInput(session, \"type_1_filter\", choices = unique(pokemon_data$type_1))\n        \n        updateSliderInput(session, \"height_filter\", min = min(pokemon_data$height), max = max(pokemon_data$height), value = c(min(pokemon_data$height), max(pokemon_data$height)))\n        \n        updateSliderInput(session, \"weight_filter\", min = min(pokemon_data$weight), max = max(pokemon_data$weight), value = c(min(pokemon_data$weight), max(pokemon_data$weight)))\n    })\n    \n    \n    \n    # Reactive expression for filtering data based on user inputs\n    filtered_data &lt;- reactive({\n        data &lt;- pokemon_data\n        \n        # Filter by Type 1\n        if (!is.null(input$type_1_filter) && length(input$type_1_filter) &gt; 0) {\n            data &lt;- data[data$type_1 %in% input$type_1_filter, ]\n        }\n        \n        # Filter by Type 2\n        if (!is.null(input$type_2_filter) && length(input$type_2_filter) &gt; 0) {\n            data &lt;- data[data$type_2 %in% input$type_2_filter, ]\n        }\n        \n        # Filter by Height\n        data &lt;- data[data$height &gt;= input$height_filter[1] & data$height &lt;= input$height_filter[2], ]\n        \n        # Filter by Weight\n        data &lt;- data[data$weight &gt;= input$weight_filter[1] & data$weight &lt;= input$weight_filter[2], ]\n        \n        data &lt;- data %&gt;% \n            select(pokemon)\n        \n        return(data)\n    })\n    \n    # Update filter choices based on selected data\n    observe({\n        \n        # Update Type 2 filter choices based on selected Type 1 values\n        selected_type_1 &lt;- input$type_1_filter\n        type_2_choices &lt;- unique(pokemon_data$pokemon_data$type_2[pokemon_data$type_1 %in% selected_type_1])\n        updateSelectInput(session, \"type_2_filter\", choices = type_2_choices)\n        \n        # Update Type 1 filter choices based on selected Type 2 values\n        selected_type_2 &lt;- input$type_2_filter\n        type_1_choices &lt;- unique(pokemon_data$pokemon_data$type_1[pokemon_data$type_2 %in% selected_type_2])\n        updateSelectInput(session, \"type_1_filter\", choices = type_1_choices)\n    })\n    \n    # Render the DataTable\n    output$table &lt;- renderDT({\n        datatable(filtered_data(), selection = list(mode = 'single'))\n    })\n    \n    \n    details &lt;- eventReactive(input$table_rows_selected,{\n        \n        pokemon_name &lt;- filtered_data()$pokemon[input$table_rows_selected]\n        subset(pokemon_data, pokemon_data$pokemon == pokemon_name)\n        \n    })\n    \n    # Render the DataTable\n    output$pokemon_details &lt;- renderDT({\n        datatable(details())\n    })\n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html",
    "href": "slides/Basic Structure of a Shiny App.html",
    "title": "Basic Structure of a Shiny App",
    "section": "",
    "text": "insert code of app",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#basic-shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#basic-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "Basic Shiny app",
    "text": "Basic Shiny app\n\nlibrary(shiny)\n\nshinyApp(\n  ui = list(),\n  \n  server = function(input, output, session) {\n  \n  }\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#ui",
    "href": "slides/Basic Structure of a Shiny App.html#ui",
    "title": "Basic Structure of a Shiny App",
    "section": "UI",
    "text": "UI\n\nuser interface\nmostly codes for the things you can see, layout and the widget\nwhere the inputs and outputs are declared\nBest practice: do NOT put your data analysis in this section!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#server",
    "href": "slides/Basic Structure of a Shiny App.html#server",
    "title": "Basic Structure of a Shiny App",
    "section": "Server",
    "text": "Server\n\ncontains all thing logic that creates the “outputs”\nAlways save objects to display to the named output list, i.e. something of the form output$xx, where xx is the plot you want to display.\nAlways build objects to display with one of the render*() functions, like we built our plot with renderPlot().\nUse input values from the named input list, with input$xx.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#keeping-code-in-ui-vs-server",
    "href": "slides/Basic Structure of a Shiny App.html#keeping-code-in-ui-vs-server",
    "title": "Basic Structure of a Shiny App",
    "section": "Keeping code in UI vs Server",
    "text": "Keeping code in UI vs Server",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nThere are many options. The most simple ways to arrange your Shiny appsinclude:\n\nUI & Server in one Shiny Script\nUI & Server in different scripts\nAddition of global.R file\n\n& many more!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#data-.env",
    "href": "slides/Basic Structure of a Shiny App.html#data-.env",
    "title": "Basic Structure of a Shiny App",
    "section": ".data &.env",
    "text": ".data &.env",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Reactivity.html",
    "href": "slides/Reactivity.html",
    "title": "Reactivity",
    "section": "",
    "text": "The beauty of the Shiny app is the reactivity.\nShiny apps are build on ‘reactivity’ to make them interactive and responsive. So when you click on a button, or change something on the screen, the app updates itself without having to refresh the whole page. (Like other libraries used to create dashboards)\nIn a fully functioning Shiny app, you should be able to map out every interaction, calculation and output using a “reactive graph”.\n\n\n\n\n\n\n\nLet’s say we have an app with two plots (a scatter and distribution plot), and two inputs (a checkbox, and a slider). The scatter plot can be modified with both the checkbox and the slider, distribution plot is only interactive with the slider.:\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nInitial state\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nCalculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n\n\n\n\n\n\nCalculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  classDef changed fill:#f96\n\n\n\n\n\n\nReactive graph\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n\n\n\n\n\n\nSlider changes\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nInvalidated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nForget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nUpdated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nCheckbox changes\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nInvalidated\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nForget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n\n\n\n\n\n\nRecalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nUpdated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nHow do other frameworks work?\n\nStreamlit: re-render everything everywhere all the time\nDash/Panel/Gradio: Define callback functions\nPowerBI can do individual plots and widgets but graphics are ugly\n\n\n\n\nConsider this Shiny app below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThe reactive elements in this app are outlined in the UI elements in the script:\nInputs: - selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track))\nOutputs: - plotOutput(\"position_plot\")\n\n\n\n\n\nThe logic behind those elements are defined in the server:\n# Render the plot\noutput$position_plot &lt;- renderPlot({\n\n# Filter data based on user selection\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector)\n})\n\nggplot(selected_song_data(), aes(x = week, y = position)) +\ngeom_line() +\nlabs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\nx = \"Week\",\ny = \"Position\") +\nscale_y_reverse(limits = c(100, 0))\n})\n}\n\n\n\n\n\n\n\n\nUI:\nsliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\nServer:\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector &\nweek &gt;= input$week_no[1] &\nweek &lt;= input$week_no[2])\n})\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\nWhat does our reactive graph look like now?\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1 If you were to add a table that displays the week by week position of the song that was not affected by the month slider, what would the graph look like? \n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the code below, add a table that displays the week by week position of the song.\nTip:Use renderTable() and tableOutput().\n\n\nGoalProblem\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\nReactive values exist in between sources (e.g. an input) and endpoints (e.g. an output).\nA reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies\n\nHave a look at our example from the exercise above, can you see how filter(data, track == input$song_selector) was called twice in each of the render functions?\n\n\n\n\nIf reactive_object &lt;- reactive({...}) then you can only access or use reactive_object downstream usingreact_obj() and not react_obj.\nthink of react_obj() as a function that returns the current value\nCommon cause of everyone’s my favorite R error:\n\n## Error: object of type 'closure' is not subsettable`\n\ninput$XXX reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.) otherwise you get this other common error:\n\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)\n\n\nCreate a reactive() intermediate data frame so that it doesn’t have to be loaded twice when creating the two outputs.\nInstead of this:\n\n\n\n\n\nWe will have this:\n\n\n\n\n\n\n\nProblemSolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor,viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n    # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\nThese are constructed in the same way as a reactive() however an observer does not return a value, rather they are used for their “side effects”.\n\nThe side effects can involve sending data to the client browser, e.g. updating a UI element\nBecause observe() is used for its side effects, you will never see XXX &lt;- observe() because observe() will never produce a value!\n\nSo key thing to remember: reactive() produces things, observe() does things.\nSome examples when you would use observe:\n\nlogging user actions\nupdating a drop down list, based on data that has been loaded\n\n\n\n\n\nWithout using observe()Using observe()\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n  observe({\n    sub_cat_vals &lt;- data %&gt;% filter(Letter == input$letter) %&gt;% select(Sub_category)\n    \n    updateSelectInput(\n      session = session, \n      inputId = \"sub\",\n      choices = sub_cat_vals,\n      selected = head(sub_cat_vals, 1)\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\nSo how can we use observe() in our previous example? Take a look at the code below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  selectInput(\"artist_selector\", \"Select an Artist:\", choices = unique(data$artist)),\n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    req(input$song_selector)\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  observe({\n    songs = data %&gt;% \n      filter(artist == input$artist_selector) %&gt;% \n      pull(track) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    updateSelectInput(\n      inputId = \"song_selector\", \n      choices = songs\n    )\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThis observe block monitors changes in the selected artist (input$artist_selector). When a change occurs, it filters, processes, and sorts the corresponding track names from the dataset. Then, it dynamically updates the choices available in a selectInput song selector widget based on the unique and sorted track names associated with the selected artist.\nSo TLDR: observe() continually monitors for changes in the reactive change and does the action prescribed (which in this case was updating another selector).\nBecause of observe() is always constantly monitoring for changes in the environment, and reactive() values only ever gets changed if an input is changed, reactive() is known to be ‘lazy’.\n\n\n\n\n\n\n\n\n\n\n\nWriting a CSV\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nQuerying a database\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nAdding two numbers\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which prints to the console\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nFetching the current temperature from an API\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which sorts a list in place\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\n\n\n\n\nreactlog is a package that can help you understand the reactive chains in your app.\nYou can use it by running the following script:\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n\n# run a shiny app\nrunApp('app.R')\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()\n\n\n\n\nbecause reactivity does not determine when calculations happen, things can load at different times - i.e. the Shiny app might attempt to render tables and the UI before oauth and a DB connection is established resulting in some unsightly error messages.\nUse req() in your server functions to outline the values/objects required before the value is calculated. i.e. req(input$slider) means ‘don’t run the next bit of code unless there is a value in the slider input!’\n\n\n\n\n\n\n\n\n\n\n\nAre the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!\n\n\n\n\n\nMultiple lines\nBar vs line\nUse of gradients\n\n\n\n\n\nCheckbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms\n\n\n\n\n\nOne to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S\n\n\n\n\n\nmap what it looks like\nwhat interacts with what\n\n\n\n\n::: {layout-nrow=2}\n \n\n\n\nBuild a Shiny App using the Supermarket Sales data set available here.\nYou app must have the following:\nInputs:\n\nAbility to select branch\nAbility to select the location (options will show depending on the branch)\nAbility to select customer type\nFrom & to date\n\nOutputs:\n\nLine graph showing $ amount sold per day (remember to multiple quantity by price to get the amount)\nA simple bar graph showing different in dollar amount spent between men and women\nA table showing dollar amount spent by product type.\n\nDon’t worry too much about theming for now. But remember the foundations:\n\nwireframing\nreactive graphs (if it helps)\nreactive values so that you don’t repeat yourself\n\nReach out if you need tips/troubleshooting!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactivity",
    "href": "slides/Reactivity.html#reactivity",
    "title": "Reactivity",
    "section": "Reactivity",
    "text": "Reactivity\n\nPurpose of reactivity is NOT TO REPEAT YOURSELF\nConcept of “reactive chains”\nTell what to do, not when\nStreamlit vs dash/panel/gradio\nPattern of reactivity",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#example",
    "href": "slides/Reactivity.html#example",
    "title": "Reactivity",
    "section": "Example:",
    "text": "Example:\n\nCode with a reactive chain",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#example-1",
    "href": "slides/Reactivity.html#example-1",
    "title": "Reactivity",
    "section": "Example",
    "text": "Example\n\nDiagram of said reactive chain",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactivity-summary",
    "href": "slides/Reactivity.html#reactivity-summary",
    "title": "Reactivity",
    "section": "Reactivity summary",
    "text": "Reactivity summary\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactlog",
    "href": "slides/Reactivity.html#reactlog",
    "title": "Reactivity",
    "section": "",
    "text": "reactlog is a package that can help you understand the reactive chains in your app.\nYou can use it by running the following script:\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n\n# run a shiny app\nrunApp('app.R')\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#observability",
    "href": "slides/Reactivity.html#observability",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\n“side effect”\ndo stuff, not make stuff (updating a UI element, sending stuff to the browser, save CSV, triggering a modal window)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#observability-1",
    "href": "slides/Reactivity.html#observability-1",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\nexample",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#so",
    "href": "slides/Reactivity.html#so",
    "title": "Reactivity",
    "section": "SO:",
    "text": "SO:\n\ncreates intermediate value: reactive()\ndoes stuff: observe()\ncreates output: output/render",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#other-things",
    "href": "slides/Reactivity.html#other-things",
    "title": "Reactivity",
    "section": "Other things:",
    "text": "Other things:\nreq():A good way to protect against this is to validate inputs - the simplest way is to use req() which checks if a value is truthy. Non-truthy values prevent further execution of the reactive code (and downstream consumer’s code).\nMore detailed validation and error reporting is possible with validate() and need().",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "getting-started2.html#structure-of-this-course",
    "href": "getting-started2.html#structure-of-this-course",
    "title": "About",
    "section": "Structure of this course",
    "text": "Structure of this course\nThis course assumes that you have:\nbasic data manipulation skills\nself sufficient with plotting"
  },
  {
    "objectID": "getting-started2.html#homework",
    "href": "getting-started2.html#homework",
    "title": "About",
    "section": "Homework",
    "text": "Homework"
  },
  {
    "objectID": "getting-started2.html#extra-resources",
    "href": "getting-started2.html#extra-resources",
    "title": "About",
    "section": "Extra Resources",
    "text": "Extra Resources"
  },
  {
    "objectID": "slides/getting-started2.html#example-shiny-app",
    "href": "slides/getting-started2.html#example-shiny-app",
    "title": "Planning Your Shiny App",
    "section": "Example Shiny app",
    "text": "Example Shiny app",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#reactivity",
    "href": "slides/getting-started2.html#reactivity",
    "title": "Reactivity",
    "section": "Reactivity",
    "text": "Reactivity\n\nPurpose of reactivity is NOT TO REPEAT YOURSELF\nConcept of “reactive chains”\nTell what to do, not when\nStreamlit vs dash/panel/gradio\nPattern of reactivity",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#example-1",
    "href": "slides/getting-started2.html#example-1",
    "title": "Reactivity",
    "section": "Example",
    "text": "Example\n\nDiagram of said reactive chain",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#reactivity-summary",
    "href": "slides/getting-started2.html#reactivity-summary",
    "title": "Reactivity",
    "section": "Reactivity summary",
    "text": "Reactivity summary\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#reactlog",
    "href": "slides/getting-started2.html#reactlog",
    "title": "Reactivity",
    "section": "Reactlog",
    "text": "Reactlog\n\nexample",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#observability",
    "href": "slides/getting-started2.html#observability",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\n“side effect”\ndo stuff, not make stuff (updating a UI element, sending stuff to the browser, save CSV, triggering a modal window)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#observability-1",
    "href": "slides/getting-started2.html#observability-1",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\nexample",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#so",
    "href": "slides/getting-started2.html#so",
    "title": "Reactivity",
    "section": "SO:",
    "text": "SO:\n\ncreates intermediate value: reactive()\ndoes stuff: observe()\ncreates output: output/render",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/getting-started2.html#other-things",
    "href": "slides/getting-started2.html#other-things",
    "title": "Reactivity",
    "section": "Other things:",
    "text": "Other things:\nreq():A good way to protect against this is to validate inputs - the simplest way is to use req() which checks if a value is truthy. Non-truthy values prevent further execution of the reactive code (and downstream consumer’s code).\nMore detailed validation and error reporting is possible with validate() and need().",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#basic-shiny-app",
    "href": "slides/Planning Your Shiny App.html#basic-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "Basic Shiny app",
    "text": "Basic Shiny app\ninsert code of app",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#ui",
    "href": "slides/Planning Your Shiny App.html#ui",
    "title": "Basic Structure of a Shiny App",
    "section": "UI",
    "text": "UI",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#server",
    "href": "slides/Planning Your Shiny App.html#server",
    "title": "Basic Structure of a Shiny App",
    "section": "Server",
    "text": "Server",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#keeping-code-in-ui-vs-server",
    "href": "slides/Planning Your Shiny App.html#keeping-code-in-ui-vs-server",
    "title": "Basic Structure of a Shiny App",
    "section": "Keeping code in UI vs Server",
    "text": "Keeping code in UI vs Server",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#how-to-organise-your-directory",
    "href": "slides/Planning Your Shiny App.html#how-to-organise-your-directory",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#data-.env",
    "href": "slides/Planning Your Shiny App.html#data-.env",
    "title": "Basic Structure of a Shiny App",
    "section": ".data &.env",
    "text": ".data &.env",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "Planning Your Shiny App.html#structure-of-this-course",
    "href": "Planning Your Shiny App.html#structure-of-this-course",
    "title": "About",
    "section": "Structure of this course",
    "text": "Structure of this course\nThis course assumes that you have:\nbasic data manipulation skills\nself sufficient with plotting"
  },
  {
    "objectID": "Planning Your Shiny App.html#homework",
    "href": "Planning Your Shiny App.html#homework",
    "title": "About",
    "section": "Homework",
    "text": "Homework"
  },
  {
    "objectID": "Planning Your Shiny App.html#extra-resources",
    "href": "Planning Your Shiny App.html#extra-resources",
    "title": "About",
    "section": "Extra Resources",
    "text": "Extra Resources"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#reactivity",
    "href": "slides/Planning Your Shiny App.html#reactivity",
    "title": "Reactivity",
    "section": "Reactivity",
    "text": "Reactivity\n\nPurpose of reactivity is NOT TO REPEAT YOURSELF\nConcept of “reactive chains”\nTell what to do, not when\nStreamlit vs dash/panel/gradio\nPattern of reactivity",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#example-1",
    "href": "slides/Planning Your Shiny App.html#example-1",
    "title": "Reactivity",
    "section": "Example",
    "text": "Example\n\nDiagram of said reactive chain",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#reactivity-summary",
    "href": "slides/Planning Your Shiny App.html#reactivity-summary",
    "title": "Reactivity",
    "section": "Reactivity summary",
    "text": "Reactivity summary\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#reactlog",
    "href": "slides/Planning Your Shiny App.html#reactlog",
    "title": "Reactivity",
    "section": "Reactlog",
    "text": "Reactlog\n\nexample",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#observability",
    "href": "slides/Planning Your Shiny App.html#observability",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\n“side effect”\ndo stuff, not make stuff (updating a UI element, sending stuff to the browser, save CSV, triggering a modal window)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#observability-1",
    "href": "slides/Planning Your Shiny App.html#observability-1",
    "title": "Reactivity",
    "section": "Observability",
    "text": "Observability\n\nexample",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#so",
    "href": "slides/Planning Your Shiny App.html#so",
    "title": "Reactivity",
    "section": "SO:",
    "text": "SO:\n\ncreates intermediate value: reactive()\ndoes stuff: observe()\ncreates output: output/render",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#other-things",
    "href": "slides/Planning Your Shiny App.html#other-things",
    "title": "Reactivity",
    "section": "Other things:",
    "text": "Other things:\nreq():A good way to protect against this is to validate inputs - the simplest way is to use req() which checks if a value is truthy. Non-truthy values prevent further execution of the reactive code (and downstream consumer’s code).\nMore detailed validation and error reporting is possible with validate() and need().",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#importance-of-planning",
    "href": "slides/Planning Your Shiny App.qmd.html#importance-of-planning",
    "title": "Planning Your Shiny App",
    "section": "Importance of Planning:",
    "text": "Importance of Planning:\nhorrible dashboards"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#things-to-consider",
    "href": "slides/Planning Your Shiny App.qmd.html#things-to-consider",
    "title": "Planning Your Shiny App",
    "section": "Things to consider:",
    "text": "Things to consider:\n\nRequired information\nAppropriate graphics\nAppropriate widgets (inputs)\nParticularly important with Shiny: how these inputs will interact with the graphics!"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#required-information",
    "href": "slides/Planning Your Shiny App.qmd.html#required-information",
    "title": "Planning Your Shiny App",
    "section": "Required information:",
    "text": "Required information:\n\nVague?\nSpecific?\nAsk: IS IT NECESSARY? (do we need it all?!)"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#appropriate-graphics",
    "href": "slides/Planning Your Shiny App.qmd.html#appropriate-graphics",
    "title": "Planning Your Shiny App",
    "section": "Appropriate graphics:",
    "text": "Appropriate graphics:\n\nMultiple lines\nBar vs line\nUse of gradients"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#appropriate-widgets",
    "href": "slides/Planning Your Shiny App.qmd.html#appropriate-widgets",
    "title": "Planning Your Shiny App",
    "section": "Appropriate widgets:",
    "text": "Appropriate widgets:\n\nCheckbox vs radio boxes\nDrop down vs free text\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/Planning Your Shiny App.qmd.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Planning Your Shiny App",
    "section": "How do these inputs interact with the graphics?",
    "text": "How do these inputs interact with the graphics?\n\nOne to one\nOne to many\nRule of thumb: K.I.S.S or tooltips for ease of use"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#wireframing",
    "href": "slides/Planning Your Shiny App.qmd.html#wireframing",
    "title": "Planning Your Shiny App",
    "section": "WIREFRAMING",
    "text": "WIREFRAMING\n\nmap what it looks like\nwhat interacts with what"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#example",
    "href": "slides/Planning Your Shiny App.qmd.html#example",
    "title": "Planning Your Shiny App",
    "section": "Example:",
    "text": "Example:\npicture of wireframe"
  },
  {
    "objectID": "slides/Planning Your Shiny App.qmd.html#example-shiny-app",
    "href": "slides/Planning Your Shiny App.qmd.html#example-shiny-app",
    "title": "Planning Your Shiny App",
    "section": "Example Shiny app",
    "text": "Example Shiny app"
  },
  {
    "objectID": "about.html#this-course-assumes-that-you-have",
    "href": "about.html#this-course-assumes-that-you-have",
    "title": "Welcome to Shiny 101!",
    "section": "This course assumes that you have:",
    "text": "This course assumes that you have:\n\nbasic data manipulation skills in R\nknowledge of graphics libraries such as DT, ggplot2, plotly, echarts4R",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "about.html#extra-resources",
    "href": "about.html#extra-resources",
    "title": "Welcome to Shiny 101!",
    "section": "Extra Resources",
    "text": "Extra Resources",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#structure-of-this-course",
    "href": "index.html#structure-of-this-course",
    "title": "Welcome to an Intro to Shiny!",
    "section": "Structure of this course",
    "text": "Structure of this course\nEverything we will go through today will be on this website. We probably won’t get through everything, but feel free to have a read of this in your own time and give the exercises a go.",
    "crumbs": [
      "Home",
      "Structure of today",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "index.html#this-course-assumes-that-you-have",
    "href": "index.html#this-course-assumes-that-you-have",
    "title": "Welcome to an Intro to Shiny!",
    "section": "This course assumes that you have:",
    "text": "This course assumes that you have:\n\nbasic data manipulation skills in R (we will use dplyr in the exercises, but use what works for you)\nknowledge of graphics libraries such as DT, ggplot2, plotly, echarts4R",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "index.html#extra-resources",
    "href": "index.html#extra-resources",
    "title": "Welcome to an Intro to Shiny!",
    "section": "Extra Resources",
    "text": "Extra Resources\n\n\n\nContent\nLink\n\n\n\n\nGoogle R Style Guide\nhere\n\n\nMastering Shiny\nhere\n\n\nEngineering Production Grade Shiny Apps\nhere\n\n\n\nhere",
    "crumbs": [
      "Home",
      "Structure of today",
      "Welcome to an Intro to Shiny!"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-imporant-thing-you-can-do.",
    "href": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-imporant-thing-you-can-do.",
    "title": "Planning Your Shiny App",
    "section": "Planning your Shiny app is THE most imporant thing you can do.",
    "text": "Planning your Shiny app is THE most imporant thing you can do.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Planning Your Shiny App"
    ]
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-important-thing-you-can-do.",
    "href": "slides/Planning Your Shiny App.html#planning-your-shiny-app-is-the-most-important-thing-you-can-do.",
    "title": "Planning Your Shiny App",
    "section": "Planning your Shiny app is THE most important thing you can do.",
    "text": "Planning your Shiny app is THE most important thing you can do."
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#gathering-requirements",
    "href": "slides/Planning Your Shiny App.html#gathering-requirements",
    "title": "Planning Your Shiny App",
    "section": "Gathering requirements:",
    "text": "Gathering requirements:\n\nAre the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!"
  },
  {
    "objectID": "slides/Planning Your Shiny App.html#wireframe-examples",
    "href": "slides/Planning Your Shiny App.html#wireframe-examples",
    "title": "Planning Your Shiny App",
    "section": "Wireframe examples:",
    "text": "Wireframe examples:"
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "Shiny App",
    "text": "Shiny App\n\n\n\nServer\n\n + \n\n\n\n⇄\n\n\nClient / Browser\n\n\n\n\n\n +  +",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#shiny-app-skeleton",
    "href": "slides/Basic Structure of a Shiny App.html#shiny-app-skeleton",
    "title": "Basic Structure of a Shiny App",
    "section": "Shiny App Skeleton",
    "text": "Shiny App Skeleton\n\nlibrary(shiny)\n\nshinyApp(\n  ui = list(),\n  \n  server = function(input, output, session) {\n  \n  }\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#a-very-basic-shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#a-very-basic-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "A very basic shiny app",
    "text": "A very basic shiny app\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-it-all-comes-together",
    "href": "slides/Basic Structure of a Shiny App.html#how-it-all-comes-together",
    "title": "Basic Structure of a Shiny App",
    "section": "How it all comes together",
    "text": "How it all comes together",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-1",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-1",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in one Shiny script",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-2",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-2",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts  —",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#other-ways-of-organising-your-shiny-projects",
    "href": "slides/Basic Structure of a Shiny App.html#other-ways-of-organising-your-shiny-projects",
    "title": "Basic Structure of a Shiny App",
    "section": "Other ways of organising your shiny projects:",
    "text": "Other ways of organising your shiny projects:\nGolem:\n\nFramework to create modularised, scalable apps\n\nExtra resources: Productionising Shiny apps with Golem",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#extra-resources",
    "href": "slides/Basic Structure of a Shiny App.html#extra-resources",
    "title": "Basic Structure of a Shiny App",
    "section": "Extra resources:",
    "text": "Extra resources:\nhttps://google.github.io/styleguide/Rguide.html",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-cont",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-cont",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory (cont)",
    "text": "How to organise your directory (cont)\nUI & server in one Shiny script:\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\nß\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-3",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-3",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - ui.R\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nUI &lt;- shinyUI({\n    fluidPage(\n        \n        # Application title\n        titlePanel(\"Old Faithful Geyser Data\"),\n        \n        # Sidebar with a slider input for number of bins\n        sidebarLayout(\n            sidebarPanel(\n                sliderInput(\"bins\",\n                            \"Number of bins:\",\n                            min = 1,\n                            max = 50,\n                            value = 30)\n            ),\n            \n            # Show a plot of the generated distribution\n            mainPanel(\n                plotOutput(\"distPlot\")\n            )\n        )\n    )\n})",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-4",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-4",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - server.R\n\nlibrary(shiny)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output, session) {\n\n    output$distPlot &lt;- renderPlot({\n\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n\n    })\n\n}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-5",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-5",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nUI & server in seperate scripts - app.R\n\nlibrary(shiny)\nsource('UI.R', local = TRUE)\nsource('server.R')\n\nshinyApp(\n  ui = UI,\n  server = server\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-6",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-6",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\n\nYou can further break down the ui code into different tab scripts if creating an app with multiple tabs (using tab1.R scripts etc.)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-elements",
    "href": "slides/Reactivity.html#reactive-elements",
    "title": "Reactivity",
    "section": "",
    "text": "Consider this Shiny app below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThe reactive elements in this app are outlined in the UI elements in the script:\nInputs: - selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track))\nOutputs: - plotOutput(\"position_plot\")\n\n\n\n\n\nThe logic behind those elements are defined in the server:\n# Render the plot\noutput$position_plot &lt;- renderPlot({\n\n# Filter data based on user selection\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector)\n})\n\nggplot(selected_song_data(), aes(x = week, y = position)) +\ngeom_line() +\nlabs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\nx = \"Week\",\ny = \"Position\") +\nscale_y_reverse(limits = c(100, 0))\n})\n}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#adding-an-input",
    "href": "slides/Reactivity.html#adding-an-input",
    "title": "Reactivity",
    "section": "Adding an input",
    "text": "Adding an input\n\n\nCode\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        checkboxInput(\"forecast\", \"Highlight forecasted data\", value = FALSE)\n      ),\n      mainPanel( plotOutput(\"plot\") )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      \n      d_city = filter(d, city %in% input$city)\n      \n      if (input$forecast) {\n        ggplot(d_city, aes(x=time, y=temp, color=source)) +\n          geom_line() +\n          scale_color_manual(values = c(\"red\",\"black\"))\n      } else {\n        ggplot(d_city, aes(x=time, y=temp), color=1) +\n          geom_line()\n      }\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#test",
    "href": "slides/Reactivity.html#test",
    "title": "Reactivity",
    "section": "test",
    "text": "test\n#| standalone: true\n#| viewerHeight: 600\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#example-shiny-app",
    "href": "slides/Reactivity.html#example-shiny-app",
    "title": "Reactivity",
    "section": "Example Shiny app",
    "text": "Example Shiny app\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        checkboxInput(\"forecast\", \"Highlight forecasted data\", value = FALSE)\n      ),\n      mainPanel( plotOutput(\"plot\") )\n    )\n  ),\n  server = function(input, output, session) {\n    d = readr::read_csv(here::here(\"data/weather.csv\"))\n    \n    output$plot = renderPlot({\n      \n      d_city = filter(d, city %in% input$city)\n      \n      if (input$forecast) {\n        ggplot(d_city, aes(x=time, y=temp, color=source)) +\n          geom_line() +\n          scale_color_manual(values = c(\"red\",\"black\"))\n      } else {\n        ggplot(d_city, aes(x=time, y=temp), color=1) +\n          geom_line()\n      }\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-elements",
    "href": "slides/Reactivity-2.html#reactive-elements",
    "title": "Reactivity",
    "section": "Reactive elements",
    "text": "Reactive elements\n\n demos/demo01.R\n\n\n\nlibrary(tidyverse)\nlibrary(shiny)\ndata = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ) \n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      data  %&gt;% \n        filter(city %in% input$city) %&gt;% \n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\nOur inputs and outputs are defined by the elements in our ui."
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-expression",
    "href": "slides/Reactivity-2.html#reactive-expression",
    "title": "Reactivity",
    "section": "Reactive expression",
    "text": "Reactive expression\n\n demos/demo01.R\n\n\n\nlibrary(tidyverse)\nlibrary(shiny)\ndata = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ) \n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      data  %&gt;% \n        filter(city %in% input$city) %&gt;% \n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\nThe “reactive” logic is defined in our server function - shiny takes care of figuring out what depends on what."
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-02---adding-an-input",
    "href": "slides/Reactivity-2.html#demo-02---adding-an-input",
    "title": "Reactivity",
    "section": "Demo 02 - Adding an input",
    "text": "Demo 02 - Adding an input\nRun demo 2"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-graph",
    "href": "slides/Reactivity-2.html#reactive-graph",
    "title": "Reactivity",
    "section": "Reactive graph",
    "text": "Reactive graph\nWith these additions, what should our reactive graph look like now?"
  },
  {
    "objectID": "slides/Reactivity-2.html#your-turn---exercise-03",
    "href": "slides/Reactivity-2.html#your-turn---exercise-03",
    "title": "Reactivity",
    "section": "Your turn - Exercise 03",
    "text": "Your turn - Exercise 03\nStart with the code in exercises/ex03.R (based on demo02.R’s code)\nAdd a tableOutput() to the app’s mainPanel().\nOnce you have done that, add logic to the server function to render a table that shows the daily min and max temperature for each day of the week.\n\nYou will need to use renderTable()\nlubridate::wday() will be useful along with group_by() & summarize()\n\n\n\n\n−+\n09:00"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-graph-again",
    "href": "slides/Reactivity-2.html#reactive-graph-again",
    "title": "Reactivity",
    "section": "Reactive graph (again)",
    "text": "Reactive graph (again)"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactlog",
    "href": "slides/Reactivity-2.html#reactlog",
    "title": "Reactivity",
    "section": "reactlog",
    "text": "reactlog\nAnother (more detailed) way of seeing the reactive graph (dynamically) for your app is using the reactlog package.\nRun the following to log and show all of the reactive events occuring within ex03_soln.R,\n\nreactlog::reactlog_enable()\n\n(source(here::here(\"exercises/solutions/ex03_soln.R\")))\n\nshiny::reactlogShow()"
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-03---not-just-temperature",
    "href": "slides/Reactivity-2.html#demo-03---not-just-temperature",
    "title": "Reactivity",
    "section": "Demo 03 - Not just temperature",
    "text": "Demo 03 - Not just temperature\n\n demos/demo03.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#data-.env",
    "href": "slides/Reactivity-2.html#data-.env",
    "title": "Reactivity",
    "section": ".data & .env",
    "text": ".data & .env\nThese are an excellent option for avoiding some of the complexity around NSE with rlang (e.g. {{, !!, enquo(), etc.) when working with functions built with the tidy eval framework (e.g. dplyr and ggplot2).\n\n\n.data retrieves data-variables from the data frame.\n.env retrieves env-variables from the environment.\n\n\n\n\nFor more details see the rlang .data and .env pronouns article."
  },
  {
    "objectID": "slides/Reactivity-2.html#dont-repeat-yourself-dry",
    "href": "slides/Reactivity-2.html#dont-repeat-yourself-dry",
    "title": "Reactivity",
    "section": "Don’t repeat yourself (DRY)",
    "text": "Don’t repeat yourself (DRY)\n\n demos/demo03.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-04---using-a-reactive",
    "href": "slides/Reactivity-2.html#demo-04---using-a-reactive",
    "title": "Reactivity",
    "section": "Demo 04 - Using a reactive",
    "text": "Demo 04 - Using a reactive\n\n demos/demo04.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d_city() |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-expressions",
    "href": "slides/Reactivity-2.html#reactive-expressions",
    "title": "Reactivity",
    "section": "Reactive expressions",
    "text": "Reactive expressions\nThese are an example of a “reactive conductor” as they exist in between sources (e.g. an input) and endpoints (e.g. an output).\nAs such a reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-tips",
    "href": "slides/Reactivity-2.html#reactive-tips",
    "title": "Reactivity",
    "section": "reactive() tips",
    "text": "reactive() tips\n\nCode written similarly to render*() functions\nIf react_obj = reactive({...}) then any consumer must access value using react_obj() and not react_obj\n\nthink of react_obj as a function that returns the current value\nCommon cause of everyone’s my favorite R error ,\n## Error: object of type 'closure' is not subsettable`\n\nLike input reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.)\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-graph-1",
    "href": "slides/Reactivity-2.html#reactive-graph-1",
    "title": "Reactivity",
    "section": "Reactive graph",
    "text": "Reactive graph"
  },
  {
    "objectID": "slides/Reactivity-2.html#observer",
    "href": "slides/Reactivity-2.html#observer",
    "title": "Reactivity",
    "section": "observer()",
    "text": "observer()\nThese are constructed in the same way as a reactive() however an observer does not return a value, as such they are used for their side effects.\n\nThe side effects in most cases involve sending data to the client broswer, e.g. updating a UI element\nWhile not obvious given their syntax - the results of the render*() functions are observers."
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-05---cities-and-regions",
    "href": "slides/Reactivity-2.html#demo-05---cities-and-regions",
    "title": "Reactivity",
    "section": "Demo 05 - Cities AND regions",
    "text": "Demo 05 - Cities AND regions\n\n demos/demo05.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\n          \"region\", \"Select a region\",\n          choices = sort(unique(d$region))\n        ),\n        selectInput(\n          \"city\", \"Select a city\",\n          choices = c(),\n          multiple = TRUE\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    d_city = reactive({\n      req(input$city)\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    observe({\n      cities = d |&gt;\n        filter(region == input$region) |&gt;\n        pull(city) |&gt;\n        unique() |&gt;\n        sort()\n      \n      updateSelectInput(\n        inputId = \"city\", \n        choices = cities\n      )\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#reactive-graph-2",
    "href": "slides/Reactivity-2.html#reactive-graph-2",
    "title": "Reactivity",
    "section": "Reactive graph",
    "text": "Reactive graph"
  },
  {
    "objectID": "slides/Reactivity-2.html#using-req",
    "href": "slides/Reactivity-2.html#using-req",
    "title": "Reactivity",
    "section": "Using req()",
    "text": "Using req()\nYou may have notices that the App initializes with East selected for the region but no initial selection for the city. Because of this we have some warnings generated initially:\nWarning in min(.data[[\"temperature\"]]) :\n  no non-missing arguments to min; returning Inf\nThis can be a common occurrence, particularly at initialization (or if a user enters bad / unexpected input).\nA good way to protect against this is to validate inputs - the simplest way is to use req() which checks if a value is truthy. Non-truthy values prevent further execution of the reactive code (and downstream consumer’s code).\nMore detailed validation and error reporting is possible with validate() and need()."
  },
  {
    "objectID": "slides/Reactivity-2.html#a-cautionary-example",
    "href": "slides/Reactivity-2.html#a-cautionary-example",
    "title": "Reactivity",
    "section": "A cautionary example",
    "text": "A cautionary example\n\nlibrary(shiny)\n\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"n\", \"n\", 0)\n  ),\n  server = function(input, output, session) {\n    observeEvent(input$n, {\n      updateNumericInput(inputId = \"n\", value = input$n + 1)\n    })\n  }\n)\n\n\n\nFrom Mastering Shiny"
  },
  {
    "objectID": "slides/Reactivity-2.html#your-turn---exercise-04",
    "href": "slides/Reactivity-2.html#your-turn---exercise-04",
    "title": "Reactivity",
    "section": "Your turn - Exercise 04",
    "text": "Your turn - Exercise 04\nUsing the code provided in exercise/ex04.R as a starting point add another observer to the app that updates the selectInput() for var such that any variables that are constant (0 variance), for the currently selected cities, are removed.\nFor example, given this time of year most cities will have 0 risk of snow we would like to exclude the snow variable the var input.\nHint - think about what inputs / reactives would make the most sense to use for this.\n\n\n\n−+\n09:00"
  },
  {
    "objectID": "slides/Reactivity-2.html#bindevent",
    "href": "slides/Reactivity-2.html#bindevent",
    "title": "Reactivity",
    "section": "bindEvent()",
    "text": "bindEvent()\nFor both observers and reactive expressions Shiny will automatically determine reactive dependencies for you - in some cases this is not what we want.\nTo explicitly control the reactive dependencies of reactive expressions, render functions, and observers we can modify them using bindEvent() where the dependencies are explicitly provided.\nSimilar effects can be achieved via observeEvent() / eventReactive() but these have been soft deprecated as of Shiny 1.6.\n\n\nNote - when binding a reactive you must use the functional form, i.e. react() and not react"
  },
  {
    "objectID": "slides/Reactivity-2.html#downloadbutton-downloadhandler",
    "href": "slides/Reactivity-2.html#downloadbutton-downloadhandler",
    "title": "Reactivity",
    "section": "downloadButton() & downloadHandler()",
    "text": "downloadButton() & downloadHandler()\nThese are the UI and server components needed for downloading a file from your Shiny app. The downloaded file can be of any arbitrary type and content.\ndownloadButton() is a special case of an actionButton() with specialized server syntax.\nSpecifically, within the server definition the downloadHandler() is attached to the button’s id via output, e.g.\noutput$download_btn = downloadHandler(...)\nThe handler then defines the filename function for generating a default filename and content function for writing the download file’s content to a temporary file, which can then be served by Shiny for downloading."
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-06---a-download-button",
    "href": "slides/Reactivity-2.html#demo-06---a-download-button",
    "title": "Reactivity",
    "section": "Demo 06 - A download button",
    "text": "Demo 06 - A download button\n\n demos/demo06.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\n          \"region\", \"Select a region\",\n          choices = sort(unique(d$region))\n        ),\n        selectInput(\n          \"city\", \"Select a city\",\n          choices = c(),\n          multiple = TRUE\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        ),\n        downloadButton(\"download\")\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    output$download = downloadHandler(\n      filename = function() {\n        paste0(\n          paste(input$city,collapse=\"-\") |&gt;\n            stringr::str_replace(\" \", \"_\") |&gt;\n            tolower(), \n          \".csv\"\n        )\n      },\n      content = function(file) {\n        readr::write_csv(d_city(), file)\n      }\n    )\n    \n    d_city = reactive({\n      req(input$city)\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    observe({\n      cities = d |&gt;\n        filter(region == input$region) |&gt;\n        pull(city) |&gt;\n        unique() |&gt;\n        sort()\n      \n      updateSelectInput(\n        inputId = \"city\", \n        choices = cities\n      )\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d_city() |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#modal-dialogs",
    "href": "slides/Reactivity-2.html#modal-dialogs",
    "title": "Reactivity",
    "section": "Modal dialogs",
    "text": "Modal dialogs\nThese are a popup window element that allow us to present important messages (e.g. warnings or errors) or other UI elements in a way that does not permanently clutter up the main UI of an app.\nThe modal dialog consists of a number of Shiny UI elements (static or dynamic) and only displays when it is triggered (usually by something like an action button or link).\nThey differ from other UI elements we’ve seen so far as they are usually defined within an app’s server component not the ui."
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-07---a-fancy-download-button",
    "href": "slides/Reactivity-2.html#demo-07---a-fancy-download-button",
    "title": "Reactivity",
    "section": "Demo 07 - A fancy download button",
    "text": "Demo 07 - A fancy download button\n\n demos/demo07.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\n          \"region\", \"Select a region\",\n          choices = sort(unique(d$region))\n        ),\n        selectInput(\n          \"city\", \"Select a city\",\n          choices = c(),\n          multiple = TRUE\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        ),\n        actionButton(\"download_modal\", \"Download\")\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    observe({\n      showModal(modalDialog(\n        title = \"Download data\",\n        checkboxGroupInput(\n          \"dl_vars\", \"Select variables to download\",\n          choices = names(d), selected = names(d), inline = TRUE\n        ),\n        footer = list(\n          downloadButton(\"download\"),\n          modalButton(\"Cancel\")\n        )\n      ))\n    }) |&gt;\n      bindEvent(input$download_modal)\n    \n    output$download = downloadHandler(\n      filename = function() {\n        paste0(\n          paste(input$city,collapse=\"_\"), \n          \".csv\"\n        )\n      },\n      content = function(file) {\n        readr::write_csv(\n          d_city() |&gt;\n            select(input$dl_vars), \n          file\n        )\n      }\n    )\n    \n    d_city = reactive({\n      req(input$city)\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    observe({\n      cities = d |&gt;\n        filter(region == input$region) |&gt;\n        pull(city) |&gt;\n        unique() |&gt;\n        sort()\n      \n      updateSelectInput(\n        inputId = \"city\", \n        choices = cities\n      )\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d_city() |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-8---using-fileinput",
    "href": "slides/Reactivity-2.html#demo-8---using-fileinput",
    "title": "Reactivity",
    "section": "Demo 8 - Using fileInput()",
    "text": "Demo 8 - Using fileInput()\n\n demos/demo08.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        fileInput(\"upload\", \"Upload a file\")\n      ),\n      mainPanel( \n        h3(\"Result\"),\n        tableOutput(\"result\"),\n        h3(\"Content:\"),\n        tableOutput(\"data\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$result = renderTable({\n      input$upload\n    })\n    \n    output$data = renderTable({\n      req(input$upload)\n      ext = tools::file_ext(input$upload$datapath)\n      validate(need(ext == \"csv\", \"Please upload a csv file\"))\n      readr::read_csv(input$upload$datapath)\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-2.html#fileinput-widget",
    "href": "slides/Reactivity-2.html#fileinput-widget",
    "title": "Reactivity",
    "section": "fileInput() widget",
    "text": "fileInput() widget\nThis widget behaves a bit differently than the others we have seen - once a file is uploaded it returns a data frame with one row per file and the following columns:\n\nname - the original filename (from the client’s system)\nsize - file size in bytes\ntype - file mime type, usually determined by the file extension\ndatapath - location of the temporary file on the server\n\nGiven this data frame your app’s server code is responsible for the actual process of reading in the uploaded file."
  },
  {
    "objectID": "slides/Reactivity-2.html#fileinput-hints",
    "href": "slides/Reactivity-2.html#fileinput-hints",
    "title": "Reactivity",
    "section": "fileInput() hints",
    "text": "fileInput() hints\n\ninput$upload will default to NULL when the app is loaded, using req(input$upload) for downstream consumers is a good idea\nFiles in datapath are temporary and should be treated as ephemeral\n\nadditional uploads can result in the previous files being deleted\n\ntype is at best a guess - validate uploaded files and write defensive code\nThe accept argument helps to limit file types but cannot prevent bad uploads"
  },
  {
    "objectID": "slides/Reactivity-2.html#your-turn---exercise-05",
    "href": "slides/Reactivity-2.html#your-turn---exercise-05",
    "title": "Reactivity",
    "section": "Your turn - Exercise 05",
    "text": "Your turn - Exercise 05\nStarting with the code in exercises/ex05.R replace the preloading of the weather data (d and d_vars) with reactive versions that are populated via a fileInput() widget.\nYou should then be able to get the same app behavior as before once data/weather.csv is uploaded. You can also check that your app works with the data/sedona.csv and data/chicago.csv datasets as well.\nHint - remember that anywhere that uses either d or d_vars will now need to use d() and d_vars() instead.\n\n\n\n−+\n09:00"
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-1",
    "href": "slides/Reactivity-2.html#demo-1",
    "title": "Reactivity",
    "section": "Demo 1",
    "text": "Demo 1\nRun demo 1 code"
  },
  {
    "objectID": "slides/Reactivity-2.html#demo-02---adding-an-input-1",
    "href": "slides/Reactivity-2.html#demo-02---adding-an-input-1",
    "title": "Reactivity",
    "section": "Demo 02 - Adding an input",
    "text": "Demo 02 - Adding an input\n\n demos/demo02.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\n\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        checkboxInput(\"forecast\", \"Highlight forecasted data\", value = FALSE)\n      ),\n      mainPanel( plotOutput(\"plot\") )\n    )\n  ),\n  server = function(input, output, session) {\n    d = readr::read_csv(here::here(\"data/weather.csv\"))\n    \n    output$plot = renderPlot({\n      \n      d_city = filter(d, city %in% input$city)\n      \n      if (input$forecast) {\n        ggplot(d_city, aes(x=time, y=temp, color=source)) +\n          geom_line() +\n          scale_color_manual(values = c(\"red\",\"black\"))\n      } else {\n        ggplot(d_city, aes(x=time, y=temp), color=1) +\n          geom_line()\n      }\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-1",
    "href": "slides/Reactivity-shiny_live.html#demo-1",
    "title": "Reactivity",
    "section": "Demo 1",
    "text": "Demo 1\nRun demo 1 code"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-elements",
    "href": "slides/Reactivity-shiny_live.html#reactive-elements",
    "title": "Reactivity",
    "section": "",
    "text": "demos/demo01.R\n\n\n\nlibrary(tidyverse)\nlibrary(shiny)\ndata = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ) \n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      data  %&gt;% \n        filter(city %in% input$city) %&gt;% \n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\nOur inputs and outputs are defined by the elements in our ui."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-expression",
    "href": "slides/Reactivity-shiny_live.html#reactive-expression",
    "title": "Reactivity",
    "section": "",
    "text": "demos/demo01.R\n\n\n\nlibrary(tidyverse)\nlibrary(shiny)\ndata = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ) \n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      data  %&gt;% \n        filter(city %in% input$city) %&gt;% \n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\nThe “reactive” logic is defined in our server function - shiny takes care of figuring out what depends on what."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-02---adding-an-input",
    "href": "slides/Reactivity-shiny_live.html#demo-02---adding-an-input",
    "title": "Reactivity",
    "section": "",
    "text": "Run demo 2"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-02---adding-an-input-1",
    "href": "slides/Reactivity-shiny_live.html#demo-02---adding-an-input-1",
    "title": "Reactivity",
    "section": "",
    "text": "demos/demo02.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\n\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        checkboxInput(\"forecast\", \"Highlight forecasted data\", value = FALSE)\n      ),\n      mainPanel( plotOutput(\"plot\") )\n    )\n  ),\n  server = function(input, output, session) {\n    d = readr::read_csv(here::here(\"data/weather.csv\"))\n    \n    output$plot = renderPlot({\n      \n      d_city = filter(d, city %in% input$city)\n      \n      if (input$forecast) {\n        ggplot(d_city, aes(x=time, y=temp, color=source)) +\n          geom_line() +\n          scale_color_manual(values = c(\"red\",\"black\"))\n      } else {\n        ggplot(d_city, aes(x=time, y=temp), color=1) +\n          geom_line()\n      }\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-graph",
    "href": "slides/Reactivity-shiny_live.html#reactive-graph",
    "title": "Reactivity",
    "section": "",
    "text": "With these additions, what should our reactive graph look like now?\n. . ."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#your-turn---exercise-03",
    "href": "slides/Reactivity-shiny_live.html#your-turn---exercise-03",
    "title": "Reactivity",
    "section": "",
    "text": "Start with the code in exercises/ex03.R (based on demo02.R’s code)\nAdd a tableOutput() to the app’s mainPanel().\nOnce you have done that, add logic to the server function to render a table that shows the daily min and max temperature for each day of the week.\n\nYou will need to use renderTable()\nlubridate::wday() will be useful along with group_by() & summarize()\n\n\n\n\n−+\n09:00"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-graph-again",
    "href": "slides/Reactivity-shiny_live.html#reactive-graph-again",
    "title": "Reactivity",
    "section": "Reactive graph (again)",
    "text": "Reactive graph (again)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactlog",
    "href": "slides/Reactivity-shiny_live.html#reactlog",
    "title": "Reactivity",
    "section": "",
    "text": "Another (more detailed) way of seeing the reactive graph (dynamically) for your app is using the reactlog package.\nRun the following to log and show all of the reactive events occuring within ex03_soln.R,\n\nreactlog::reactlog_enable()\n\n(source(here::here(\"exercises/solutions/ex03_soln.R\")))\n\nshiny::reactlogShow()"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-03---not-just-temperature",
    "href": "slides/Reactivity-shiny_live.html#demo-03---not-just-temperature",
    "title": "Reactivity",
    "section": "Demo 03 - Not just temperature",
    "text": "Demo 03 - Not just temperature\n\n demos/demo03.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#data-.env",
    "href": "slides/Reactivity-shiny_live.html#data-.env",
    "title": "Reactivity",
    "section": ".data & .env",
    "text": ".data & .env\nThese are an excellent option for avoiding some of the complexity around NSE with rlang (e.g. {{, !!, enquo(), etc.) when working with functions built with the tidy eval framework (e.g. dplyr and ggplot2).\n\n\n.data retrieves data-variables from the data frame.\n.env retrieves env-variables from the environment.\n\n\n\n\nFor more details see the rlang .data and .env pronouns article."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#dont-repeat-yourself-dry",
    "href": "slides/Reactivity-shiny_live.html#dont-repeat-yourself-dry",
    "title": "Reactivity",
    "section": "Don’t repeat yourself (DRY)",
    "text": "Don’t repeat yourself (DRY)\n\n demos/demo03.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d |&gt;\n        filter(city %in% input$city) |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-04---using-a-reactive",
    "href": "slides/Reactivity-shiny_live.html#demo-04---using-a-reactive",
    "title": "Reactivity",
    "section": "Demo 04 - Using a reactive",
    "text": "Demo 04 - Using a reactive\n\n demos/demo04.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\"),\n        tableOutput(\"minmax\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n    \n    output$minmax = renderTable({\n      d_city() |&gt;\n        mutate(\n          day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n          date = as.character(lubridate::date(time))\n        ) |&gt;\n        group_by(date, day) |&gt;\n        summarize(\n          `min` = min(.data[[input$var]]),\n          `max` = max(.data[[input$var]]),\n          .groups = \"drop\"\n        )\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-expressions",
    "href": "slides/Reactivity-shiny_live.html#reactive-expressions",
    "title": "Reactivity",
    "section": "Reactive expressions",
    "text": "Reactive expressions\nThese are an example of a “reactive conductor” as they exist in between sources (e.g. an input) and endpoints (e.g. an output).\nAs such a reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-tips",
    "href": "slides/Reactivity-shiny_live.html#reactive-tips",
    "title": "Reactivity",
    "section": "reactive() tips",
    "text": "reactive() tips\n\nCode written similarly to render*() functions\nIf react_obj = reactive({...}) then any consumer must access value using react_obj() and not react_obj\n\nthink of react_obj as a function that returns the current value\nCommon cause of everyone’s my favorite R error ,\n## Error: object of type 'closure' is not subsettable`\n\nLike input reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.)\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-graph-1",
    "href": "slides/Reactivity-shiny_live.html#reactive-graph-1",
    "title": "Reactivity",
    "section": "Reactive graph",
    "text": "Reactive graph"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#observer",
    "href": "slides/Reactivity-shiny_live.html#observer",
    "title": "Reactivity",
    "section": "observer()",
    "text": "observer()\nThese are constructed in the same way as a reactive() however an observer does not return a value, as such they are used for their side effects.\n\nThe side effects in most cases involve sending data to the client broswer, e.g. updating a UI element\nWhile not obvious given their syntax - the results of the render*() functions are observers."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#demo-05---cities-and-regions",
    "href": "slides/Reactivity-shiny_live.html#demo-05---cities-and-regions",
    "title": "Reactivity",
    "section": "Demo 05 - Cities AND regions",
    "text": "Demo 05 - Cities AND regions\n\n demos/demo05.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Weather Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\n          \"region\", \"Select a region\",\n          choices = sort(unique(d$region))\n        ),\n        selectInput(\n          \"city\", \"Select a city\",\n          choices = c(),\n          multiple = TRUE\n        ),\n        selectInput(\n          \"var\", \"Select a variable\",\n          choices = d_vars, selected = \"temp\"\n        )\n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    \n    d_city = reactive({\n      req(input$city)\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    observe({\n      cities = d |&gt;\n        filter(region == input$region) |&gt;\n        pull(city) |&gt;\n        unique() |&gt;\n        sort()\n      \n      updateSelectInput(\n        inputId = \"city\", \n        choices = cities\n      )\n    })\n    \n    output$plot = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#reactive-graph-2",
    "href": "slides/Reactivity-shiny_live.html#reactive-graph-2",
    "title": "Reactivity",
    "section": "Reactive graph",
    "text": "Reactive graph"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#using-req",
    "href": "slides/Reactivity-shiny_live.html#using-req",
    "title": "Reactivity",
    "section": "Using req()",
    "text": "Using req()\nYou may have notices that the App initializes with East selected for the region but no initial selection for the city. Because of this we have some warnings generated initially:\nWarning in min(.data[[\"temperature\"]]) :\n  no non-missing arguments to min; returning Inf\nThis can be a common occurrence, particularly at initialization (or if a user enters bad / unexpected input).\nA good way to protect against this is to validate inputs - the simplest way is to use req() which checks if a value is truthy. Non-truthy values prevent further execution of the reactive code (and downstream consumer’s code).\nMore detailed validation and error reporting is possible with validate() and need()."
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#a-cautionary-example",
    "href": "slides/Reactivity-shiny_live.html#a-cautionary-example",
    "title": "Reactivity",
    "section": "A cautionary example",
    "text": "A cautionary example\n\nlibrary(shiny)\n\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"n\", \"n\", 0)\n  ),\n  server = function(input, output, session) {\n    observeEvent(input$n, {\n      updateNumericInput(inputId = \"n\", value = input$n + 1)\n    })\n  }\n)\n\n\n\nFrom Mastering Shiny"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html#your-turn---exercise-04",
    "href": "slides/Reactivity-shiny_live.html#your-turn---exercise-04",
    "title": "Reactivity",
    "section": "Your turn - Exercise 04",
    "text": "Your turn - Exercise 04\nUsing the code provided in exercise/ex04.R as a starting point add another observer to the app that updates the selectInput() for var such that any variables that are constant (0 variance), for the currently selected cities, are removed.\nFor example, given this time of year most cities will have 0 risk of snow we would like to exclude the snow variable the var input.\nHint - think about what inputs / reactives would make the most sense to use for this.\n\n\n\n−+\n09:00"
  },
  {
    "objectID": "slides/Reactivity-shiny_live.html",
    "href": "slides/Reactivity-shiny_live.html",
    "title": "Reactivity_2",
    "section": "",
    "text": "Basic Reactivity\nTake this Shiny app:\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\ndata = readr::read_csv(here::here(\"data/weather.csv\"))\n\nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Temperature Forecasts\"),\n    sidebarLayout(\n      sidebarPanel(\n        radioButtons(\n          \"city\", \"Select a city\",\n          choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n        ) \n      ),\n      mainPanel( \n        plotOutput(\"plot\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$plot = renderPlot({\n      data  %&gt;% \n        filter(city %in% input$city) %&gt;% \n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n  }\n)"
  },
  {
    "objectID": "slides/Reactivity.html#adding-in-another-input",
    "href": "slides/Reactivity.html#adding-in-another-input",
    "title": "Reactivity",
    "section": "",
    "text": "UI:\nsliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\nServer:\nselected_song_data &lt;- reactive({\nfilter(data, track == input$song_selector &\nweek &gt;= input$week_no[1] &\nweek &lt;= input$week_no[2])\n})\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n\nWhat does our reactive graph look like now?\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1 If you were to add a table that displays the week by week position of the song that was not affected by the month slider, what would the graph look like? \n\n\n\n\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the code below, add a table that displays the week by week position of the song.\nTip:Use renderTable() and tableOutput().\n\n\nGoalProblem\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#goal",
    "href": "slides/Reactivity.html#goal",
    "title": "Reactivity",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n#| components: [viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n::: {.panel-tabset}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#using-a-reactive-value",
    "href": "slides/Reactivity.html#using-a-reactive-value",
    "title": "Reactivity",
    "section": "",
    "text": "These are an example of a “reactive conductor” as they exist in between sources (e.g. an input) and endpoints (e.g. an output).\nAs such a reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-tips",
    "href": "slides/Reactivity.html#reactive-tips",
    "title": "Reactivity",
    "section": "",
    "text": "If reactive_object &lt;- reactive({...}) then you can only access or use reactive_object downstream usingreact_obj() and not react_obj.\nthink of react_obj() as a function that returns the current value\nCommon cause of everyone’s my favorite R error:\n\n## Error: object of type 'closure' is not subsettable`\n\ninput$XXX reactive expressions may only be used within a reactive context (e.g. render*(), reactive(), observer(), etc.) otherwise you get this other common error:\n\n## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)\n\n\nCreate a reactive() intermediate data frame so that it doesn’t have to be loaded twice when creating the two outputs.\nInstead of this:\n\n\n\n\n\nWe will have this:\n\n\n\n\n\n\n\nProblemSolution\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor,viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput(\"table\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector &\n               week &gt;= input$week_no[1] &\n               week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    \n    selected_song_data()\n    \n  })\n  \n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n    # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#observer",
    "href": "slides/Reactivity.html#observer",
    "title": "Reactivity",
    "section": "",
    "text": "These are constructed in the same way as a reactive() however an observer does not return a value, rather they are used for their side effects.\n\nThe side effects in most cases involve sending data to the client broswer, e.g. updating a UI element\nWhile not obvious given their syntax - the results of the render*() functions are observers.\n\nSo key thing to remember: reactive() produces things, observe() does things. i.e. in our last example, we used reactive() to create an intermediate data frame.\nSo how would you use observe? Take a look at the code below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  selectInput(\"artist_selector\", \"Select a Song:\", choices = unique(data$artist)),\n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    req(input$song_selector)\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  observe({\n      songs = data %&gt;% \n        filter(artist == input$artist_selector) %&gt;% \n        pull(track) %&gt;% \n        unique() %&gt;% \n        sort()\n      \n      updateSelectInput(\n        inputId = \"song_selector\", \n        choices = songs\n      )\n    })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n    # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nReactive graph:\n** insert picture here **\nTip: use req()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "Untitled/Untitled.html",
    "href": "Untitled/Untitled.html",
    "title": "Webexercises",
    "section": "",
    "text": "Consider this Shiny app:\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n there is a 95% probability that the true mean lies within this range 95% of the data fall within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean\n\n\n\n\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\n\n\n\n\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "Untitled/Untitled.html#example-questions",
    "href": "Untitled/Untitled.html#example-questions",
    "title": "Webexercises",
    "section": "Example Questions",
    "text": "Example Questions\n\nFill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 64 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\nMultiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\nTrue or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\nLonger MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n if you repeated the process many times, 95% of intervals calculated in this way contain the true mean there is a 95% probability that the true mean lies within this range 95% of the data fall within this range"
  },
  {
    "objectID": "Untitled/Untitled.html#checked-sections",
    "href": "Untitled/Untitled.html#checked-sections",
    "title": "Webexercises",
    "section": "",
    "text": "Create sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "Untitled/Untitled.html#hidden-solutions-and-hints",
    "href": "Untitled/Untitled.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "",
    "text": "You can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "slides/Reactivity.html#checked-sections",
    "href": "slides/Reactivity.html#checked-sections",
    "title": "Reactivity",
    "section": "",
    "text": "Create sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "Untitled/Untitled.html#reactive-elements",
    "href": "Untitled/Untitled.html#reactive-elements",
    "title": "Webexercises",
    "section": "",
    "text": "Consider this Shiny app:\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n there is a 95% probability that the true mean lies within this range 95% of the data fall within this range if you repeated the process many times, 95% of intervals calculated in this way contain the true mean"
  },
  {
    "objectID": "slides/Reactivity.html#quick-quiz",
    "href": "slides/Reactivity.html#quick-quiz",
    "title": "Reactivity",
    "section": "",
    "text": "Writing a CSV\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nQuerying a database\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nAdding two numbers\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which prints to the console\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nFetching the current temperature from an API\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nA function which sorts a list in place\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nreact()\n\n\n\nGetting a model score for a set of inputs\n\n\n\n\n\n\nAnswer:\n\n\n\n\n\nobserve()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#answer-1",
    "href": "slides/Reactivity.html#answer-1",
    "title": "Reactivity",
    "section": "",
    "text": "observe()",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-values",
    "href": "slides/Reactivity.html#reactive-values",
    "title": "Reactivity",
    "section": "",
    "text": "Reactive values exist in between sources (e.g. an input) and endpoints (e.g. an output).\nA reactive() depends on various upstream inputs and can be used to generate output.\nTheir primary use is similar to a function in an R script, they help to\n\navoid repeating yourself\ndecompose complex computations into smaller / more modular steps\ncan improve computational efficiency by breaking up / simplifying reactive dependencies\n\nHave a look at our example from the exercise above, can you see how filter(data, track == input$song_selector) was called twice in each of the render functions?",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#observe",
    "href": "slides/Reactivity.html#observe",
    "title": "Reactivity",
    "section": "",
    "text": "These are constructed in the same way as a reactive() however an observer does not return a value, rather they are used for their “side effects”.\n\nThe side effects can involve sending data to the client browser, e.g. updating a UI element\nBecause observe() is used for its side effects, you will never see XXX &lt;- observe() because observe() will never produce a value!\n\nSo key thing to remember: reactive() produces things, observe() does things.\nSome examples when you would use observe:\n\nlogging user actions\nupdating a drop down list, based on data that has been loaded\n\n\n\n\n\nWithout using observe()Using observe()\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(dplyr)\n\nLetter &lt;- c(\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\")\nSub_category &lt;- (c(\"A1\",\"A2\",\"A3\",\"B1\",\"B2\",\"B3\",\"C1\",\"C2\",\"C3\"))\ndata &lt;- data.frame(Letter, Sub_category)\n\nui &lt;- fluidPage(\n  selectInput(inputId = \"letter\", label = \"Letter:\", choices = data$Letter, selected = data$Letter[1]),\n  selectInput(inputId = \"sub\", label = \"Sub Category:\", choices = data$Sub_category, selected = data$Sub_category[1])\n)\n\nserver &lt;- function(input, output, session) {\n  observe({\n    sub_cat_vals &lt;- data %&gt;% filter(Letter == input$letter) %&gt;% select(Sub_category)\n    \n    updateSelectInput(\n      session = session, \n      inputId = \"sub\",\n      choices = sub_cat_vals,\n      selected = head(sub_cat_vals, 1)\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\nSo how can we use observe() in our previous example? Take a look at the code below:\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)),\n         month_entered = strftime(date.entered, \"%B\"))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  selectInput(\"artist_selector\", \"Select an Artist:\", choices = unique(data$artist)),\n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  sliderInput(\"week_no\", \"Week\", min = 0 , max = 52, value = c(0,52)),\n  \n  # Plot output\n  plotOutput(\"position_plot\"),\n  tableOutput('table')\n  \n)\nserver = function(input, output) {\n  \n  filtered_df &lt;- reactive({\n    req(input$song_selector)\n    data %&gt;% \n      filter(track == input$song_selector)\n  })\n  \n  observe({\n    songs = data %&gt;% \n      filter(artist == input$artist_selector) %&gt;% \n      pull(track) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    updateSelectInput(\n      inputId = \"song_selector\", \n      choices = songs\n    )\n  })\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(filtered_df(), \n             week &gt;= input$week_no[1] & week &lt;= input$week_no[2])\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n  \n  \n  # Render the plot\n  output$table &lt;- renderTable({\n    \n    filtered_df()\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\nThis observe block monitors changes in the selected artist (input$artist_selector). When a change occurs, it filters, processes, and sorts the corresponding track names from the dataset. Then, it dynamically updates the choices available in a selectInput song selector widget based on the unique and sorted track names associated with the selected artist.\nSo TLDR: observe() continually monitors for changes in the reactive change and does the action prescribed (which in this case was updating another selector).\nBecause of observe() is always constantly monitoring for changes in the environment, and reactive() values only ever gets changed if an input is changed, reactive() is known to be ‘lazy’.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#other-tips",
    "href": "slides/Reactivity.html#other-tips",
    "title": "Reactivity",
    "section": "",
    "text": "because reactivity does not determine when calculations happen, things can load at different times - i.e. the Shiny app might attempt to render tables and the UI before oauth and a DB connection is established resulting in some unsightly error messages.\nUse req() in your server functions to outline the values/objects required before the value is calculated. i.e. req(input$slider) means ‘don’t run the next bit of code unless there is a value in the slider input!’",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#week-1-homework",
    "href": "slides/Reactivity.html#week-1-homework",
    "title": "Reactivity",
    "section": "",
    "text": "Build a Shiny App using the Supermarket Sales data set available here.\nYou app must have the following:\nInputs:\n\nAbility to select branch\nAbility to select the location (options will show depending on the branch)\nAbility to select customer type\nFrom & to date\n\nOutputs:\n\nLine graph showing $ amount sold per day (remember to multiple quantity by price to get the amount)\nA simple bar graph showing different in dollar amount spent between men and women\nA table showing dollar amount spent by product type.\n\nDon’t worry too much about theming (that is for next week). But remember the foundations:\n\nwireframing\nreactive graphs (if it helps)\nreactive values so that you don’t repeat yourself\n\nI will be available during the week if you need assistance!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-7",
    "href": "slides/Basic Structure of a Shiny App.html#how-to-organise-your-directory-7",
    "title": "Basic Structure of a Shiny App",
    "section": "How to organise your directory",
    "text": "How to organise your directory\nAddition of global.R script - Any pre-processing or functions can be saved to your global.R script to be used in ui.R, server.R or app.R files. - Generally more efficient. - However, with DB connections which require oauth in the UI script, there is limited use for this.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#more-advanced-ways-of-organising-your-shiny-projects",
    "href": "slides/Basic Structure of a Shiny App.html#more-advanced-ways-of-organising-your-shiny-projects",
    "title": "Basic Structure of a Shiny App",
    "section": "More advanced ways of organising your shiny projects:",
    "text": "More advanced ways of organising your shiny projects:\nLater down the track, I would suggest looking at creating Shiny apps using the following frameworks\nGolem:\nA Framework to create modularised, scalable apps packaged up like a package! Productionising Shiny apps with Golem\nModules:\nAnother way to package up long term, scalable apps. Mastering Shiny - Packages",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html",
    "href": "slides/Shiny Layout Fundamentals.html",
    "title": "Shiny Layout Fundamentals",
    "section": "",
    "text": "fluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs\n    ),\n    mainPanel(\n      # outputs\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny\n\n\n\n\n\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\nserver &lt;- function(input, output, session) {\n  output$hist &lt;- renderPlot({\n    means &lt;- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny\n\n\n\n\nDefault column size is 12\nGood for vertical apps\n\n\n\n\n\nfluidPage() Uses the grid system, responsive to different screen sizes.\nfixedPage() has fixed maximum width, so it doesn’t stretch with bigger screens/browser windows.\nfillpage() fills up the whole browser window and resizes with the browser window.\n\n\n\n\ntabsetPanel()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Import data\", \n      fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n      textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n      numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n      numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n    ),\n    tabPanel(\"Set parameters\"),\n    tabPanel(\"Visualise results\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\nnavlistPanel()\nLike tabset panel, but runs vertically. Helps overcome string limitations from tabset panel.\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\nnavbarPage() and navbarMenu()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- navbarPage(\n  \"Page title\",   \n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html",
    "href": "slides/ShinyDashboard Framework.html",
    "title": "ShinyDashboard Framework",
    "section": "",
    "text": "is a package that enables the easy generation of bootstrap based dynamic Shiny dashboards.\nThe core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html",
    "href": "slides/FlexDashboard Framework.html",
    "title": "flexdashboard Framework",
    "section": "",
    "text": "flexdashboard is the easiest way to get started making dashboards - at its core it is an RMarkdown document template that leverages CSS flexbox (+ a lot more) to generate attractive full page layouts that are well suited for publishing multiple data visualizations and related summaries and text.\n\nDashboards are constructed using a RMarkdown document\nRow or column based layouts can be used\nStructure is specified via markdown headings\nInteractivity can be added by Shiny, but it is not required\nQuarto is not currently supported",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/Widgets.html",
    "href": "slides/Widgets.html",
    "title": "Other cool things you can do with Shiny",
    "section": "",
    "text": "This comprehensive curated list of Awesome SHiny Extensions is a good source for cool widgets and extensions to take your Shiny app to the next level!\nTip: It is easy to get carried away with all the little fun things that Shiny has to offer! Remember to keep track of time for your project, and not allow them to distract you from the final product!\nBelow are a few highlights:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorks similarly to fluidPage() in another grid type format.\n\n\n\n\n\n\n\n\n\n\n\nGreat option for carousels!\n\n\n\n\n\n\n\n\nA library of nicer looking widgets than the native built in widgets you get with the shiny package. A full demo of the library is available here.\n\n\n\n\n\n\n\n\nCollapsible shiny panels.\n\n\n\n\n\n\n\n\nCool Bootstrap 3 component - may not be compatible with bs4dash - use at your own risk!\n \n\n\n\nAllows a button for you to access and browse files on the system.\n\n\n\n\n\n\n\n\n\n\n\nAllows you to input time in HH:MM:SS format\n\n\n\n\n\n\n\n\nHas nicer select options. You can use fontawesome icons!\n\n\n\n\n\n\n\n\n #### pivta\nGreat for self service analytics projects. Allows you to have a ‘pivot table’ functionality online.\n\n\n\n\n\n\n\n\n\n\n\nLots of cool icons to add to buttons, titles…anything!\n\n\n---\ntitle: \"Font Awesome in R Markdown\"\noutput: html_document\n---\n\n\n\n# Just a few tests with `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:forestgreen;overflow:visible;position:relative;\"&gt;&lt;path d=\"M48 56c0-13.3-10.7-24-24-24S0 42.7 0 56V456c0 13.3 10.7 24 24 24s24-10.7 24-24V124.2l12.5-2.4c16.7-3.2 31.5-8.5 44.2-13.1l0 0 0 0c3.7-1.3 7.1-2.6 10.4-3.7c15.2-5.2 30.4-9.1 51.2-9.1c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c32.4 0 53.7-6.8 90.5-19.6V342.9l-9.5 3.3c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-16.8 0-31 2-43.9 5c-12.9 3-20.9 16-17.9 28.9s16 20.9 28.9 17.9c9.6-2.2 20.1-3.7 32.9-3.7c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c34.4 0 56.4-7.7 97.8-22.2c7.5-2.6 15.5-5.4 24.4-8.5l16.2-5.5V360 72 38.4L416.2 49.3c-9.7 3.3-18.2 6.3-25.7 8.9c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-27.8 0-48.5 5.5-66.6 11.6c-4.9 1.7-9.3 3.3-13.6 4.8c-11.9 4.3-22 7.9-34.7 10.3L48 75.4V56z\"/&gt;&lt;/svg&gt;`{=html}\n\nIt works well in headings...\n\n# `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H1 Heading\n\n## `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H2 Heading\n\n### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H3 Heading\n\n#### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H4 Heading\n\n##### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H5 Heading\n\n...and works equally well within inline text: `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html}.\nThe code above produces this:\n\n\n\n\n\n\n\n\nMakes ggplot a breeze!\n \n\n\n\nFantastic interactive calendar widget.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Other cool things you can do with Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "",
    "text": "Take a look at the script below:\n&lt;div class=\"header\" checked&gt;\n &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n Thank you\n&lt;/div&gt; \nThis is a very basic chunk of HTML code. HTML (Hypertext Markup Language) uses tags to structure content on web pages. Tags are enclosed in angle brackets &lt; &gt; and typically come in pairs: an opening tag and a closing tag.\nHere are some of the most common and basic HTML tags:\n&lt;html&gt;: This tag wraps the entire HTML document and signifies the start of the HTML code.\n&lt;head&gt;: This tag contains meta-information about the document, such as its title, character encoding, and links to external resources like stylesheets and scripts.\n&lt;title&gt;: This tag specifies the title of the HTML document, which appears in the browser’s title bar or tab.\n&lt;body&gt;: This tag contains the main content of the HTML document, including text, images, videos, and other elements.\n&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;: These tags create headings of different levels, where &lt;h1&gt; is the most important (usually the largest and boldest) and &lt;h6&gt; is the least important (usually the smallest).\n&lt;p&gt;: This tag defines a paragraph of text.\n&lt;a&gt;:This tag creates hyperlinks, allowing you to link to other web pages or resources. It is often used with the href attribute to specify the URL of the link.\n&lt;img&gt;:This tag embeds images in the document. It requires the src attribute to specify the URL of the image file.\n&lt;ul&gt; and &lt;ol&gt;: These tags create unordered and ordered lists, respectively. &lt;ul&gt; is for bullet-point lists, while &lt;ol&gt; is for numbered lists. List items are defined using the &lt;li&gt;tag within these list containers.\n&lt;br&gt;: This tag inserts a line break within the text.\n&lt;hr&gt;: This tag creates a horizontal line, typically used to separate content sections.\n&lt;div&gt; and &lt;span&gt;: These tags are generic containers used for grouping and styling content.\n\nis a block-level element, and  is an inline element.\n&lt;table&gt;: This tag creates a table for organizing data. Tables consist of rows (\n\n) and cells (\n\nfor regular cells,\n\nfor header cells).\nYou can use HTML directly in RMarkdown:\nExample:\nThis code below creates the chunk of text below:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\nMy first paragraph.\n\n\n\n\n\nGather Ingredients\n\n\nSpread condiments on bread\n\n\nAdd desired fillings\n\n\nPlace second slice of bread on top\n\n\nCut the sandwich in half",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/bslib.html",
    "href": "slides/bslib.html",
    "title": "bslib",
    "section": "",
    "text": "Last week we looked at flexdashboard and shinydashboard. Another option is bslib.\nThe bslib R package provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap. It facilitates:",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/Connecting to external data sources.html",
    "href": "slides/Connecting to external data sources.html",
    "title": "Connecting to external data sources",
    "section": "",
    "text": "Content will be published on the 15th of February 2024.",
    "crumbs": [
      "Home",
      "Database connections",
      "Connecting to external data sources"
    ]
  },
  {
    "objectID": "slides/Handling errors and debugging.html",
    "href": "slides/Handling errors and debugging.html",
    "title": "Handling errors and debugging",
    "section": "",
    "text": "Content will be published on the 15th of February 2024.",
    "crumbs": [
      "Home",
      "Errors and debugging",
      "Handling errors and debugging"
    ]
  },
  {
    "objectID": "index.html#initial-state",
    "href": "index.html#initial-state",
    "title": "Welcome to Shiny 101!",
    "section": "Initial state",
    "text": "Initial state\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#calculate-scatter-plot",
    "href": "index.html#calculate-scatter-plot",
    "title": "Welcome to Shiny 101!",
    "section": "Calculate scatter plot",
    "text": "Calculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#calculate-scatter-plot-1",
    "href": "index.html#calculate-scatter-plot-1",
    "title": "Welcome to Shiny 101!",
    "section": "Calculate scatter plot",
    "text": "Calculate scatter plot\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#calculate-distribution",
    "href": "index.html#calculate-distribution",
    "title": "Welcome to Shiny 101!",
    "section": "Calculate distribution",
    "text": "Calculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#calculate-distribution-1",
    "href": "index.html#calculate-distribution-1",
    "title": "Welcome to Shiny 101!",
    "section": "Calculate distribution",
    "text": "Calculate distribution\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#reactive-graph",
    "href": "index.html#reactive-graph",
    "title": "Welcome to Shiny 101!",
    "section": "Reactive graph",
    "text": "Reactive graph\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#slider-changes",
    "href": "index.html#slider-changes",
    "title": "Welcome to Shiny 101!",
    "section": "Slider changes",
    "text": "Slider changes\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#invalidated",
    "href": "index.html#invalidated",
    "title": "Welcome to Shiny 101!",
    "section": "Invalidated",
    "text": "Invalidated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#forget-dependencies",
    "href": "index.html#forget-dependencies",
    "title": "Welcome to Shiny 101!",
    "section": "Forget dependencies",
    "text": "Forget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate",
    "href": "index.html#recalculate",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate-1",
    "href": "index.html#recalculate-1",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate-2",
    "href": "index.html#recalculate-2",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate-3",
    "href": "index.html#recalculate-3",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#updated",
    "href": "index.html#updated",
    "title": "Welcome to Shiny 101!",
    "section": "Updated",
    "text": "Updated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#checkbox-changes",
    "href": "index.html#checkbox-changes",
    "title": "Welcome to Shiny 101!",
    "section": "Checkbox changes",
    "text": "Checkbox changes\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#invalidated-1",
    "href": "index.html#invalidated-1",
    "title": "Welcome to Shiny 101!",
    "section": "Invalidated",
    "text": "Invalidated\n\n\n\n\n\nflowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#forget-dependencies-1",
    "href": "index.html#forget-dependencies-1",
    "title": "Welcome to Shiny 101!",
    "section": "Forget dependencies",
    "text": "Forget dependencies\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate-4",
    "href": "index.html#recalculate-4",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#recalculate-5",
    "href": "index.html#recalculate-5",
    "title": "Welcome to Shiny 101!",
    "section": "Recalculate",
    "text": "Recalculate\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "index.html#updated-1",
    "href": "index.html#updated-1",
    "title": "Welcome to Shiny 101!",
    "section": "Updated",
    "text": "Updated\n\n\n\n\n\nflowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "How this course will work",
      "Welcome to Shiny 101!"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#initial-state",
    "href": "slides/Reactivity.html#initial-state",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#calculate-scatter-plot",
    "href": "slides/Reactivity.html#calculate-scatter-plot",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#calculate-scatter-plot-1",
    "href": "slides/Reactivity.html#calculate-scatter-plot-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#calculate-distribution",
    "href": "slides/Reactivity.html#calculate-distribution",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#calculate-distribution-1",
    "href": "slides/Reactivity.html#calculate-distribution-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#reactive-graph",
    "href": "slides/Reactivity.html#reactive-graph",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n    Sl[Slider]  --&gt; Sc \n  Sl --&gt; M((Dist Plot))",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#slider-changes",
    "href": "slides/Reactivity.html#slider-changes",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#invalidated",
    "href": "slides/Reactivity.html#invalidated",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#forget-dependencies",
    "href": "slides/Reactivity.html#forget-dependencies",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate",
    "href": "slides/Reactivity.html#recalculate",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate-1",
    "href": "slides/Reactivity.html#recalculate-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate-2",
    "href": "slides/Reactivity.html#recalculate-2",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate-3",
    "href": "slides/Reactivity.html#recalculate-3",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#updated",
    "href": "slides/Reactivity.html#updated",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#checkbox-changes",
    "href": "slides/Reactivity.html#checkbox-changes",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#invalidated-1",
    "href": "slides/Reactivity.html#invalidated-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox]:::changed --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#forget-dependencies-1",
    "href": "slides/Reactivity.html#forget-dependencies-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate-4",
    "href": "slides/Reactivity.html#recalculate-4",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#recalculate-5",
    "href": "slides/Reactivity.html#recalculate-5",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#updated-1",
    "href": "slides/Reactivity.html#updated-1",
    "title": "Reactivity",
    "section": "",
    "text": "flowchart TD\n  C[Checkbox] --&gt; Sc((Scatter\\nPlot))\n  Sl[Slider] --&gt; Sc \n  Sl --&gt; M((Dist Plot))\n  \n  classDef changed fill:#f96\n\n\n\n\n\n\nHow do other frameworks work?\n\nStreamlit: re-render everything everywhere all the time\nDash/Panel/Gradio: Define callback functions",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#take-the-exampe-app-below",
    "href": "slides/Reactivity.html#take-the-exampe-app-below",
    "title": "Reactivity",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary()\n\ndata = tidyr::billboard %&gt;% \n  gather(key = \"week\", value = \"position\", starts_with(\"wk\")) %&gt;% \n  mutate(week = as.numeric(gsub(\"wk\", \"\", week)))\n\nui = fluidPage(\n  titlePanel(\"Billboard song ranking\"),\n  \n  selectInput(\"song_selector\", \"Select a Song:\", choices = unique(data$track)),\n  \n  # Plot output\n  plotOutput(\"position_plot\")\n  \n)\nserver = function(input, output) {\n  \n  # Render the plot\n  output$position_plot &lt;- renderPlot({\n    \n    # Filter data based on user selection\n    selected_song_data &lt;- reactive({\n      filter(data, track == input$song_selector)\n    })\n    \n    ggplot(selected_song_data(), aes(x = week, y = position)) +\n      geom_line() +\n      labs(title = paste(\"Position of\", input$song_selector, \"over Weeks\"),\n           x = \"Week\",\n           y = \"Position\") +\n      scale_y_reverse(limits = c(100, 0))\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#sidebar-layout",
    "href": "slides/Shiny Layout Fundamentals.html#sidebar-layout",
    "title": "Shiny Layout Fundamentals",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n\n\n\nfluidPage(\n  titlePanel(\n    # app title/description\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      # inputs\n    ),\n    mainPanel(\n      # outputs\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nFrom Mastering Shiny",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multi-row-layout",
    "href": "slides/Shiny Layout Fundamentals.html#multi-row-layout",
    "title": "Shiny Layout Fundamentals",
    "section": "Multi-row layout",
    "text": "Multi-row layout\n\n\n\n\n\n\n\nFrom Mastering Shiny",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#other-layouts",
    "href": "slides/Shiny Layout Fundamentals.html#other-layouts",
    "title": "Shiny Layout Fundamentals",
    "section": "Other layouts",
    "text": "Other layouts\n\nTabsets\n\nsee tabsetPanel()\n\nNavbars and navlists\n\nSee navlistPanel()\nand navbarPage()\n\nDashboards\n\nflexdashboard\nShinydashboard\nbslib",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#shiny-widgets-gallery",
    "href": "slides/Shiny Layout Fundamentals.html#shiny-widgets-gallery",
    "title": "Shiny Layout Fundamentals",
    "section": "Shiny Widgets Gallery",
    "text": "Shiny Widgets Gallery\n\nhttps://shiny.posit.co/r/gallery/widgets/widget-gallery/",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#other-widgets",
    "href": "slides/Shiny Layout Fundamentals.html#other-widgets",
    "title": "Shiny Layout Fundamentals",
    "section": "Other widgets",
    "text": "Other widgets",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#flexdashboard",
    "href": "slides/FlexDashboard Framework.html#flexdashboard",
    "title": "flexdashboard Framework",
    "section": "",
    "text": "flexdashboard is the easiest way to get started making dashboards - at its core it is an RMarkdown document template that leverages CSS flexbox (+ a lot more) to generate attractive full page layouts that are well suited for publishing multiple data visualizations and related summaries and text.\n\nDashboards are constructed using a RMarkdown document\nRow or column based layouts can be used\nStructure is specified via markdown headings\nInteractivity can be added by Shiny, but it is not required\nQuarto is not currently supported",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-02---a-basic-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo-02---a-basic-flexdashboard",
    "title": "FlexDashboard Framework",
    "section": "Demo 02 - A basic flexdashboard",
    "text": "Demo 02 - A basic flexdashboard\n\n demos/demo02.Rmd\n\n---\ntitle: \"Demo 02\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n---\n\n```{r global}\n#| include: false\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_city = d |&gt;\n  filter(city %in% \"Chicago\")\n```\n\nRow {data-height=650}\n-------------------------------------\n\n### Temperature\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=temp)) +\n  geom_line()\n```\n\nRow {data-height=350}\n-------------------------------------\n   \n### Humidity\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=humidity)) +\n  geom_line()\n```   \n\n###\n\n```{r}\nd_city |&gt;\n  mutate(\n    day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n    date = as.character(lubridate::date(time))\n  ) |&gt;\n  group_by(date, day) |&gt;\n  summarize(\n    `min` = min(temp),\n    `max` = max(temp),\n    .groups = \"drop\"\n  ) |&gt;\n  knitr::kable()\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn---exercise-02",
    "href": "slides/FlexDashboard Framework.html#your-turn---exercise-02",
    "title": "FlexDashboard Framework",
    "section": "Your turn - Exercise 02",
    "text": "Your turn - Exercise 02\nOpen exercises/ex02.Rmd, which contains the code from the previous slide, and try knitting it.\nCheck that you are able to successfully render the flexdashboard.\nIf everything is working try modifying the code:\n\nWhat happens if you remove orientation: rows from the front matter?\nWhat happens if you change the Row text?\nWhat happens if you change or remove {data-height=*}?\n\n\n\n\n−+\n05:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#default",
    "href": "slides/FlexDashboard Framework.html#default",
    "title": "flexdashboard Framework",
    "section": "Default",
    "text": "Default\n\n\n---\ntitle: \"Default layout\"\noutput: flexdashboard::flex_dashboard\n---\n\n### Chart 1\n\n```{r}\n\n```\n\n### Chart 2\n\n```{r}\n\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#column-layout",
    "href": "slides/FlexDashboard Framework.html#column-layout",
    "title": "flexdashboard Framework",
    "section": "Column layout",
    "text": "Column layout\n\n\n---\ntitle: \"Column layout\"\noutput: flexdashboard::flex_dashboard\n---\n    \nColumn\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#row-layout",
    "href": "slides/FlexDashboard Framework.html#row-layout",
    "title": "flexdashboard Framework",
    "section": "Row layout",
    "text": "Row layout\n\n\n---\ntitle: \"Row layout\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n---\n    \nRow\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n \n### Chart 2\n    \n```{r}\n``` \n\nRow\n-------------------------------------\n    \n### Chart 3\n    \n```{r}\n```\n    \n### Chart 4\n\n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#sidebar-layout",
    "href": "slides/FlexDashboard Framework.html#sidebar-layout",
    "title": "flexdashboard Framework",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n\n\n---\ntitle: \"Sidebar layout\"\noutput: flexdashboard::flex_dashboard\n---\n\nInputs {.sidebar}\n-------------------------------------\n\n```{r}\n```\n \nColumn\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n    \n### Chart 2\n\n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#tabset-layout",
    "href": "slides/FlexDashboard Framework.html#tabset-layout",
    "title": "flexdashboard Framework",
    "section": "Tabset layout",
    "text": "Tabset layout\n\n\n---\ntitle: \"Tabset layout\"\noutput: flexdashboard::flex_dashboard\n---\n    \nColumn \n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn {.tabset}\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#multipage-layout",
    "href": "slides/FlexDashboard Framework.html#multipage-layout",
    "title": "flexdashboard Framework",
    "section": "Multipage layout",
    "text": "Multipage layout\n---\ntitle: \"Multipage layout\"\noutput: flexdashboard::flex_dashboard\n---\n\nPage 1\n=====================================  \n    \nColumn {data-width=600}\n-------------------------------------\n    \n### Chart 1\n    \n```{r}\n```\n   \nColumn {data-width=400}\n-------------------------------------\n   \n### Chart 2\n\n```{r}\n```   \n \n### Chart 3\n    \n```{r}\n```\n\nPage 2 {data-orientation=rows}\n=====================================     \n   \nRow {data-height=600}\n-------------------------------------\n\n### Chart 4\n\n```{r}\n```\n\nRow {data-height=400}\n-------------------------------------\n   \n### Chart 5\n\n```{r}\n```   \n    \n### Chart 6\n\n```{r}\n```\n\n\nhttps://pkgs.rstudio.com/flexdashboard/articles/examples.html | CRAN Downloads",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#storyboard-layout",
    "href": "slides/FlexDashboard Framework.html#storyboard-layout",
    "title": "flexdashboard Framework",
    "section": "Storyboard layout",
    "text": "Storyboard layout\n---\ntitle: \"Storyboard layout\"\noutput: \n  flexdashboard::flex_dashboard:\n    storyboard: true\n---\n\n### Frame 1\n\n```{r}\n```\n\n*** \n\nSome commentary about Frame 1.\n\n### Frame 2 {data-commentary-width=400}\n\n```{r}\n```\n\n*** \n\nSome commentary about Frame 2.\n\n\nhttps://pkgs.rstudio.com/flexdashboard/articles/examples.html | htmlwidgets showcase",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#markdown-to-layout",
    "href": "slides/FlexDashboard Framework.html#markdown-to-layout",
    "title": "flexdashboard Framework",
    "section": "Markdown to layout",
    "text": "Markdown to layout\nFrom the preceding examples it is relatively straightforward to see how markdown is translated into the flexdashboard’s layout,\n\n\n\n\n\n\n\n\n\nHeading\nPurpose\n\n\n\n\nLevel 1\n# or =======\nPages\n\n\nLevel 2\n## or ------\nColumns or rows1\n\n\nLevel 3\n###\nChart or output elements2\n\n\nHorizontal Rules\n***, ---, or ___\nSeparate chart from commentary3",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#heading-options",
    "href": "slides/FlexDashboard Framework.html#heading-options",
    "title": "flexdashboard Framework",
    "section": "Heading options",
    "text": "Heading options\nYou may have noticed certain headings were given additional attributes via arguments wrapped in {}. These are CSS attributes that modify the display behavior of the elements they are attached to. Some common attribues,\n\ndata-height and data-width control the relative size of elements\ndata-padding or .no-padding control the padding around elements in pixels\ndata-orientation can be applied to pages to alter the orientation for a specific page\n.tabset indicates a column or row should be composed on tabset elements\n.sidebar indicates a sidebar should be included (local or global)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#some-useful-document-options",
    "href": "slides/FlexDashboard Framework.html#some-useful-document-options",
    "title": "flexdashboard Framework",
    "section": "Some useful document options",
    "text": "Some useful document options\nIn the previous layout examples we saw the used some document options in the front matter, a couple of commonly used options that are worth knowning about:\n\norientation - default is columns, determines element layout orientation\nvertical_layout - default is fill but scroll can be used to extend the viewable area\nself_contained - default is TRUE, embeds all assessts within the html document (e.g. scripts, stylesheets, images, and videos)\ntheme - specifies a theme to use for styling (more on this later)\nnavbar - constructs a navigation bar at the top of the screen",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn---exercise-03",
    "href": "slides/FlexDashboard Framework.html#your-turn---exercise-03",
    "title": "FlexDashboard Framework",
    "section": "Your turn - Exercise 03",
    "text": "Your turn - Exercise 03\nWe’ve just seen a number of possible layout methods for a flexdashboard, lets return to the code we’ve seen previously, provided in exercises/ex03.Rmd, and try changing layout more purposefully this time (e.g. a column, multipage, or storyboard layout).\nUse this time to experiment with the different layout options and see what seems to work best.\n\nTry out a multipage or storyboard layout\nTry making a reasonable looking column layout\n\n\n\n\n−+\n05:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#parameterized-reports",
    "href": "slides/FlexDashboard Framework.html#parameterized-reports",
    "title": "FlexDashboard Framework",
    "section": "Parameterized reports",
    "text": "Parameterized reports\nBecause flexdashboards are just RMarkdown documents - we can leverage the parameterized reports functionality to pass in arguments (e.g. choice of city) while still keeping the final document static.\nThis is done by declaring the parameters in the front matter using the params field.\n---\n...\nparams:\n  city: \"Los Angeles\"\n---\nThe values are then accessed via a read-only list called params within the report’s R chunks.\nparams$city\n\n\nSee Chapter 15 of R Markdown: The Definitive Guide by Xie, Alliare, & Grolemund",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-03---part-1",
    "href": "slides/FlexDashboard Framework.html#demo-03---part-1",
    "title": "FlexDashboard Framework",
    "section": "Demo 03 - Part 1",
    "text": "Demo 03 - Part 1\n\n demos/demo03-1.Rmd\n\n---\ntitle: \"Demo 03 - Part 1\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\nparams:\n  city: \"Los Angeles\"\n---\n\n```{r setup}\n#| include: false\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_city = d |&gt;\n  filter(city %in% params$city)\n```\n\nRow {data-height=650}\n-------------------------------------\n\n### Temperature\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=temp)) +\n  ggtitle(params$city) + \n  geom_line()\n```\n\nRow {data-height=350}\n-------------------------------------\n   \n### Humidity\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=humidity)) +\n  geom_line()\n```   \n\n###\n\n```{r}\nd_city |&gt;\n  mutate(\n    day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n    date = as.character(lubridate::date(time))\n  ) |&gt;\n  group_by(date, day) |&gt;\n  summarize(\n    `min` = min(temp),\n    `max` = max(temp),\n    .groups = \"drop\"\n  ) |&gt;\n  knitr::kable()\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-03---part-2",
    "href": "slides/FlexDashboard Framework.html#demo-03---part-2",
    "title": "FlexDashboard Framework",
    "section": "Demo 03 - Part 2",
    "text": "Demo 03 - Part 2\n\n demos/demo03-2.Rmd\n\n---\ntitle: \"Demo 03 - Part 2\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\nparams:\n  city:\n    label: \"City\"\n    value: \"Chicago\"\n    input: select\n    choices: [\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \n              \"Los Angeles\", \"Seattle\", \"Omaha\"]\n---\n\n```{r setup}\n#| include: false\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_city = d |&gt;\n  filter(city %in% params$city)\n```\n\nRow {data-height=650}\n-------------------------------------\n\n### Temperature\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=temp)) +\n  ggtitle(params$city) + \n  geom_line()\n```\n\nRow {data-height=350}\n-------------------------------------\n   \n### Humidity\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=humidity)) +\n  geom_line()\n```   \n\n###\n\n```{r}\nd_city |&gt;\n  mutate(\n    day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n    date = as.character(lubridate::date(time))\n  ) |&gt;\n  group_by(date, day) |&gt;\n  summarize(\n    `min` = min(temp),\n    `max` = max(temp),\n    .groups = \"drop\"\n  ) |&gt;\n  knitr::kable()\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#shiny",
    "href": "slides/FlexDashboard Framework.html#shiny",
    "title": "flexdashboard Framework",
    "section": "Shiny",
    "text": "Shiny\nWe can use Shiny components and reactivity in a flexdashboard (or any html output based RMarkdown document) by including runtime: shiny in the front matter.\nThis results in the document being served by shiny (which has implications for sharing and publishing)\n\n\nFor flexdashboard’s using shiny you will often see a special global chunk which is responsible for loading data. This is a special feature of runtime: shiny designed to improve startup performance for multi-user shiny documents.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-04---shiny-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo-04---shiny-flexdashboard",
    "title": "FlexDashboard Framework",
    "section": "Demo 04 - shiny + flexdashboard",
    "text": "Demo 04 - shiny + flexdashboard\n\n demos/demo04.Rmd\n\n---\ntitle: \"Demo 04\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\n\nInputs {.sidebar}\n-------------------------------------\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nselectInput(\n  \"var\", \"Select a variable\",\n  choices = d_vars, selected = \"humidity\"\n)\n```\n\n\nCol\n-------------------------------------\n\n### Temperature\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    ggtitle(input$city) + \n    geom_line()\n})\n```\n\nCol\n-------------------------------------\n   \n### Other\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=.data[[input$var]])) +\n    geom_line()\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn---exercise-04",
    "href": "slides/FlexDashboard Framework.html#your-turn---exercise-04",
    "title": "FlexDashboard Framework",
    "section": "Your turn - Exercise 04",
    "text": "Your turn - Exercise 04\nThe shiny inputs do not need to live in a sidepanel - try rewriting Demo 04’s code such that the inputs for city and variable are located within the temperature and other elements respectively.\nThe base code is provided in exercises/ex04.Rmd, if you have extra time try playing around with the specific positioning of the input elements.\n\nHint - if you are having difficulty with your plots fitting on screen you can adjust their size via renderPlot()s width and height arguments.\n\n\n\n\n−+\n05:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#components",
    "href": "slides/FlexDashboard Framework.html#components",
    "title": "flexdashboard Framework",
    "section": "Components",
    "text": "Components\nflexdashboard provides two built-in html components that can be included in your dashboard:\n\nValue boxes:\n\n\n\n\n\nGauges:",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#implementation",
    "href": "slides/FlexDashboard Framework.html#implementation",
    "title": "flexdashboard Framework",
    "section": "Implementation",
    "text": "Implementation\nEither component can be included in the dashboard with a static value via directly calling valueBox() or gauge()\n\nShiny reactive variants can be implemented using valueBoxOutput() with renderValueBox() or gaugeOutput() with renderGauge()\nBoth components take a color argument, this can be either\n\nOne of the standard bootstrap theme color names (i.e. “success”, “warning”, “danger”, “primary”, or “info”)\nor any other valid CSS color specifier\n\nValue box icons should use names from Font Awesome, Ionicons, or Bootstrap Glyphicons",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-05---components",
    "href": "slides/FlexDashboard Framework.html#demo-05---components",
    "title": "FlexDashboard Framework",
    "section": "Demo 05 - Components",
    "text": "Demo 05 - Components\n\n demos/demo05.Rmd\n\n---\ntitle: \"Demo 05 - value boxes and gauges\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    geom_line()\n}, height = 600)\n```\n\nCol {data-width=200}\n-------------------------------------\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_city()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn---exercise-05",
    "href": "slides/FlexDashboard Framework.html#your-turn---exercise-05",
    "title": "FlexDashboard Framework",
    "section": "Your turn - Exercise 05",
    "text": "Your turn - Exercise 05\nModify the code provide in ex05.Rmd (based on demo05.R) so that the user is able to select different data features (e.g. humidity, feelslike, etc.) and have that change reflected in the plot, value boxes, and gauges.\n\nSome guidance:\n\nThink about the choice of components given the additional flexibility we have added\n\nWith that in mind think about the properties of the components\n\nIf you want to add reactive text to a heading you use an inline code chunk, e.g.\n### `r renderText(input$x)`\n\n\n\n\n\n−+\n08:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#linked-brushing",
    "href": "slides/FlexDashboard Framework.html#linked-brushing",
    "title": "flexdashboard Framework",
    "section": "Linked brushing",
    "text": "Linked brushing\nThis has nothing in particular to do with flexdashboard but is a super useful Shiny technique for improving interactivity.\nShiny’s plotOutput()s can also be used to generate inputs based on user click events. Here we are using the brush rectangular selection to subset the data and then updating the relevant components.\n\n\nFor more technical details on how all of this works see Chapter 7 of Mastering Shiny.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo-06---linked-brushing",
    "href": "slides/FlexDashboard Framework.html#demo-06---linked-brushing",
    "title": "FlexDashboard Framework",
    "section": "Demo 06 - Linked brushing",
    "text": "Demo 06 - Linked brushing\n\n demos/demo06.Rmd\n\n---\ntitle: \"Demo 06 - Linked brushing\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n\nd_selected = reactive({\n  db = shiny::brushedPoints(d_city(), input$plot_brush)\n  if (nrow(db) == 0)\n    db = d_city()\n  db\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot(\n  {\n    d_city() |&gt;\n      ggplot(aes(x=time, y=temp)) +\n      geom_line()\n  },\n  outputArgs = list(\n    brush = shiny::brushOpts(id = \"plot_brush\")\n  ),\n  height = 600\n)\n```\n\nCol {data-width=200}\n-------------------------------------\n   \n   \n### Starting time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    min(d_selected()$time),\n    caption = \"Starting time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Ending time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    max(d_selected()$time),\n    caption = \"Ending time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_selected()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "FlexDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#shinydashboard",
    "href": "slides/ShinyDashboard Framework.html#shinydashboard",
    "title": "ShinyDashboard Framework",
    "section": "",
    "text": "is a package that enables the easy generation of bootstrap based dynamic Shiny dashboards.\nThe core of the package is a common dashboard layout and a number of specialized UI elements (static and reactive) for creating an attractive interface.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-basics",
    "href": "slides/ShinyDashboard Framework.html#dashboard-basics",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard basics",
    "text": "Dashboard basics\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(),\n    dashboardBody()\n  ),\n  server = function(input, output, session) {\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-header",
    "href": "slides/ShinyDashboard Framework.html#dashboard-header",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard header",
    "text": "Dashboard header\nThis is a container for the title and any dropdownMenu()s\n\nthe latter are somewhat limited, support “messages”, “notifications”, “tasks” types\nDynamic menus can be generated using dropdownMenuOutput() and renderMenu() in the ui and server respectively.\n\n\n\nMessages:\n\n\n\nNotifications:\n\n\n\nTasks:",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#dashboard-sidebar",
    "href": "slides/ShinyDashboard Framework.html#dashboard-sidebar",
    "title": "ShinyDashboard Framework",
    "section": "Dashboard sidebar",
    "text": "Dashboard sidebar\nThis functions in the same way as the sidebarPanel() in sidebarLayout(), allowing for the inclusion of inputs and any other html content.\nAlternatively, it can also function as a tabPanel() like menu.\n\ninstead of tabsetPanel() we use sidebarMenu(),\ntext and icons are assigned using menuItem()\nthe panels being activated are contained in the body and not the sidebar\n\ntheir UI code goes under dashboardBody() using tabItems() and tabItem().\nmenuItem()s are connected to tabItems() via matching the tabName arguments.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo-07-1---sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo-07-1---sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo 07-1 - sidebarMenu()",
    "text": "Demo 07-1 - sidebarMenu()\n\n demos/demo07-1.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenu(\n        menuItem(\n          \"Temperature\", \n          tabName = \"temp\", \n          icon = icon(\"thermometer-half\")\n        ),\n        menuItem(\n          \"Other\", \n          tabName = \"other\"\n        )\n      )\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo-07-2---dynamic-sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo-07-2---dynamic-sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo 07-2 - Dynamic sidebarMenu()",
    "text": "Demo 07-2 - Dynamic sidebarMenu()\n\n demos/demo07-2.R\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenuOutput(\"menu\")\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$menu = renderMenu(\n      sidebarMenu(\n        menuItem(\"Temperature\", tabName = \"temp\", icon = icon(\"thermometer-half\")),\n        menuItem(input$var, tabName = \"other\")\n      )\n    )\n    \n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#body-building-blocks",
    "href": "slides/ShinyDashboard Framework.html#body-building-blocks",
    "title": "ShinyDashboard Framework",
    "section": "Body building blocks",
    "text": "Body building blocks\n\n\n\nbox()\n \n\n\n\ninfoBox()\n\n\n\n\n\n\n\n\nvalueBox()",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#colors",
    "href": "slides/ShinyDashboard Framework.html#colors",
    "title": "ShinyDashboard Framework",
    "section": "Colors",
    "text": "Colors\nThe color of the various boxes is specified via status or background for box() or color for the others.\nAvailable options include,\n\nshinydashboard:::validStatuses\n\n[1] \"primary\" \"success\" \"info\"    \"warning\" \"danger\" \n\n\n\n\nshinydashboard:::validColors\n\n [1] \"red\"        \"yellow\"     \"aqua\"       \"blue\"       \"light-blue\"\n [6] \"green\"      \"navy\"       \"teal\"       \"olive\"      \"lime\"      \n[11] \"orange\"     \"fuchsia\"    \"purple\"     \"maroon\"     \"black\"",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#body-layout",
    "href": "slides/ShinyDashboard Framework.html#body-layout",
    "title": "ShinyDashboard Framework",
    "section": "Body layout",
    "text": "Body layout\n\nThe layout of box elements on a dashboard is controlled by combining fluidRow() and column() (as is standard with regular shiny apps)\n\nthis layout is based on a page having width of 12 units\ncolumn() and box() elements take a width argument using these units\n\n\n\n\nRow-based layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    box(title = \"Box title\", ...),\n    box(...)\n  ),\n\n  fluidRow(\n    box(title = \"Title 1\", ...),\n    box(title = \"Title 2\", ...),\n    box(title = \"Title 3\", ...)\n  ),\n\n  fluidRow(\n    box(...),\n    box(title = \"Title 5\", ...),\n    box(title = \"Title 6\", ...)\n  )\n)\n\n\n\n\nColumn-based layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    column(width = 4,\n      box(title = \"Box title\", ...),\n      box(title = \"Title 1\", ...),\n      box(...)\n    ),\n    column(width = 4,\n      box(...),\n      box(title = \"Title 3\", ...),\n      box(title = \"Title 5\", ...)\n    ),\n    column(width = 4,\n      box(title = \"Title 2\", ...),\n      box(title = \"Title 6\", ...)\n    )\n  )\n)\n\n\n\n\nMixed layout\n\n\n\n\n\n\n\n\ndashboardBody(\n  fluidRow(\n    box(title = \"Box title\", ...),\n    box(...)\n  ),\n  fluidRow(\n    column(width = 4,\n      box(title = \"Title 1\", ...),\n      box(...)\n    ),\n    column(width = 4,\n      box(title = \"Title 3\", ...),\n      box(title = \"Title 5\", ...)\n    ),\n    column(width = 4,\n      box(title = \"Title 2\", ...),\n      box(title = \"Title 6\", ...)\n    )\n  )\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#your-turn---exercise-06",
    "href": "slides/ShinyDashboard Framework.html#your-turn---exercise-06",
    "title": "ShinyDashboard Framework",
    "section": "Your turn - Exercise 06",
    "text": "Your turn - Exercise 06\nStarting with the app from Demo 05 convert the app to use shinydashboard instead of flexdashboard - we have provided some basic scaffolding shinydashboard code in exercises/ex06.R and the demo code in exercises/ex06.Rmd.\nTry to preserve the column-based layout and general proportions (i.e. column widths) of the original.\nSince shinydashboard does not have a gauge element you can use a value box for everything - If you’re feeling adventurous try using a flexdashboard gauge in your shinydashboard, what happens?\n#| echo: false countdown::countdown(10)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo---sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo---sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo - sidebarMenu()",
    "text": "Demo - sidebarMenu()\n\nUse the provided weather.csv file and run the following script:\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenu(\n        menuItem(\n          \"Temperature\", \n          tabName = \"temp\", \n          icon = icon(\"thermometer-half\")\n        ),\n        menuItem(\n          \"Other\", \n          tabName = \"other\"\n        )\n      )\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#demo---dynamic-sidebarmenu",
    "href": "slides/ShinyDashboard Framework.html#demo---dynamic-sidebarmenu",
    "title": "ShinyDashboard Framework",
    "section": "Demo - Dynamic sidebarMenu()",
    "text": "Demo - Dynamic sidebarMenu()\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(shinydashboard)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      ),\n      sidebarMenuOutput(\"menu\")\n    ),\n    dashboardBody(\n      tabItems(\n        tabItem(\n          \"temp\", \n          plotOutput(\"plot_temp\")\n        ),\n        tabItem(\n          \"other\", \n          plotOutput(\"plot_other\")\n        )\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$menu = renderMenu(\n      sidebarMenu(\n        menuItem(\"Temperature\", tabName = \"temp\", icon = icon(\"thermometer-half\")),\n        menuItem(input$var, tabName = \"other\")\n      )\n    )\n    \n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp)) +\n        ggtitle(\"Temperature\") +\n        geom_line()\n    })\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]])) +\n        ggtitle(input$var) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---bslib-dashboard",
    "href": "slides/bslib.html#demo---bslib-dashboard",
    "title": "bslib",
    "section": "Demo - bslib dashboard",
    "text": "Demo - bslib dashboard\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n        selected = \"Chicago\", multiple = TRUE\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      )\n    ),\n    card(\n      card_header(\"Temperature\"), \n      plotOutput(\"plot_temp\")\n    ),\n    card(\n      card_header(\n        textOutput(\"header_other\")\n      ),\n      plotOutput(\"plot_other\")\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#layouts",
    "href": "slides/bslib.html#layouts",
    "title": "bslib",
    "section": "Layouts",
    "text": "Layouts\nAs we’ve just seen the basic layout of elements is to place each element on its own row (e.g. each card in Demo 11).\nColumns can be constructed using layout_columns() (or layout_columns_wrap()) where each element is a column\n\nColumns will have equal width by default\ncol_widths can be used to specify width (in terms of bootstrap columns)\nTotal widths &gt;12 will result in multiple rows\nNegative widths result in empty columns\nlayout_columns() can be nested inside other layout_columns() for mixed layouts\n\n\n\nTo get the most out of bslib it is important to wrap your head around filling layouts",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---layout",
    "href": "slides/bslib.html#demo---layout",
    "title": "bslib",
    "section": "Demo - layout",
    "text": "Demo - layout\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(\n      selectInput(\n        \"city\", \"Select a city\",\n        choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n        selected = \"Chicago\", multiple = TRUE\n      ),\n      selectInput(\n        \"var\", \"Select a variable\",\n        choices = d_vars, selected = \"humidity\"\n      )\n    ),\n    layout_columns(\n      col_widths = c(10,2,-1,10,-1),\n      card(\n        card_header(\"Temperature\"), \n        plotOutput(\"plot_temp\")\n      ),\n      list(\n        value_box(\n          title = \"Min temp\",\n          value = textOutput(\"min_temp\"),\n          showcase = bsicons::bs_icon(\"thermometer-low\"),\n          theme_color = \"primary\"\n        ),\n        value_box(\n          title = \"Max temp\",\n          value = textOutput(\"max_temp\"),\n          showcase = bsicons::bs_icon(\"thermometer-high\"),\n          theme_color = \"danger\"\n        )\n      ),\n      card(\n        card_header(\n          textOutput(\"header_other\")\n        ),\n        plotOutput(\"plot_other\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$min_temp = renderText({min(d_city()$temp)})\n    output$max_temp = renderText({max(d_city()$temp)})\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#demo---other-components",
    "href": "slides/bslib.html#demo---other-components",
    "title": "bslib",
    "section": "Demo - other components",
    "text": "Demo - other components\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\n\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nshinyApp(\n  ui = page_sidebar(\n    title = \"bslib dashboard\",\n    sidebar = sidebar(open=FALSE),\n    card(\n      card_header(\n        \"Temperature\",\n        popover(\n          bsicons::bs_icon(\"gear\"),\n          title = \"Input controls\",\n          selectInput(\n            \"city\", \"Select a city\",\n            choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\"),\n            selected = \"Chicago\", multiple = TRUE\n          )\n        )\n      ), \n      plotOutput(\"plot_temp\")\n    ),\n    card(\n      card_header(textOutput(\"header_other\")),\n      layout_sidebar(\n        sidebar = sidebar(\n          position = \"right\", open = FALSE,\n          selectInput(\n            \"var\", \"Select a variable\",\n            choices = d_vars, selected = \"humidity\"\n          )\n        ),\n        plotOutput(\"plot_other\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    d_city = reactive({\n      d |&gt;\n        filter(city %in% input$city)\n    })\n    \n    output$plot_temp = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=temp, color=city)) +\n        geom_line()\n    })\n    \n    output$header_other = renderText({input$var})\n    \n    output$plot_other = renderPlot({\n      d_city() |&gt;\n        ggplot(aes(x=time, y=.data[[input$var]], color=city)) +\n        geom_line()\n    })\n  }\n)\n\n\n\n\n\n\nMore demos of the full bslib capability is available on the documentation here.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/bslib.html#your-turn---faithful-makeover",
    "href": "slides/bslib.html#your-turn---faithful-makeover",
    "title": "bslib",
    "section": "Your Turn - Faithful Makeover",
    "text": "Your Turn - Faithful Makeover\nCreate a new Shiny app using RStudio’s Create Shiny App template. You can call the app exercises/makeover.\nYour task is to re-design the starting shiny template app using bslib. Here are some functions to try:\n\npage_*()\nlayout_sidebar()\nlayout_columns()\ncard()\nvalue_box()",
    "crumbs": [
      "Home",
      "Aesthetics",
      "bslib"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#sidebar-layout-1",
    "href": "slides/Shiny Layout Fundamentals.html#sidebar-layout-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Sidebar layout",
    "text": "Sidebar layout\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples:\", 2, min = 1, max = 100)\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\nserver &lt;- function(input, output, session) {\n  output$hist &lt;- renderPlot({\n    means &lt;- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multi-row-layout-1",
    "href": "slides/Shiny Layout Fundamentals.html#multi-row-layout-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Multi-row layout",
    "text": "Multi-row layout\n\nDefault column size is 12\nGood for vertical apps",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#xpage",
    "href": "slides/Shiny Layout Fundamentals.html#xpage",
    "title": "Shiny Layout Fundamentals",
    "section": "xPage()",
    "text": "xPage()\n\nfluidPage() Uses the grid system, responsive to different screen sizes.\nfixedPage() has fixed maximum width, so it doesn’t stretch with bigger screens/browser windows.\nfillpage() fills up the whole browser window and resizes with the browser window.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\ntabsetPanel()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Import data\", \n      fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n      textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n      numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n      numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n    ),\n    tabPanel(\"Set parameters\"),\n    tabPanel(\"Visualise results\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts-1",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts-1",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\nnavlistPanel()\nLike tabset panel, but runs vertically. Helps overcome string limitations from tabset panel.\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/Shiny Layout Fundamentals.html#multipage-layouts-2",
    "href": "slides/Shiny Layout Fundamentals.html#multipage-layouts-2",
    "title": "Shiny Layout Fundamentals",
    "section": "Multipage layouts",
    "text": "Multipage layouts\nnavbarPage() and navbarMenu()\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui &lt;- navbarPage(\n  \"Page title\",   \n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  )\n)\n\nserver &lt;- function(input, output, session) {}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Shiny Layout Fundamentals"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#bootstrap",
    "href": "slides/ShinyDashboard Framework.html#bootstrap",
    "title": "ShinyDashboard Framework",
    "section": "Bootstrap",
    "text": "Bootstrap\n\ncollection of HTML conventions, CSS styles, and JS snippets bundled up into a convenient form.\nframework originally developed for Twitter and over the last 10 years has grown to become one of the most popular CSS frameworks used on the web.\nBasic themes available here.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#basic-shinydashboard",
    "href": "slides/ShinyDashboard Framework.html#basic-shinydashboard",
    "title": "ShinyDashboard Framework",
    "section": "Basic ShinyDashboard",
    "text": "Basic ShinyDashboard\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(\n      title=\"shinydashboard\"\n    ),\n    dashboardSidebar(),\n    dashboardBody()\n  ),\n  server = function(input, output, session) {\n  }\n)\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#footnotes",
    "href": "slides/FlexDashboard Framework.html#footnotes",
    "title": "flexdashboard Framework",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWhen using ========== or ---------- the text on the preceeding line is required but the actual text does not matter. For # or ## a text label is not required.↩︎\nDepending on the orientation option↩︎\nIn a storyboard layout↩︎",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/Widgets.html#awesome-shiny-extensions",
    "href": "slides/Widgets.html#awesome-shiny-extensions",
    "title": "Other cool things you can do with Shiny",
    "section": "",
    "text": "This comprehensive curated list of Awesome SHiny Extensions is a good source for cool widgets and extensions to take your Shiny app to the next level!\nTip: It is easy to get carried away with all the little fun things that Shiny has to offer! Remember to keep track of time for your project, and not allow them to distract you from the final product!\nBelow are a few highlights:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorks similarly to fluidPage() in another grid type format.\n\n\n\n\n\n\n\n\n\n\n\nGreat option for carousels!\n\n\n\n\n\n\n\n\nA library of nicer looking widgets than the native built in widgets you get with the shiny package. A full demo of the library is available here.\n\n\n\n\n\n\n\n\nCollapsible shiny panels.\n\n\n\n\n\n\n\n\nCool Bootstrap 3 component - may not be compatible with bs4dash - use at your own risk!\n \n\n\n\nAllows a button for you to access and browse files on the system.\n\n\n\n\n\n\n\n\n\n\n\nAllows you to input time in HH:MM:SS format\n\n\n\n\n\n\n\n\nHas nicer select options. You can use fontawesome icons!\n\n\n\n\n\n\n\n\n #### pivta\nGreat for self service analytics projects. Allows you to have a ‘pivot table’ functionality online.\n\n\n\n\n\n\n\n\n\n\n\nLots of cool icons to add to buttons, titles…anything!\n\n\n---\ntitle: \"Font Awesome in R Markdown\"\noutput: html_document\n---\n\n\n\n# Just a few tests with `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:forestgreen;overflow:visible;position:relative;\"&gt;&lt;path d=\"M48 56c0-13.3-10.7-24-24-24S0 42.7 0 56V456c0 13.3 10.7 24 24 24s24-10.7 24-24V124.2l12.5-2.4c16.7-3.2 31.5-8.5 44.2-13.1l0 0 0 0c3.7-1.3 7.1-2.6 10.4-3.7c15.2-5.2 30.4-9.1 51.2-9.1c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c32.4 0 53.7-6.8 90.5-19.6V342.9l-9.5 3.3c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-16.8 0-31 2-43.9 5c-12.9 3-20.9 16-17.9 28.9s16 20.9 28.9 17.9c9.6-2.2 20.1-3.7 32.9-3.7c25.6 0 43 6 63.5 13.3l.5 .2c20.9 7.4 44.8 15.9 79.1 15.9c34.4 0 56.4-7.7 97.8-22.2c7.5-2.6 15.5-5.4 24.4-8.5l16.2-5.5V360 72 38.4L416.2 49.3c-9.7 3.3-18.2 6.3-25.7 8.9c-41.5 14.4-55.2 19.2-81 19.2c-25.7 0-43.1-6-63.6-13.3l-.6-.2c-20.8-7.4-44.8-15.8-79-15.8c-27.8 0-48.5 5.5-66.6 11.6c-4.9 1.7-9.3 3.3-13.6 4.8c-11.9 4.3-22 7.9-34.7 10.3L48 75.4V56z\"/&gt;&lt;/svg&gt;`{=html}\n\nIt works well in headings...\n\n# `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H1 Heading\n\n## `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H2 Heading\n\n### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H3 Heading\n\n#### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H4 Heading\n\n##### `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html} H5 Heading\n\n...and works equally well within inline text: `&lt;svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:steelblue;overflow:visible;position:relative;\"&gt;&lt;path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/&gt;&lt;/svg&gt;`{=html}.\nThe code above produces this:\n\n\n\n\n\n\n\n\nMakes ggplot a breeze!\n \n\n\n\nFantastic interactive calendar widget.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Other cool things you can do with Shiny"
    ]
  },
  {
    "objectID": "slides/ShinyDashboard Framework.html#bs4dash",
    "href": "slides/ShinyDashboard Framework.html#bs4dash",
    "title": "ShinyDashboard Framework",
    "section": "bs4dash",
    "text": "bs4dash\nFrom bs4dash documentation:\nbs4Dash relies on the same basis as shinydashboard, that is the AdminLTE HTML template, except the version is higher (3.1.0 vs 2.4). The biggest difference is the dependence on Bootstrap 4, which is not natively supported by {Shiny}. That’s why elements like tabsetPanel(), actionButton(), … have been rewritten to provide full Bootstrap4 support. In addition, bs4Dash comes with extra elements that will help you to develop Shiny apps with a more professional look and feel.\nAll features are summarised on the website.\nA bs4dash demo is available here.\nThe code used to produce the demo is available here.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "ShinyDashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---a-basic-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo---a-basic-flexdashboard",
    "title": "flexdashboard Framework",
    "section": "Demo - A basic flexdashboard",
    "text": "Demo - A basic flexdashboard\n\nthe output in the YAML heading will be flexdashboard\nin the example below, ------------------------ represents different rows\n\n---\ntitle: \"Demo\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n---\n\n```{r global}\n#| include: false\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\nd_city = d |&gt;\n  filter(city %in% \"Chicago\")\n```\n\nRow {data-height=650}\n-------------------------------------\n\n### Temperature\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=temp)) +\n  geom_line()\n```\n\nRow {data-height=350}\n-------------------------------------\n   \n### Humidity\n\n```{r}\n#| echo: false\nd_city |&gt;\n  ggplot(aes(x=time, y=humidity)) +\n  geom_line()\n```   \n\n###\n\n```{r}\nd_city |&gt;\n  mutate(\n    day = lubridate::wday(time, label = TRUE, abbr = FALSE),\n    date = as.character(lubridate::date(time))\n  ) |&gt;\n  group_by(date, day) |&gt;\n  summarize(\n    `min` = min(temp),\n    `max` = max(temp),\n    .groups = \"drop\"\n  ) |&gt;\n  knitr::kable()\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn",
    "href": "slides/FlexDashboard Framework.html#your-turn",
    "title": "flexdashboard Framework",
    "section": "Your turn",
    "text": "Your turn\nCopy the code above, and try knitting it (remember to change line 13 to update where you have saved the data to!)\nCheck that you are able to successfully render the flexdashboard.\nIf everything is working try modifying the code:\n\nWhat happens if you remove orientation: rows from the front matter?\nWhat happens if you change the Row text?\nWhat happens if you change or remove {data-height=*}?",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn-1",
    "href": "slides/FlexDashboard Framework.html#your-turn-1",
    "title": "flexdashboard Framework",
    "section": "Your turn",
    "text": "Your turn\nWe’ve just seen a number of possible layout methods for a flexdashboard, lets return to the code we’ve seen previously, and try changing layout more purposefully this time (e.g. a column, multipage, or storyboard layout).\nUse this time to experiment with the different layout options and see what seems to work best.\n\nTry out a multipage or storyboard layout\nTry making a reasonable looking column layout",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---shiny-flexdashboard",
    "href": "slides/FlexDashboard Framework.html#demo---shiny-flexdashboard",
    "title": "flexdashboard Framework",
    "section": "Demo - shiny + flexdashboard",
    "text": "Demo - shiny + flexdashboard\n\n\n\n---\ntitle: \"Demo\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\n\nInputs {.sidebar}\n-------------------------------------\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nselectInput(\n  \"var\", \"Select a variable\",\n  choices = d_vars, selected = \"humidity\"\n)\n```\n\n\nCol\n-------------------------------------\n\n### Temperature\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    ggtitle(input$city) + \n    geom_line()\n})\n```\n\nCol\n-------------------------------------\n   \n### Other\n\n```{r}\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=.data[[input$var]])) +\n    geom_line()\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#your-turn-2",
    "href": "slides/FlexDashboard Framework.html#your-turn-2",
    "title": "flexdashboard Framework",
    "section": "Your turn:",
    "text": "Your turn:\nThe shiny inputs do not need to live in a sidepanel - try rewriting Demo 04’s code such that the inputs for city and variable are located within the temperature and other elements respectively.\n\nHint - if you are having difficulty with your plots fitting on screen you can adjust their size via renderPlot()s width and height arguments.",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#demo---components",
    "href": "slides/FlexDashboard Framework.html#demo---components",
    "title": "flexdashboard Framework",
    "section": "Demo - Components",
    "text": "Demo - Components\n\n\n\n---\ntitle: \"Demo - value boxes and gauges\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot({\n  d_city() |&gt;\n    ggplot(aes(x=time, y=temp)) +\n    geom_line()\n}, height = 600)\n```\n\nCol {data-width=200}\n-------------------------------------\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_city()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_city()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```\n\n\n\n−+\n08:00",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/FlexDashboard Framework.html#linked-brushing-1",
    "href": "slides/FlexDashboard Framework.html#linked-brushing-1",
    "title": "flexdashboard Framework",
    "section": "Linked brushing",
    "text": "Linked brushing\n---\ntitle: \"Linked brushing\"\noutput: \n  flexdashboard::flex_dashboard\nruntime: shiny\n---\n\n```{r global}\nlibrary(tidyverse)\nlibrary(flexdashboard)\nggplot2::theme_set(ggplot2::theme_bw())\n\nd = readr::read_csv(here::here(\"data/weather.csv\"))\n```\n\n```{r}\nd_vars = d |&gt;\n  select(where(is.numeric)) |&gt;\n  names()\n\nd_city = reactive({\n  d |&gt;\n    filter(city %in% input$city)\n})\n\nd_selected = reactive({\n  db = shiny::brushedPoints(d_city(), input$plot_brush)\n  if (nrow(db) == 0)\n    db = d_city()\n  db\n})\n```\n\nCol {data-width=800}\n-------------------------------------\n\n###\n\n```{r}\nselectInput(\n  \"city\", \"Select a city\",\n  choices = c(\"Chicago\", \"Durham\", \"Sedona\", \"New York\", \"Los Angeles\")\n)\n\nrenderPlot(\n  {\n    d_city() |&gt;\n      ggplot(aes(x=time, y=temp)) +\n      geom_line()\n  },\n  outputArgs = list(\n    brush = shiny::brushOpts(id = \"plot_brush\")\n  ),\n  height = 600\n)\n```\n\nCol {data-width=200}\n-------------------------------------\n   \n   \n### Starting time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    min(d_selected()$time),\n    caption = \"Starting time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Ending time\n\n```{r}\nrenderValueBox({\n  valueBox(\n    max(d_selected()$time),\n    caption = \"Ending time\",\n    icon = \"fa-calendar-days\"\n  )\n})\n```\n\n### Min temperature \n\n```{r}\nrenderGauge({\n  gauge(\n    min(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Max temperature\n\n```{r}\nrenderGauge({\n  gauge(\n    max(d_selected()$temp),\n    min = 0, max=120, symbol = \"°F\",\n    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))\n  )\n})\n```\n\n### Avg temperature\n\n```{r}\nrenderValueBox({\n  avg = mean(d_selected()$temp) |&gt; round(1)\n  valueBox(\n    avg,\n    caption = \"Avg temp\",\n    icon = \"fa-thermometer-half\",\n    color = case_when(\n      avg &gt;= 0 & avg &lt; 50 ~ \"warning\",\n      avg &gt;=50 & avg &lt; 90 ~ \"success\",\n      avg &gt;=90 & avg &lt; 120 ~ \"danger\"\n    )\n  )\n})\n```",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "flexdashboard Framework"
    ]
  },
  {
    "objectID": "slides/Exercise.html",
    "href": "slides/Exercise.html",
    "title": "Homework",
    "section": "",
    "text": "Using the shiny app that you built last week, use the shinydashboardframework to create a new dashboard.\nExtra challenge: Turn it into a flexdashboard with a shiny run time.\nTry to add new features and plots using some of the extensions mentioned in today’s session!",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Homework"
    ]
  },
  {
    "objectID": "slides/Exercise.html#exercise",
    "href": "slides/Exercise.html#exercise",
    "title": "Homework",
    "section": "",
    "text": "Using the shiny app that you built last week, use the shinydashboardframework to create a new dashboard.\nExtra challenge: Turn it into a flexdashboard with a shiny run time.\nTry to add new features and plots using some of the extensions mentioned in today’s session!",
    "crumbs": [
      "Home",
      "Layouts and Dash Frameworks",
      "Homework"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#html",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#html",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "",
    "text": "Take a look at the script below:\n&lt;div class=\"header\" checked&gt;\n &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n Thank you\n&lt;/div&gt; \nThis is a very basic chunk of HTML code. HTML (Hypertext Markup Language) uses tags to structure content on web pages. Tags are enclosed in angle brackets &lt; &gt; and typically come in pairs: an opening tag and a closing tag.\nHere are some of the most common and basic HTML tags:\n&lt;html&gt;: This tag wraps the entire HTML document and signifies the start of the HTML code.\n&lt;head&gt;: This tag contains meta-information about the document, such as its title, character encoding, and links to external resources like stylesheets and scripts.\n&lt;title&gt;: This tag specifies the title of the HTML document, which appears in the browser’s title bar or tab.\n&lt;body&gt;: This tag contains the main content of the HTML document, including text, images, videos, and other elements.\n&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;: These tags create headings of different levels, where &lt;h1&gt; is the most important (usually the largest and boldest) and &lt;h6&gt; is the least important (usually the smallest).\n&lt;p&gt;: This tag defines a paragraph of text.\n&lt;a&gt;:This tag creates hyperlinks, allowing you to link to other web pages or resources. It is often used with the href attribute to specify the URL of the link.\n&lt;img&gt;:This tag embeds images in the document. It requires the src attribute to specify the URL of the image file.\n&lt;ul&gt; and &lt;ol&gt;: These tags create unordered and ordered lists, respectively. &lt;ul&gt; is for bullet-point lists, while &lt;ol&gt; is for numbered lists. List items are defined using the &lt;li&gt;tag within these list containers.\n&lt;br&gt;: This tag inserts a line break within the text.\n&lt;hr&gt;: This tag creates a horizontal line, typically used to separate content sections.\n&lt;div&gt; and &lt;span&gt;: These tags are generic containers used for grouping and styling content.\n\nis a block-level element, and  is an inline element.\n&lt;table&gt;: This tag creates a table for organizing data. Tables consist of rows (\n\n) and cells (\n\nfor regular cells,\n\nfor header cells).\nYou can use HTML directly in RMarkdown:\nExample:\nThis code below creates the chunk of text below:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\nMy first paragraph.\n\n\n\n\n\nGather Ingredients\n\n\nSpread condiments on bread\n\n\nAdd desired fillings\n\n\nPlace second slice of bread on top\n\n\nCut the sandwich in half",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#css",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#css",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "CSS",
    "text": "CSS\nSo what is CSS?\nCSS, which stands for Cascading Style Sheets, is a styling language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG or XHTML).\nCSS allows you to specify how HTML elements should appear on the screen or in other media. This includes properties such as color, size, font, spacing, and positioning and enables the separation of content (HTML) from presentation (styling). This separation makes it easier to manage and update the appearance of a website or document without needing to alter the underlying content.\nTake a look at the example below:\n/* Selecting all paragraphs */\np {\n   /* Declaration Block */\n   color: blue; /* Setting text color to blue */\n   font-size: 16px; /* Setting font size to 16 pixels */\n   margin-top: 20px; /* Setting top margin to 20 pixels */\n}\nIn this example, p is the selector targeting all &lt;p&gt; elements in the HTML document. The declaration block inside the curly braces contains three declarations setting the text color, font size, and top margin for those paragraphs.\n&lt;div&gt;\nIn the example below:\nThe HTML code creates a webpage with a &lt;div&gt; element having a class attribute set to “container”. Inside this &lt;div&gt;, there are two paragraphs.\nThe CSS code (in a separate file named styles.css linked to the HTML document) applies styles specifically to the elements with the class “container”. It sets the background color to light blue, adds padding, and creates a border around the container.\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;HTML and CSS Example&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;p&gt;This is a paragraph inside a div with class \"container\".&lt;/p&gt;\n    &lt;p&gt;This is another paragraph.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n/* CSS for the class \"container\" */\n.container {\n    background-color: lightblue; /* Setting background color to light blue */\n    padding: 20px; /* Adding padding of 20 pixels */\n    border: 1px solid darkblue; /* Adding a border with 1 pixel width and dark blue color */\n}",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Translating HTML",
    "text": "Translating HTML",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-and-css-for-use-in-shiny",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-and-css-for-use-in-shiny",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Translating HTML and CSS for use in Shiny",
    "text": "Translating HTML and CSS for use in Shiny\nYou don’t need to know HTML to use Shiny - but it is useful to know in order to customise your apps. The UI calls R functions that output HTML code. Shiny turns this code into a web app. For example, in the script below, the Shiny script actually outputs the commented HTML script at the end:\nFrom: Customize your UI with HTML\nfluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n## &lt;div class=\"container-fluid\"&gt;\n##   &lt;h2&gt;Hello Shiny!&lt;/h2&gt;\n##   &lt;div class=\"row\"&gt;\n##     &lt;div class=\"col-sm-4\"&gt;\n##       &lt;form class=\"well\"&gt;\n##         &lt;div class=\"form-group shiny-input-container\"&gt;\n##           &lt;label class=\"control-label\" for=\"bins\"&gt;Number of bins:&lt;/label&gt;\n##           &lt;input class=\"js-range-slider\" id=\"bins\" data-min=\"1\" data-max=\"50\" data-from=\"30\" ## data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.8\" data-grid-snap=\"false\" ## data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" ## data-keyboard-step=\"2.04081632653061\" data-data-type=\"number\"/&gt;\n##         &lt;/div&gt;\n##       &lt;/form&gt;\n##     &lt;/div&gt;\n##     &lt;div class=\"col-sm-8\"&gt;\n##       &lt;div id=\"distPlot\" class=\"shiny-plot-output\" style=\"width: 100% ; height: 400px\"&gt;&lt;/div&gt;\n##     &lt;/div&gt;\n##   &lt;/div&gt;\n## &lt;/div&gt; \nFirst, let’s look at the syntax again, used to create the HTML example above:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n###There are a couple of ways to use that code in a Shiny app:\nBoth ways below result in the following UI:\n\n\n\n\n\n\n1. Translate the HTML code into R code:\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tags$h1(\"My First Heading\"),\n  tags$p(\"My first paragraph.\"),\n  \n  tags$h2(\"This is what a second heading looks like\"),\n  \n  tags$h2(\"Steps to Make a Sandwich\"),\n  tags$ol(\n    tags$li(\"Gather Ingredients\"),\n    tags$li(\"Spread condiments on bread\"),\n    tags$li(\"Add desired fillings\"),\n    tags$li(\"Place second slice of bread on top\"),\n    tags$li(\"Cut the sandwich in half\")\n  )\n)\n\nserver &lt;- function(input, output) {\n  # Server logic goes here\n}\n\nshinyApp(ui, server)\nIt is recommended to use the second method, be is it more flexible and allows for widgets and other things to be dispersed among the HTML code.\ntags shiny::tags is a list of 110 functions. Each function builds a specific HTML tag. You can learn what the most common tags do in the Shiny HTML tags glossary.\n\nlibrary(shiny)\n\nnames(tags)\n\n  [1] \"a\"                   \"abbr\"                \"address\"            \n  [4] \"animate\"             \"animateMotion\"       \"animateTransform\"   \n  [7] \"area\"                \"article\"             \"aside\"              \n [10] \"audio\"               \"b\"                   \"base\"               \n [13] \"bdi\"                 \"bdo\"                 \"blockquote\"         \n [16] \"body\"                \"br\"                  \"button\"             \n [19] \"canvas\"              \"caption\"             \"circle\"             \n [22] \"cite\"                \"clipPath\"            \"code\"               \n [25] \"col\"                 \"colgroup\"            \"color-profile\"      \n [28] \"command\"             \"data\"                \"datalist\"           \n [31] \"dd\"                  \"defs\"                \"del\"                \n [34] \"desc\"                \"details\"             \"dfn\"                \n [37] \"dialog\"              \"discard\"             \"div\"                \n [40] \"dl\"                  \"dt\"                  \"ellipse\"            \n [43] \"em\"                  \"embed\"               \"eventsource\"        \n [46] \"feBlend\"             \"feColorMatrix\"       \"feComponentTransfer\"\n [49] \"feComposite\"         \"feConvolveMatrix\"    \"feDiffuseLighting\"  \n [52] \"feDisplacementMap\"   \"feDistantLight\"      \"feDropShadow\"       \n [55] \"feFlood\"             \"feFuncA\"             \"feFuncB\"            \n [58] \"feFuncG\"             \"feFuncR\"             \"feGaussianBlur\"     \n [61] \"feImage\"             \"feMerge\"             \"feMergeNode\"        \n [64] \"feMorphology\"        \"feOffset\"            \"fePointLight\"       \n [67] \"feSpecularLighting\"  \"feSpotLight\"         \"feTile\"             \n [70] \"feTurbulence\"        \"fieldset\"            \"figcaption\"         \n [73] \"figure\"              \"filter\"              \"footer\"             \n [76] \"foreignObject\"       \"form\"                \"g\"                  \n [79] \"h1\"                  \"h2\"                  \"h3\"                 \n [82] \"h4\"                  \"h5\"                  \"h6\"                 \n [85] \"hatch\"               \"hatchpath\"           \"head\"               \n [88] \"header\"              \"hgroup\"              \"hr\"                 \n [91] \"html\"                \"i\"                   \"iframe\"             \n [94] \"image\"               \"img\"                 \"input\"              \n [97] \"ins\"                 \"kbd\"                 \"keygen\"             \n[100] \"label\"               \"legend\"              \"li\"                 \n[103] \"line\"                \"linearGradient\"      \"link\"               \n[106] \"main\"                \"map\"                 \"mark\"               \n[109] \"marker\"              \"mask\"                \"menu\"               \n[112] \"meta\"                \"metadata\"            \"meter\"              \n[115] \"mpath\"               \"nav\"                 \"noscript\"           \n[118] \"object\"              \"ol\"                  \"optgroup\"           \n[121] \"option\"              \"output\"              \"p\"                  \n[124] \"param\"               \"path\"                \"pattern\"            \n[127] \"picture\"             \"polygon\"             \"polyline\"           \n[130] \"pre\"                 \"progress\"            \"q\"                  \n[133] \"radialGradient\"      \"rb\"                  \"rect\"               \n[136] \"rp\"                  \"rt\"                  \"rtc\"                \n[139] \"ruby\"                \"s\"                   \"samp\"               \n[142] \"script\"              \"section\"             \"select\"             \n[145] \"set\"                 \"slot\"                \"small\"              \n[148] \"solidcolor\"          \"source\"              \"span\"               \n[151] \"stop\"                \"strong\"              \"style\"              \n[154] \"sub\"                 \"summary\"             \"sup\"                \n[157] \"svg\"                 \"switch\"              \"symbol\"             \n[160] \"table\"               \"tbody\"               \"td\"                 \n[163] \"template\"            \"text\"                \"textarea\"           \n[166] \"textPath\"            \"tfoot\"               \"th\"                 \n[169] \"thead\"               \"time\"                \"title\"              \n[172] \"tr\"                  \"track\"               \"tspan\"              \n[175] \"u\"                   \"ul\"                  \"use\"                \n[178] \"var\"                 \"video\"               \"view\"               \n[181] \"wbr\"                \n\n\nExample:\nTo HTML div tag equvalent is below:\ntags$div()\n## &lt;div&gt;&lt;/div&gt; \nClass attributes\nTo add a class attribute to the div header, you would do the below:\ntags$div(class = \"header\")\n## &lt;div class=\"header\"&gt;&lt;/div&gt;\nChildren\nEach tag function will add unnamed arguments to your tag as HTML children. This addition lets you nest tags inside of each other (just as in HTML).\ntags$div(class = \"header\", checked = NA,\n  tags$p(\"Ready to take the Shiny tutorial? If so\"),\n  tags$a(href = \"shiny.posit.co/tutorial\", \"Click Here!\")\n)\n## &lt;div class=\"header\" checked&gt;\n##   &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n##   &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n## &lt;/div&gt; \n\n\n2. You can also wrap all of your HTML code into a HTML() function\nYou cannot put raw HTML directly into a tag or UI object (like in the example below). Shiny will treat raw HTML as a character string, adding HTML as text to your UI document.\ntags$div(\n  \"&lt;strong&gt;Raw HTML!&lt;/strong&gt;\"\n)\n## &lt;div&gt;&lt;strong&gt;Raw HTML!&lt;/strong&gt;&lt;/div&gt; \nTo add raw HTML, use the HTML function. HTML takes a character string and returns it as HTML (a special class of object in Shiny).\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  \n  HTML('\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;')\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nShiny will assume that the code you pass to HTML is correctly written HTML. Be sure to double check it.\n\n\n\n\n\n\nWarning\n\n\n\nIt is a bad idea to pass an input object to HTML:\ntags$div(\n  HTML(input$text)\n)\nThis allows the user to add their own HTML to your app, which creates a security vulnerability. What you user enters could be added to the web document or seen by other users, which might break the app. In the worse case scenario, a user may try to deploy malicious Cross Site Scripting (XSS), an undesirable security vulnerability.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-for-use-in-shiny",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#translating-html-for-use-in-shiny",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Translating HTML for use in Shiny",
    "text": "Translating HTML for use in Shiny\nYou don’t need to know HTML to use Shiny - but it is useful to know in order to customise your apps. The UI calls R functions that output HTML code. Shiny turns this code into a web app. For example, in the script below, the Shiny script actually outputs the commented HTML script at the end:\nFrom: Customize your UI with HTML\nfluidPage(\n\n  # App title ----\n  titlePanel(\"Hello Shiny!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n## &lt;div class=\"container-fluid\"&gt;\n##   &lt;h2&gt;Hello Shiny!&lt;/h2&gt;\n##   &lt;div class=\"row\"&gt;\n##     &lt;div class=\"col-sm-4\"&gt;\n##       &lt;form class=\"well\"&gt;\n##         &lt;div class=\"form-group shiny-input-container\"&gt;\n##           &lt;label class=\"control-label\" for=\"bins\"&gt;Number of bins:&lt;/label&gt;\n##           &lt;input class=\"js-range-slider\" id=\"bins\" data-min=\"1\" data-max=\"50\" data-from=\"30\" ## data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.8\" data-grid-snap=\"false\" ## data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" ## data-keyboard-step=\"2.04081632653061\" data-data-type=\"number\"/&gt;\n##         &lt;/div&gt;\n##       &lt;/form&gt;\n##     &lt;/div&gt;\n##     &lt;div class=\"col-sm-8\"&gt;\n##       &lt;div id=\"distPlot\" class=\"shiny-plot-output\" style=\"width: 100% ; height: 400px\"&gt;&lt;/div&gt;\n##     &lt;/div&gt;\n##   &lt;/div&gt;\n## &lt;/div&gt; \nFirst, let’s look at the syntax again, used to create the HTML example above:\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n###There are a couple of ways to use that code in a Shiny app:\nBoth ways below result in the following UI:\n\n\n\n\n\n\n1. Translate the HTML code into R code:\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  tags$h1(\"My First Heading\"),\n  tags$p(\"My first paragraph.\"),\n  \n  tags$h2(\"This is what a second heading looks like\"),\n  \n  tags$h2(\"Steps to Make a Sandwich\"),\n  tags$ol(\n    tags$li(\"Gather Ingredients\"),\n    tags$li(\"Spread condiments on bread\"),\n    tags$li(\"Add desired fillings\"),\n    tags$li(\"Place second slice of bread on top\"),\n    tags$li(\"Cut the sandwich in half\")\n  )\n)\n\nserver &lt;- function(input, output) {\n  # Server logic goes here\n}\n\nshinyApp(ui, server)\nIt is recommended to use the second method, be is it more flexible and allows for widgets and other things to be dispersed among the HTML code.\ntags shiny::tags is a list of 110 functions. Each function builds a specific HTML tag. You can learn what the most common tags do in the Shiny HTML tags glossary.\n\nlibrary(shiny)\n\nnames(tags)\n\n  [1] \"a\"                   \"abbr\"                \"address\"            \n  [4] \"animate\"             \"animateMotion\"       \"animateTransform\"   \n  [7] \"area\"                \"article\"             \"aside\"              \n [10] \"audio\"               \"b\"                   \"base\"               \n [13] \"bdi\"                 \"bdo\"                 \"blockquote\"         \n [16] \"body\"                \"br\"                  \"button\"             \n [19] \"canvas\"              \"caption\"             \"circle\"             \n [22] \"cite\"                \"clipPath\"            \"code\"               \n [25] \"col\"                 \"colgroup\"            \"color-profile\"      \n [28] \"command\"             \"data\"                \"datalist\"           \n [31] \"dd\"                  \"defs\"                \"del\"                \n [34] \"desc\"                \"details\"             \"dfn\"                \n [37] \"dialog\"              \"discard\"             \"div\"                \n [40] \"dl\"                  \"dt\"                  \"ellipse\"            \n [43] \"em\"                  \"embed\"               \"eventsource\"        \n [46] \"feBlend\"             \"feColorMatrix\"       \"feComponentTransfer\"\n [49] \"feComposite\"         \"feConvolveMatrix\"    \"feDiffuseLighting\"  \n [52] \"feDisplacementMap\"   \"feDistantLight\"      \"feDropShadow\"       \n [55] \"feFlood\"             \"feFuncA\"             \"feFuncB\"            \n [58] \"feFuncG\"             \"feFuncR\"             \"feGaussianBlur\"     \n [61] \"feImage\"             \"feMerge\"             \"feMergeNode\"        \n [64] \"feMorphology\"        \"feOffset\"            \"fePointLight\"       \n [67] \"feSpecularLighting\"  \"feSpotLight\"         \"feTile\"             \n [70] \"feTurbulence\"        \"fieldset\"            \"figcaption\"         \n [73] \"figure\"              \"filter\"              \"footer\"             \n [76] \"foreignObject\"       \"form\"                \"g\"                  \n [79] \"h1\"                  \"h2\"                  \"h3\"                 \n [82] \"h4\"                  \"h5\"                  \"h6\"                 \n [85] \"hatch\"               \"hatchpath\"           \"head\"               \n [88] \"header\"              \"hgroup\"              \"hr\"                 \n [91] \"html\"                \"i\"                   \"iframe\"             \n [94] \"image\"               \"img\"                 \"input\"              \n [97] \"ins\"                 \"kbd\"                 \"keygen\"             \n[100] \"label\"               \"legend\"              \"li\"                 \n[103] \"line\"                \"linearGradient\"      \"link\"               \n[106] \"main\"                \"map\"                 \"mark\"               \n[109] \"marker\"              \"mask\"                \"menu\"               \n[112] \"meta\"                \"metadata\"            \"meter\"              \n[115] \"mpath\"               \"nav\"                 \"noscript\"           \n[118] \"object\"              \"ol\"                  \"optgroup\"           \n[121] \"option\"              \"output\"              \"p\"                  \n[124] \"param\"               \"path\"                \"pattern\"            \n[127] \"picture\"             \"polygon\"             \"polyline\"           \n[130] \"pre\"                 \"progress\"            \"q\"                  \n[133] \"radialGradient\"      \"rb\"                  \"rect\"               \n[136] \"rp\"                  \"rt\"                  \"rtc\"                \n[139] \"ruby\"                \"s\"                   \"samp\"               \n[142] \"script\"              \"section\"             \"select\"             \n[145] \"set\"                 \"slot\"                \"small\"              \n[148] \"solidcolor\"          \"source\"              \"span\"               \n[151] \"stop\"                \"strong\"              \"style\"              \n[154] \"sub\"                 \"summary\"             \"sup\"                \n[157] \"svg\"                 \"switch\"              \"symbol\"             \n[160] \"table\"               \"tbody\"               \"td\"                 \n[163] \"template\"            \"text\"                \"textarea\"           \n[166] \"textPath\"            \"tfoot\"               \"th\"                 \n[169] \"thead\"               \"time\"                \"title\"              \n[172] \"tr\"                  \"track\"               \"tspan\"              \n[175] \"u\"                   \"ul\"                  \"use\"                \n[178] \"var\"                 \"video\"               \"view\"               \n[181] \"wbr\"                \n\n\nExample:\nTo HTML div tag equvalent is below:\ntags$div()\n## &lt;div&gt;&lt;/div&gt; \nClass attributes\nTo add a class attribute to the div header, you would do the below:\ntags$div(class = \"header\")\n## &lt;div class=\"header\"&gt;&lt;/div&gt;\nChildren\nEach tag function will add unnamed arguments to your tag as HTML children. This addition lets you nest tags inside of each other (just as in HTML).\ntags$div(class = \"header\", checked = NA,\n  tags$p(\"Ready to take the Shiny tutorial? If so\"),\n  tags$a(href = \"shiny.posit.co/tutorial\", \"Click Here!\")\n)\n## &lt;div class=\"header\" checked&gt;\n##   &lt;p&gt;Ready to take the Shiny tutorial? If so&lt;/p&gt;\n##   &lt;a href=\"shiny.posit.co/tutorial\"&gt;Click Here!&lt;/a&gt;\n## &lt;/div&gt; \n\n\n2. You can also wrap all of your HTML code into a HTML() function\nYou cannot put raw HTML directly into a tag or UI object (like in the example below). Shiny will treat raw HTML as a character string, adding HTML as text to your UI document.\ntags$div(\n  \"&lt;strong&gt;Raw HTML!&lt;/strong&gt;\"\n)\n## &lt;div&gt;&lt;strong&gt;Raw HTML!&lt;/strong&gt;&lt;/div&gt; \nTo add raw HTML, use the HTML function. HTML takes a character string and returns it as HTML (a special class of object in Shiny).\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  \n  HTML('\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;h2&gt;This is what a second heading looks like &lt;/h2&gt;\n\n  &lt;h2&gt;Steps to Make a Sandwich&lt;/h2&gt;\n  &lt;ol&gt;\n      &lt;li&gt;Gather Ingredients&lt;/li&gt;\n      &lt;li&gt;Spread condiments on bread&lt;/li&gt;\n      &lt;li&gt;Add desired fillings&lt;/li&gt;\n      &lt;li&gt;Place second slice of bread on top&lt;/li&gt;\n      &lt;li&gt;Cut the sandwich in half&lt;/li&gt;\n  &lt;/ol&gt;')\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\nShiny will assume that the code you pass to HTML is correctly written HTML. Be sure to double check it.\n\n\n\n\n\n\nWarning\n\n\n\nIt is a bad idea to pass an input object to HTML:\ntags$div(\n  HTML(input$text)\n)\nThis allows the user to add their own HTML to your app, which creates a security vulnerability. What you user enters could be added to the web document or seen by other users, which might break the app. In the worse case scenario, a user may try to deploy malicious Cross Site Scripting (XSS), an undesirable security vulnerability.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#incorporating-css-into-shiny",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#incorporating-css-into-shiny",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Incorporating CSS into Shiny",
    "text": "Incorporating CSS into Shiny\nFrom: Using custom CSS in your app\n\nGetting our CSS into the app\nSo how do we go about getting the above CSS into our Shiny app? Inline or file based.\n\n1. Inline:\nThe way to do this in Shiny is using the head and styles tags:\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  tags$head(\n    # Note the wrapping of the string in HTML()\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      body {\n        background-color: black;\n        color: white;\n      }\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\n      .shiny-input-container {\n        color: #474747;\n      }\"))\n  ),\n  titlePanel(\"Old Faithful Geyser Data\"),\n  ...\n)\nInlining CSS within the main app script offers the advantage of convenience, as developers can quickly access and modify styles without navigating between multiple files. This approach reduces the time spent switching between files and eliminates the need for creating and linking external CSS files, simplifying the development process. However, drawbacks arise when the CSS code grows significantly, leading to a cluttered and unwieldy UI function within the app script.Therefore, inlining is most suitable during initial development stages when the CSS is concise, but as the codebase expands, transitioning to a file-based workflow becomes necessary for better organization and maintainability.\n\n\nFile based\nYou can keep your css script in a separate file in the www/ folder.\nA note about www/\nOne thing you may notice is that we placed our CSS file in the sub folder www/, but we only specified the CSS file’s name (dark_mode.css) in our href or “hyperlink reference” argument. The www/ folder is a special one for Shiny. Resources your app may link to, such as images—or in this case, scripts—are placed in the www/ folder. Shiny then knows to make these files available for access from the web browser. If we had placed dark_mode.css at the same file hierarchy next as app.R, Shiny would not know that it needs to host it, and your app would tell the browser to look for a file that was not available to\nIn www/style.css\n/* Get a fancy font from Google Fonts */\n@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n\nbody {\n  background-color: black;\n  color: white; /* text color */\n}\n\n/* Change header text to imported font */\nh2 {\n  font-family: 'Yusei Magic', sans-serif;\n}\n\n/* Make text visible on inputs */\n.shiny-input-container {\n  color: #474747;\n}\napp.R\n\nui &lt;- fluidPage(\n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")\n  )\n  ...\n)\ntags$link: This is an HTML tag used to link external resources such as stylesheets (CSS files) or other documents. It’s typically used within the &lt;head&gt; section of an HTML document. In this case, it’s being used to link a CSS stylesheet.\nrel = \"stylesheet\": This is an attribute of the &lt;link&gt; tag. It specifies the relationship between the current document and the linked resource. In this case, it indicates that the linked resource is a stylesheet.\ntype = \"text/css\": Another attribute of the &lt;link&gt; tag. It specifies the MIME type of the linked resource. “text/css” indicates that the linked resource is a CSS file.\nhref = \"style.css“: Yet another attribute of the &lt;link&gt; tag. It specifies the URL of the linked resource. In this case,”style.css” is the URL of the CSS file that will be used to style the content of the Shiny app.",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#other-ways-of-using-css",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#other-ways-of-using-css",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Other ways of using css:",
    "text": "Other ways of using css:\n\ntheme = \"styles.css\"\nYou can pass a CSS file directly to your app using the theme argument in your UI function, much the same as the tags$link() method. However, it’s not recommended anymore because the theme argument is now commonly used by the bslib package to pass in custom bootstrap theming options. (bslib also provides its own functionality for adding additional CSS to a given bootstrap theme with the function bslib::bs_add_rules().)\n\n\nincludeCSS()\nThe function includeCSS() is an amalgamation of inline and file-based CSS. It takes as its argument a file path—this time not necessarily in the www/ folder—and pastes that file’s contents directly into the HTML of your app instead of using a file link. This means:\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  includeCSS(\"www/dark_mode.css\"),\n  titlePanel(\"Old Faithful Geyser Data\"),\n  ...\n)\nmakes Shiny build the same HTML as doing\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');\n      body {\n        background-color: black;\n        color: white;\n      }\n      /* Change font of header text */\n      h2 {\n        font-family: 'Yusei Magic', sans-serif;\n      }\n      /* Make text visible on inputs */\n      .shiny-input-container {\n        color: #474747;\n      }\"))\n  ),\n  titlePanel(\"Old Faithful Geyser Data\"),\n    ...\n)",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Theming - basics of CSS and HTML for Shiny.html#editing-css-in-your-browser",
    "href": "slides/Theming - basics of CSS and HTML for Shiny.html#editing-css-in-your-browser",
    "title": "Theming - basics of CSS and HTML for Shiny",
    "section": "Editing CSS in your browser:",
    "text": "Editing CSS in your browser:\n\nDemo:\nRun the code and make some changes in the browser:\n\nui &lt;- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\nMore advanced techniques can be found here",
    "crumbs": [
      "Home",
      "Aesthetics",
      "Theming - basics of CSS and HTML for Shiny"
    ]
  },
  {
    "objectID": "slides/Features of an Betfair Shiny App.html#anatomy-of-an-app-script",
    "href": "slides/Features of an Betfair Shiny App.html#anatomy-of-an-app-script",
    "title": "Features of a Betfair Shiny App.qmd",
    "section": "Anatomy of an app script",
    "text": "Anatomy of an app script\n\noauth components\n\nwhy you need oauth, and why NOT to use RBetfair anymore\n\n\npii_db_connect()\n\n\noauth script:\n  tags$script(src=\"https://alcdn.msauth.net/browser/2.30.0/js/msal-browser.min.js\"),\n  tags$script(HTML(\"\n        async function wrapperFunc() {\n                const msalConfig = {\n                    auth: {\n                        clientId: '82eb74cf-a27a-4b0b-8e68-a810f276c83d',\n                        authority: 'https://login.microsoftonline.com/25c3372b-4327-40c4-8ecd-37cc3f775dad'\n                    }\n                };\n                const msalInstance = new msal.PublicClientApplication(msalConfig);\n                const silentRequest = {\n                    scopes: ['api://82eb74cf-a27a-4b0b-8e68-a810f276c83d/session:role-any']\n                };\n                const callLogin = async function(silentRequest, msalInstance) {\n                    try {\n                        const loginResponse = await msalInstance.loginPopup(silentRequest);\n                        return loginResponse;\n                    } catch (err) {\n                        console.log(err)\n                    }\n                }\n                response = callLogin(silentRequest, msalInstance);\n              return response;\n      }\n      wrapperFunc().then(result =&gt; {\n            Shiny.setInputValue('oauthToken', result['accessToken']);\n                      console.log(result['accessToken']);\n      });\"))\n\n\n\nSQL scripts:\nExample:\n# account closure --------------------------------------------------------\naccount_closure = function(.conn = snof_con){\n  data = glue_sql(\"select\nsai.account_id,\nsai.user_name,\nsai.first_name,\nsai.last_name,\nsai.date_of_birth,\nsai.account_open_date,\n--aad.last_closed_dt,\nsai.email_address\nfrom EXCHANGE.ANALYTICAL.DIM_ACCOUNT sai\nwhere account_status = 'SUSPENDED'\nAND ACCOUNT_STATUS_REASON LIKE '%Account to be closed at Customer%'\n\", .con = .conn)  %&gt;%\n    dbGetQuery(.conn, .) %&gt;%\n    as_tibble() %&gt;%\n    clean_names()\n\n  return(data)\n}\n\nin order to bring back data into app you need CONNECTION + QUERY: so: outcome of pii_db_connect is fed into function above.\n\n\n\nCustom functions:\n\nonce you have the data, what do you want to do with it? make an excel workbook? make a graph?",
    "crumbs": [
      "Home",
      "Database connections",
      "Features of a Betfair Shiny App.qmd"
    ]
  },
  {
    "objectID": "slides/Features of an Betfair Shiny App.html#pulling-it-all-together",
    "href": "slides/Features of an Betfair Shiny App.html#pulling-it-all-together",
    "title": "Features of a Betfair Shiny App",
    "section": "Pulling it all together:",
    "text": "Pulling it all together:\nTake the example below (using RG Daily).\nIn this projectm we have the following scripts:\napp.R get_data.R functions.R\n\napp.R\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(tidyr)\nlibrary(glue)\nlibrary(here)\nlibrary(highcharter)\nlibrary(janitor)\nlibrary(DT)\nlibrary(flexdashboard)\nlibrary(gt)\nlibrary(openxlsx)\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(DBI)\nlibrary(dplyr)\n\ncss &lt;- \"\n.navbar-default {\n  background-color: inherit;\n  border: none;\n}\n\"\n\noptions(shiny.port = 7362)\n\n\n# Define UI for application that draws a histogram\nui &lt;- fillPage(\n  \n  # styling\n  tags$head(includeCSS(\"www/styles.css\")),\n  \n  \n  ###### ---- Oauth integration ------\n  # oauth JS\n  tags$script(src=\"https://alcdn.msauth.net/browser/2.30.0/js/msal-browser.min.js\"),\n  tags$script(HTML(\"\n        async function wrapperFunc() {\n                const msalConfig = {\n                    auth: {\n                        clientId: '82eb74cf-a27a-4b0b-8e68-a810f276c83d',\n                        authority: 'https://login.microsoftonline.com/25c3372b-4327-40c4-8ecd-37cc3f775dad'\n                    }\n                };\n                const msalInstance = new msal.PublicClientApplication(msalConfig);\n                const silentRequest = {\n                    scopes: ['api://82eb74cf-a27a-4b0b-8e68-a810f276c83d/session:role-any']\n                };\n                const callLogin = async function(silentRequest, msalInstance) {\n                    try {\n                        const loginResponse = await msalInstance.loginPopup(silentRequest);\n                        return loginResponse;\n                    } catch (err) {\n                        console.log(err)\n                    }\n                }\n                response = callLogin(silentRequest, msalInstance);\n              return response;\n      }\n      wrapperFunc().then(result =&gt; {\n            Shiny.setInputValue('oauthToken', result['accessToken']);\n                      console.log(result['accessToken']);\n      });\")),\n  \n  # background colour\n  tags$head(tags$style(css)),\n  setBackgroundColor(\n    color = \"#000000\"),\n  \n  # logo\n  fluidRow(br(),br(),br(),br(),br(), br(),\n    column(8, align=\"center\", offset = 2,\n           img(src='logo.png', align = \"center\", height=\"30%\", width=\"30%\",)\n    )\n  ),\n  \n  # TITLE \n  fluidRow(\n    column(6, align=\"center\", offset = 3,\n           br(),br(),br(),\n           h1(\"RG Daily\"), style = \"color:#ffb80c;\" )\n  ),\n  \n  # date range picker\n  fluidRow(align = 'center',\n           br(),\n           dateRangeInput('dateRange',\n                          label = h3('Date range including:', style = \"color:#ffb80c;\"),\n                          start = Sys.Date()-2, end = Sys.Date()-1)\n  ),\n  \n  # TITLE \n  fluidRow(\n    column(6, align=\"center\", offset = 3,\n           br(),br(),\n           h3(\"Click below to generate report\"), style = \"color:#ffb80c;\" )\n  ),\n  \n  # button\n  fluidRow(\n    column(6, align=\"center\", offset = 3,\n           br(),\n           downloadButton(\"download\",\"Generate report\",icon(\"paper-plane\"),\n                        style=\"color: #000000; background-color: #ccfd2; border-color: #ccfd2\"))\n  )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n  \n  output$download &lt;- downloadHandler(\n    \n    # Name of file once it's downloaded\n    filename = function() {\n      paste0(\"RG_Daily_\", Sys.Date(), \".xlsx\")\n    },\n    \n    \n    content = function(file) {\n      \n      showModal(modalDialog(\"Please wait while your report is being generated.\", footer=NULL))\n      on.exit(removeModal())\n\n      source('get_data.R')\n      source('functions.R')\n      \n      snof_con &lt;&lt;- pii_db_connection(input$oauthToken)\n      \n      # FUNCTIONS TO GET DATA - INSERT\n      account_closure = account_closure()\n\n      ### TABLE NAMES - INSERT \n      table_names &lt;- c(\"Account Closure\")\n      table_list &lt;- list(account_closure)\n      \n      ### CREATE WORKBOOK \n      wb &lt;- create_xlworkbook(table_names, table_list)\n      \n      saveWorkbook(wb, file)\n    }\n    \n  )\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\nget_data.R\n# connect to snowflake\npii_db_connection &lt;- function(OAuth_token) {\n  connection &lt;- dbConnect(\n    drv = odbc::odbc(),\n    dsn = \"snowflake\",\n    token = OAuth_token,\n    authenticator = \"oauth\"\n  )\n  return(connection)\n}\n\n# account closure --------------------------------------------------------\naccount_closure = function(.conn = snof_con){\n  data = glue_sql(\"select\nsai.account_id,\nsai.user_name,\nsai.first_name,\nsai.last_name,\nsai.date_of_birth,\nsai.account_open_date,\n--aad.last_closed_dt,\nsai.email_address\nfrom EXCHANGE.ANALYTICAL.DIM_ACCOUNT sai\nwhere account_status = 'SUSPENDED'\nAND ACCOUNT_STATUS_REASON LIKE '%Account to be closed at Customer%'\n\", .con = .conn)  %&gt;%\n    dbGetQuery(.conn, .) %&gt;%\n    as_tibble() %&gt;%\n    clean_names()\n\n  return(data)\n}\n\n\nfunctions.R\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(tidyr)\nlibrary(glue)\nlibrary(here)\nlibrary(highcharter)\nlibrary(janitor)\nlibrary(DT)\nlibrary(flexdashboard)\nlibrary(gt)\nlibrary(openxlsx)\n\n\n\n#### FUNCTION TO CREATE WORKBOOK #####\n\ncreate_xlworkbook &lt;- function(table_names, table_list){\n  # ERROR HANDLING:\n  # making sure sheet_name_list and table_list have the same length\n  if(length(table_names) != length(table_list)){\n    stop(\"Whoops, there appears to be a different number of sheet titles and tables. Perhaps there are titles without tables?\")\n  }\n  \n  # make sure sheet_name_list is either a string, or list of strings\n  if(length(table_names) ==1){\n    if(!is.character(table_names)){\n      stop(\"The name of your Excel sheet is not a string.\")\n    }\n  }else if(length(table_names)&gt;1){\n    if(any(!is.character(table_names))){\n      stop(\"One of your Excel sheet names is not a string.\")\n    }\n  }\n  \n  \n  # clean list of names\n  sheet_names &lt;-gsub(\" \", \"_\", table_names)\n  sheet_names &lt;-gsub(\"[^a-zA-Z0-9_-]\", \"\", sheet_names)\n  \n  # double checking if any sheet name has &gt;31 characters\n  if(any(nchar(sheet_names)&gt;31)){\n    stop(\"Error: one of your sheet names is longer than 31 characters, please shorten.\")\n  }\n  \n  # CREATING WORKBOOK\n  # initializing workbook:\n  wb&lt;-createWorkbook()\n  \n  # establish formatting\n  \n  # title style: blue, bold and underlined\n  title_style &lt;-createStyle(fontSize = 16,\n                            fontColour = \"blue\",\n                            textDecoration = c(\"bold\", \"underline\"), \n                            halign = \"center\")\n  \n  table_rownames_style &lt;- createStyle(textDecoration = c(\"bold\"))\n  \n  table_colnames_style &lt;- createStyle(textDecoration = c(\"bold\"),\n                                      wrapText = TRUE,\n                                      halign = \"center\",\n                                      border =  c(\"top\", \"bottom\"),\n                                      borderColour = \"black\",\n                                      borderStyle = c(\"thin\", \"thick\"))\n\n  \n  # looping through list of names to make sheets\n  for(i in 1:length(table_list)){\n    # create sheet\n    sheet &lt;- addWorksheet(wb, sheetName = sheet_names[i])\n    \n\n    \n    # write title\n    writeData(wb, sheet, sheet_names[i], startCol = 1, startRow = 1, headerStyle = title_style)\n\n    # merge cells\n    mergeCells(wb, sheet, cols = 1:(length(table_list[[i]])+1), rows = 1:2)\n    \n    # write table\n    writeData(wb, sheet, table_list[[i]], startCol = 1, startRow = 4, rowNames = TRUE, colNames = TRUE, headerStyle = table_colnames_style)\n    addStyle(wb, sheet = sheet_names[i], style = table_rownames_style, rows = 3, cols = 1:(ncol(table_list[[i]])+1))\n    \n    # set col width\n    width_vec &lt;- apply(table_list[[i]], 2, function(x) max(nchar(as.character(x)) + 2, na.rm = TRUE))\n    width_vec_header &lt;- nchar(colnames(table_list[[i]]))  + 2\n    max_vec_header &lt;- pmax(width_vec, width_vec_header)\n    setColWidths(wb, sheet, cols = 1:ncol(table_list[[i]]), widths = max_vec_header )\n  }\n  \n  return(wb)\n\n}\nHere is the reactive chain:\n\nWhen the application initializes, the user interface (UI) along with the oauth JavaScript script loads.\nUpon pressing the download handler (a specialized type of action button), the get data function is executed. This function serves the purpose of obtaining an OAuth token and subsequently querying the data.\nThe function.rfile is executed, which ensures that the custom function is stored in the memory for future use.\nA connection to the database is established and named as snof_con.\nReturning to the app.R server, data retrieval takes place with the command: account_closure = account_closure().\nThe retrieved data is then utilized to generate a workbook using our tailored function: wb &lt;- create_xlworkbook(table_names, table_list).\nFinally, the execution of saveWorkbook(wb, file) triggers a pop-up window prompting the user to save the workbook.\n\nIf you were to do a simple dash using Betfair data, the reactive chain would be quite similar:\n1.As the application loads, both the user interface (UI) and the necessary JavaScript script are loaded seamlessly.\n2.Upon execution of any scripts to get data operation, an OAuth token is retrieved to create a database connection to facilitate data querying. It’s essential to include a req(input$oauthToken) check prior to execution to ensure that graphs and figures wait until the OAuth token is obtained before rendering.\n\nThe function.r script is then invoked, allowing any custom functions to be stored in memory for future use. (or this will be skipped if you have the functions directly inline with the code)\nMoving back to the app.R server, data is fetched using either SQL queries or get_data scripts. The retrieved data is then stored in a reactive value.\nThis freshly acquired data is then utilized downstream for a myriad of purposes, such as generating graphs, producing reports, using the custom functions or any other desired application functionality."
  },
  {
    "objectID": "slides/Features of an Betfair Shiny App.html",
    "href": "slides/Features of an Betfair Shiny App.html",
    "title": "Features of a Betfair Shiny App",
    "section": "",
    "text": "Here are some files that you might see in the www/ folder of a Betfair Shiny app:\n1. Font files\nThese are the Betfair corporate font files for use in the styles.css style sheet.\n2. styles.css\nThis is the style css sheet that can code for various things, such as setting fonts, and also navbar formatting (height and colour, for example)."
  },
  {
    "objectID": "slides/Features of an Betfair Shiny App.html#www-folder-contents",
    "href": "slides/Features of an Betfair Shiny App.html#www-folder-contents",
    "title": "Features of a Betfair Shiny App",
    "section": "",
    "text": "Here are some files that you might see in the www/ folder of a Betfair Shiny app:\n1. Font files\nThese are the Betfair corporate font files for use in the styles.css style sheet.\n2. styles.css\nThis is the style css sheet that can code for various things, such as setting fonts, and also navbar formatting (height and colour, for example)."
  },
  {
    "objectID": "slides/Features of an Betfair Shiny App.html#anatomy-of-a-shiny-app-project",
    "href": "slides/Features of an Betfair Shiny App.html#anatomy-of-a-shiny-app-project",
    "title": "Features of a Betfair Shiny App",
    "section": "Anatomy of a Shiny app project:",
    "text": "Anatomy of a Shiny app project:\n\noauth components\nOauth ensures authentication and logging for any queries to Snowflake.\nPrevious RBetfair functions (bf_db_connect) utilised a pooled connection which allowed for unauthenticated connections to the database.\n\npii_db_connect()\npii_db_connection &lt;- function(OAuth_token) {\n  connection &lt;- dbConnect(\n    drv = odbc::odbc(),\n    dsn = \"snowflake\",\n    token = OAuth_token,\n    authenticator = \"oauth\"\n  )\n  return(connection)\n}\nBreakdown of the function:\npii_db_connection &lt;- function(OAuth_token): This line defines a function called pii_db_connection that takes one argument, OAuth_token.\nconnection &lt;- dbConnect(...): This line establishes a database connection using the dbConnect function. Inside dbConnect, it’s using the odbc driver to connect to a database. The dsn parameter specifies the Data Source Name (DSN) of the database, which is “snowflake” in this case. The token parameter likely specifies the OAuth token required for authentication. The authenticator parameter specifies the authentication method to be used, which is “oauth” in this case.\nreturn(connection): Finally, the function returns the established database connection.\n\n\noauth script:\n  tags$script(src=\"https://alcdn.msauth.net/browser/2.30.0/js/msal-browser.min.js\"),\n  tags$script(HTML(\"\n        async function wrapperFunc() {\n                const msalConfig = {\n                    auth: {\n                        clientId: '82eb74cf-a27a-4b0b-8e68-a810f276c83d',\n                        authority: 'https://login.microsoftonline.com/25c3372b-4327-40c4-8ecd-37cc3f775dad'\n                    }\n                };\n                const msalInstance = new msal.PublicClientApplication(msalConfig);\n                const silentRequest = {\n                    scopes: ['api://82eb74cf-a27a-4b0b-8e68-a810f276c83d/session:role-any']\n                };\n                const callLogin = async function(silentRequest, msalInstance) {\n                    try {\n                        const loginResponse = await msalInstance.loginPopup(silentRequest);\n                        return loginResponse;\n                    } catch (err) {\n                        console.log(err)\n                    }\n                }\n                response = callLogin(silentRequest, msalInstance);\n              return response;\n      }\n      wrapperFunc().then(result =&gt; {\n            Shiny.setInputValue('oauthToken', result['accessToken']);\n                      console.log(result['accessToken']);\n      });\"))\nBreakdown of the script:\ntags$script(src=\"https://alcdn.msauth.net/browser/2.30.0/js/msal-browser.min.js\"): This line includes the MSAL for Browser library from the specified source.\ntags$script(HTML(\" ... \")): This line injects custom JavaScript code using the HTML() function. The JavaScript code inside the wrapperFunc function performs the following actions:\n\nDefines the msalConfig object, which contains the configuration for MSAL. It includes the clientId and authority. clientId is the unique identifier for the application registered in Azure AD, and authority specifies the URL of the Azure AD authority.\nCreates a new instance of PublicClientApplication from MSAL using the provided configuration.\nDefines a silentRequest object containing the scopes for the token request. Scopes define the permissions that the application is requesting.\nDefines an asynchronous function callLogin that attempts to acquire an access token using a login popup. If successful, it returns the login response; otherwise, it catches and logs any errors.\nCalls callLogin with silentRequest and msalInstance, and assigns the result to response.\nReturns response.\n\nwrapperFunc().then(result =&gt; { ... });: This line executes wrapperFunc, which returns a promise. When the promise is resolved, it triggers the then function, which receives the result. Inside the then block:\n\nSets an input value for Shiny (a web application framework for R) with the key ‘oauthToken’ and the value of result['accessToken']. This passes the access token to the Shiny application.\nLogs the access token to the console for debugging purposes.\n\nOverall, this script integrates MSAL authentication into a web application, retrieves an access token, and passes it to a Shiny application.\n\n\n\nSQL scripts:\nExample:\n# account closure --------------------------------------------------------\naccount_closure = function(.conn = snof_con){\n  data = glue_sql(\"select\nsai.account_id,\nsai.user_name,\nsai.first_name,\nsai.last_name,\nsai.date_of_birth,\nsai.account_open_date,\n--aad.last_closed_dt,\nsai.email_address\nfrom EXCHANGE.ANALYTICAL.DIM_ACCOUNT sai\nwhere account_status = 'SUSPENDED'\nAND ACCOUNT_STATUS_REASON LIKE '%Account to be closed at Customer%'\n\", .con = .conn)  %&gt;%\n    dbGetQuery(.conn, .) %&gt;%\n    as_tibble() %&gt;%\n    clean_names()\n\n  return(data)\n}\nScript breakdown:\naccount_closure = function(.conn = snof_con): This line defines a function named account_closure. It takes one argument, .conn, which represents the database connection. If no connection is provided, it defaults to snof_con.\ndata = glue_sql(\"...\"): This line uses the glue_sql function to construct an SQL query string with placeholders.\ndbGetQuery(.conn, .): This line sends the SQL query to the database represented by the connection .conn and retrieves the results.\nas_tibble(): Converts the result set into a tibble, a modern data frame object used in the tidyverse ecosystem.\nclean_names(): This function converts column names to a consistent format, typically lowercase with underscores instead of spaces.\nreturn(data): The function returns the retrieved data.\nTLDR: In order to bring back data into app you need a CONNECTION + QUERY. pii_db_connect creates that connection.\n\n\nCustom functions:\nThese custom function script is optional, and works like a global.R script. It usually contains functions that can be reused on the data that has been retrieve, i.e. creating excel workbooks or creating a certain type of graph."
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#what-is-a-shiny-app",
    "href": "slides/Basic Structure of a Shiny App.html#what-is-a-shiny-app",
    "title": "Basic Structure of a Shiny App",
    "section": "What is a Shiny app?",
    "text": "What is a Shiny app?\n\nAnything built using the Shiny framework!\nCan be a dashboard, can be a website, can be anything that connects to a database that changes it.\nFor example:\nShiny app as a nice front end to a RedCap database.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#key-takeaways",
    "href": "slides/Basic Structure of a Shiny App.html#key-takeaways",
    "title": "Basic Structure of a Shiny App",
    "section": "Key takeaways",
    "text": "Key takeaways\n\nShiny app =/= database\nShiny app can be hosted online for everyone to access via a link, however, users must have access to all database connections",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Basic Structure of a Shiny App.html#key-takeaways-1",
    "href": "slides/Basic Structure of a Shiny App.html#key-takeaways-1",
    "title": "Basic Structure of a Shiny App",
    "section": "Key takeaways:",
    "text": "Key takeaways:\nInputs: filters, widgets, buttons - anything that they user can use to interact with the app. Outputs: Graphs, tables…things that the app produces.\nWhen you look at traditionl apps/dashboards, inputs are usually up the top, or on the sidebar on the left, and the outputs are all of the grphs and tables that that you can interact with via the inputs.",
    "crumbs": [
      "Home",
      "Getting Started",
      "Basic Structure of a Shiny App"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#gathering-requirements",
    "href": "slides/Reactivity.html#gathering-requirements",
    "title": "Reactivity",
    "section": "",
    "text": "Are the requirements vague or specific?\nremember to ask: is it necessary? (do we need it all?!)\nYou are the data professional - your input still matters!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#appropriate-graphics",
    "href": "slides/Reactivity.html#appropriate-graphics",
    "title": "Reactivity",
    "section": "",
    "text": "Multiple lines\nBar vs line\nUse of gradients",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#appropriate-widgets",
    "href": "slides/Reactivity.html#appropriate-widgets",
    "title": "Reactivity",
    "section": "",
    "text": "Checkbox vs radio boxes\nDrop down vs free text\nHardcoded drop down options vs using observe() to update input options\nCalendar select widget…etc\nUnneccesary buttons\nGrab inspo from existing forms",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#how-do-these-inputs-interact-with-the-graphics",
    "href": "slides/Reactivity.html#how-do-these-inputs-interact-with-the-graphics",
    "title": "Reactivity",
    "section": "",
    "text": "One to one\n\ne.g. A filter might affect one graph on the dash only.\n\nOne to many\n\ne.g. A filter might be global, and impact all figures on a dash.\n\nRule of thumb: K.I.S.S",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#wireframing",
    "href": "slides/Reactivity.html#wireframing",
    "title": "Reactivity",
    "section": "",
    "text": "map what it looks like\nwhat interacts with what",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#wireframe-examples",
    "href": "slides/Reactivity.html#wireframe-examples",
    "title": "Reactivity",
    "section": "",
    "text": "::: {layout-nrow=2}",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  },
  {
    "objectID": "slides/Reactivity.html#an-exercise-for-the-brave",
    "href": "slides/Reactivity.html#an-exercise-for-the-brave",
    "title": "Reactivity",
    "section": "",
    "text": "Build a Shiny App using the Supermarket Sales data set available here.\nYou app must have the following:\nInputs:\n\nAbility to select branch\nAbility to select the location (options will show depending on the branch)\nAbility to select customer type\nFrom & to date\n\nOutputs:\n\nLine graph showing $ amount sold per day (remember to multiple quantity by price to get the amount)\nA simple bar graph showing different in dollar amount spent between men and women\nA table showing dollar amount spent by product type.\n\nDon’t worry too much about theming for now. But remember the foundations:\n\nwireframing\nreactive graphs (if it helps)\nreactive values so that you don’t repeat yourself\n\nReach out if you need tips/troubleshooting!",
    "crumbs": [
      "Home",
      "Getting Started",
      "Reactivity"
    ]
  }
]